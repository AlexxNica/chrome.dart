{"name":"ChromeManagement","qualifiedName":"chrome/chrome_ext.ChromeManagement","comment":"","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeApi","implements":[],"subclass":[],"variables":{"_onInstalled":{"name":"_onInstalled","qualifiedName":"chrome/chrome_ext.ChromeManagement._onInstalled","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.ExtensionInfo","inner":[]}]}],"annotations":[]},"_onUninstalled":{"name":"_onUninstalled","qualifiedName":"chrome/chrome_ext.ChromeManagement._onUninstalled","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.String","inner":[]}]}],"annotations":[]},"_onEnabled":{"name":"_onEnabled","qualifiedName":"chrome/chrome_ext.ChromeManagement._onEnabled","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.ExtensionInfo","inner":[]}]}],"annotations":[]},"_onDisabled":{"name":"_onDisabled","qualifiedName":"chrome/chrome_ext.ChromeManagement._onDisabled","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.ExtensionInfo","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_management":{"name":"_management","qualifiedName":"chrome/chrome_ext.ChromeManagement._management","comment":"","commentFrom":"chrome_ext.ChromeManagement._management","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"onInstalled":{"name":"onInstalled","qualifiedName":"chrome/chrome_ext.ChromeManagement.onInstalled","comment":"<p>Fired when an app or extension has been installed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.ExtensionInfo","inner":[]}]}],"parameters":{},"annotations":[]},"onUninstalled":{"name":"onUninstalled","qualifiedName":"chrome/chrome_ext.ChromeManagement.onUninstalled","comment":"<p>Fired when an app or extension has been uninstalled.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"onEnabled":{"name":"onEnabled","qualifiedName":"chrome/chrome_ext.ChromeManagement.onEnabled","comment":"<p>Fired when an app or extension has been enabled.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.ExtensionInfo","inner":[]}]}],"parameters":{},"annotations":[]},"onDisabled":{"name":"onDisabled","qualifiedName":"chrome/chrome_ext.ChromeManagement.onDisabled","comment":"<p>Fired when an app or extension has been disabled.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.ExtensionInfo","inner":[]}]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeManagement.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_ext.ChromeManagement.ChromeManagement-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"getAll":{"name":"getAll","qualifiedName":"chrome/chrome_ext.ChromeManagement.getAll","comment":"<p>Returns a list of information about installed extensions and apps.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.ExtensionInfo","inner":[]}]}]}],"parameters":{},"annotations":[]},"get":{"name":"get","qualifiedName":"chrome/chrome_ext.ChromeManagement.get","comment":"<p>Returns information about the installed extension, app, or theme that has\nthe given ID.</p>\n<p><a>chrome/chrome_ext.ChromeManagement.get.id</a> The ID from an item of <a>chrome/chrome-management.ExtensionInfo.ExtensionInfo-</a></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.ExtensionInfo","inner":[]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getPermissionWarningsById":{"name":"getPermissionWarningsById","qualifiedName":"chrome/chrome_ext.ChromeManagement.getPermissionWarningsById","comment":"<p>Returns a list of <a href=\"permission_warnings.html\">permission warnings</a> for the\ngiven extension id.</p>\n<p><a>chrome/chrome_ext.ChromeManagement.getPermissionWarningsById.id</a> The ID of an already installed extension.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getPermissionWarningsByManifest":{"name":"getPermissionWarningsByManifest","qualifiedName":"chrome/chrome_ext.ChromeManagement.getPermissionWarningsByManifest","comment":"<p>Returns a list of <a href=\"permission_warnings.html\">permission warnings</a> for the\ngiven extension manifest string. Note: This function can be used without\nrequesting the 'management' permission in the manifest.</p>\n<p><a>chrome/chrome_ext.ChromeManagement.getPermissionWarningsByManifest.manifestStr</a> Extension manifest JSON string.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}]}],"parameters":{"manifestStr":{"name":"manifestStr","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setEnabled":{"name":"setEnabled","qualifiedName":"chrome/chrome_ext.ChromeManagement.setEnabled","comment":"<p>Enables or disables an app or extension.</p>\n<p><a>chrome/chrome_ext.ChromeManagement.setEnabled.id</a> This should be the id from an item of <a>chrome/chrome-management.ExtensionInfo.ExtensionInfo-</a></p>\n<p><a>chrome/chrome_ext.ChromeManagement.setEnabled.enabled</a> Whether this item should be enabled or disabled.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"enabled":{"name":"enabled","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"uninstall":{"name":"uninstall","qualifiedName":"chrome/chrome_ext.ChromeManagement.uninstall","comment":"<p>Uninstalls a currently installed app or extension.</p>\n<p><a>chrome/chrome_ext.ChromeManagement.uninstall.id</a> This should be the id from an item of <a>chrome/chrome-management.ExtensionInfo.ExtensionInfo-</a></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"options":{"name":"options","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.ManagementUninstallParams","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"uninstallSelf":{"name":"uninstallSelf","qualifiedName":"chrome/chrome_ext.ChromeManagement.uninstallSelf","comment":"<p>Uninstalls the calling extension. Note: This function can be used without\nrequesting the 'management' permission in the manifest.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"options":{"name":"options","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.ManagementUninstallSelfParams","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"launchApp":{"name":"launchApp","qualifiedName":"chrome/chrome_ext.ChromeManagement.launchApp","comment":"<p>Launches an application.</p>\n<p><a>chrome/chrome_ext.ChromeManagement.launchApp.id</a> The extension id of the application.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_ext.ChromeManagement._throwNotAvailable","comment":"","commentFrom":"chrome_ext.ChromeManagement._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.ChromeManagement.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.ChromeManagement.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.ChromeManagement.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeManagement.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_ext.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.ChromeManagement.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.ChromeManagement.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.ChromeManagement.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.ChromeManagement.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.ChromeManagement.noSuchMethod","comment":"<p><a>chrome/chrome_ext.ChromeManagement.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.ChromeManagement.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.ChromeManagement.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.ChromeManagement.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}