{"name":"ChromeBookmarks","qualifiedName":"chrome/chrome_ext.ChromeBookmarks","comment":"","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeApi","implements":[],"subclass":[],"variables":{"_onCreated":{"name":"_onCreated","qualifiedName":"chrome/chrome_ext.ChromeBookmarks._onCreated","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnCreatedEvent","inner":[]}]}],"annotations":[]},"_onRemoved":{"name":"_onRemoved","qualifiedName":"chrome/chrome_ext.ChromeBookmarks._onRemoved","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.BookmarksOnRemovedEvent","inner":[]}]}],"annotations":[]},"_onChanged":{"name":"_onChanged","qualifiedName":"chrome/chrome_ext.ChromeBookmarks._onChanged","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.BookmarksOnChangedEvent","inner":[]}]}],"annotations":[]},"_onMoved":{"name":"_onMoved","qualifiedName":"chrome/chrome_ext.ChromeBookmarks._onMoved","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.BookmarksOnMovedEvent","inner":[]}]}],"annotations":[]},"_onChildrenReordered":{"name":"_onChildrenReordered","qualifiedName":"chrome/chrome_ext.ChromeBookmarks._onChildrenReordered","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnChildrenReorderedEvent","inner":[]}]}],"annotations":[]},"_onImportBegan":{"name":"_onImportBegan","qualifiedName":"chrome/chrome_ext.ChromeBookmarks._onImportBegan","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[]}],"annotations":[]},"_onImportEnded":{"name":"_onImportEnded","qualifiedName":"chrome/chrome_ext.ChromeBookmarks._onImportEnded","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_bookmarks":{"name":"_bookmarks","qualifiedName":"chrome/chrome_ext.ChromeBookmarks._bookmarks","comment":"","commentFrom":"chrome_ext.ChromeBookmarks._bookmarks","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"onCreated":{"name":"onCreated","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.onCreated","comment":"<p>Fired when a bookmark or folder is created.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnCreatedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onRemoved":{"name":"onRemoved","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.onRemoved","comment":"<p>Fired when a bookmark or folder is removed.  When a folder is removed\nrecursively, a single notification is fired for the folder, and none for\nits contents.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.BookmarksOnRemovedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onChanged":{"name":"onChanged","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.onChanged","comment":"<p>Fired when a bookmark or folder changes.  &lt;b>Note:&lt;/b> Currently, only\ntitle and url changes trigger this.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.BookmarksOnChangedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onMoved":{"name":"onMoved","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.onMoved","comment":"<p>Fired when a bookmark or folder is moved to a different parent folder.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.BookmarksOnMovedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onChildrenReordered":{"name":"onChildrenReordered","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.onChildrenReordered","comment":"<p>Fired when the children of a folder have changed their order due to the\norder being sorted in the UI.  This is not called as a result of a move().</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnChildrenReorderedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onImportBegan":{"name":"onImportBegan","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.onImportBegan","comment":"<p>Fired when a bookmark import session is begun.  Expensive observers should\nignore onCreated updates until onImportEnded is fired.  Observers should\nstill handle other notifications immediately.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{},"annotations":[]},"onImportEnded":{"name":"onImportEnded","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.onImportEnded","comment":"<p>Fired when a bookmark import session is ended.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"MAX_WRITE_OPERATIONS_PER_HOUR":{"name":"MAX_WRITE_OPERATIONS_PER_HOUR","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.MAX_WRITE_OPERATIONS_PER_HOUR","comment":"<p>The maximum number of <code>move</code>, <code>update</code>, <code>create</code>, or <code>remove</code> operations\nthat can be performed each hour. Updates that would cause this limit to be\nexceeded fail.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE":{"name":"MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE","comment":"<p>The maximum number of <code>move</code>, <code>update</code>, <code>create</code>, or <code>remove</code> operations\nthat can be performed each minute, sustained over 10 minutes. Updates that\nwould cause this limit to be exceeded fail.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.ChromeBookmarks-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"get":{"name":"get","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.get","comment":"<p>Retrieves the specified BookmarkTreeNode(s).</p>\n<p><a>chrome/chrome_ext.ChromeBookmarks.get.idOrIdList</a> A single string-valued id, or an array of string-valued ids</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.BookmarkTreeNode","inner":[]}]}]}],"parameters":{"idOrIdList":{"name":"idOrIdList","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getChildren":{"name":"getChildren","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.getChildren","comment":"<p>Retrieves the children of the specified BookmarkTreeNode id.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.BookmarkTreeNode","inner":[]}]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getRecent":{"name":"getRecent","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.getRecent","comment":"<p>Retrieves the recently added bookmarks.</p>\n<p><a>chrome/chrome_ext.ChromeBookmarks.getRecent.numberOfItems</a> The maximum number of items to return.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.BookmarkTreeNode","inner":[]}]}]}],"parameters":{"numberOfItems":{"name":"numberOfItems","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getTree":{"name":"getTree","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.getTree","comment":"<p>Retrieves the entire Bookmarks hierarchy.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.BookmarkTreeNode","inner":[]}]}]}],"parameters":{},"annotations":[]},"getSubTree":{"name":"getSubTree","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.getSubTree","comment":"<p>Retrieves part of the Bookmarks hierarchy, starting at the specified node.</p>\n<p><a>chrome/chrome_ext.ChromeBookmarks.getSubTree.id</a> The ID of the root of the subtree to retrieve.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.BookmarkTreeNode","inner":[]}]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"search":{"name":"search","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.search","comment":"<p>Searches for BookmarkTreeNodes matching the given query.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.BookmarkTreeNode","inner":[]}]}]}],"parameters":{"query":{"name":"query","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"create":{"name":"create","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.create","comment":"<p>Creates a bookmark or folder under the specified parentId.  If url is NULL\nor missing, it will be a folder.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.BookmarkTreeNode","inner":[]}]}],"parameters":{"bookmark":{"name":"bookmark","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.BookmarksCreateParams","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"move":{"name":"move","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.move","comment":"<p>Moves the specified BookmarkTreeNode to the provided location.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.BookmarkTreeNode","inner":[]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"destination":{"name":"destination","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.BookmarksMoveParams","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"update":{"name":"update","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.update","comment":"<p>Updates the properties of a bookmark or folder. Specify only the properties\nthat you want to change; unspecified properties will be left unchanged.\n&lt;b>Note:&lt;/b> Currently, only 'title' and 'url' are supported.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.BookmarkTreeNode","inner":[]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"changes":{"name":"changes","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.BookmarksUpdateParams","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.remove","comment":"<p>Removes a bookmark or an empty bookmark folder.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeTree":{"name":"removeTree","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.removeTree","comment":"<p>Recursively removes a bookmark folder.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"import":{"name":"import","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.import","comment":"<p>Imports bookmarks from a chrome html bookmark file</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"export":{"name":"export","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.export","comment":"<p>Exports bookmarks to a chrome html bookmark file</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_ext.ChromeBookmarks._throwNotAvailable","comment":"","commentFrom":"chrome_ext.ChromeBookmarks._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.ChromeBookmarks.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_ext.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.ChromeBookmarks.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.ChromeBookmarks.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.ChromeBookmarks.noSuchMethod","comment":"<p><a>chrome/chrome_ext.ChromeBookmarks.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.ChromeBookmarks.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.ChromeBookmarks.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.ChromeBookmarks.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}