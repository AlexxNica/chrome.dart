{"name":"DangerType","qualifiedName":"chrome/chrome_ext.DangerType","comment":"<dl><dt>file</dt> <dd>The download's filename is suspicious.</dd>\n<dt>url</dt> <dd>The download's URL is known to be malicious.</dd>\n<dt>content</dt> <dd>The downloaded file is known to be malicious.</dd>\n<dt>uncommon</dt> <dd>The download's URL is not commonly downloaded and could\nbe dangerous.</dd> <dt>host</dt> <dd>The download came from a host known to\ndistribute malicious binaries and is likely dangerous.</dd> <dt>unwanted</dt>\n<dd>The download is potentially unwanted or unsafe. E.g. it could make\nchanges to browser or computer settings.</dd> <dt>safe</dt> <dd>The download\npresents no known danger to the user's computer.</dd> <dt>accepted</dt>\n<dd>The user has accepted the dangerous download.</dd> </dl>","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeEnum","implements":[],"subclass":[],"variables":{"FILE":{"name":"FILE","qualifiedName":"chrome/chrome_ext.DangerType.FILE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"chrome/chrome_ext.DangerType","inner":[]}],"annotations":[]},"URL":{"name":"URL","qualifiedName":"chrome/chrome_ext.DangerType.URL","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"chrome/chrome_ext.DangerType","inner":[]}],"annotations":[]},"CONTENT":{"name":"CONTENT","qualifiedName":"chrome/chrome_ext.DangerType.CONTENT","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"chrome/chrome_ext.DangerType","inner":[]}],"annotations":[]},"UNCOMMON":{"name":"UNCOMMON","qualifiedName":"chrome/chrome_ext.DangerType.UNCOMMON","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"chrome/chrome_ext.DangerType","inner":[]}],"annotations":[]},"HOST":{"name":"HOST","qualifiedName":"chrome/chrome_ext.DangerType.HOST","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"chrome/chrome_ext.DangerType","inner":[]}],"annotations":[]},"UNWANTED":{"name":"UNWANTED","qualifiedName":"chrome/chrome_ext.DangerType.UNWANTED","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"chrome/chrome_ext.DangerType","inner":[]}],"annotations":[]},"SAFE":{"name":"SAFE","qualifiedName":"chrome/chrome_ext.DangerType.SAFE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"chrome/chrome_ext.DangerType","inner":[]}],"annotations":[]},"ACCEPTED":{"name":"ACCEPTED","qualifiedName":"chrome/chrome_ext.DangerType.ACCEPTED","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"chrome/chrome_ext.DangerType","inner":[]}],"annotations":[]},"VALUES":{"name":"VALUES","qualifiedName":"chrome/chrome_ext.DangerType.VALUES","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.DangerType","inner":[]}]}],"annotations":[]}},"inheritedVariables":{"value":{"name":"value","qualifiedName":"chrome/chrome_app.ChromeEnum.value","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_ext.DangerType.DangerType-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.DangerType.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.DangerType.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.DangerType.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.DangerType.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.DangerType.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.DangerType.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.DangerType.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"chrome_ext.ChromeEnum.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.DangerType.noSuchMethod","comment":"<p><a>chrome/chrome_ext.DangerType.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.DangerType.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.DangerType.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.DangerType.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}