{"name":"ChromeFileSystem","qualifiedName":"chrome/chrome_app.ChromeFileSystem","comment":"","isAbstract":false,"superclass":"chrome/chrome_app.ChromeApi","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_fileSystem":{"name":"_fileSystem","qualifiedName":"chrome/chrome_app.ChromeFileSystem._fileSystem","comment":"","commentFrom":"chrome_app.ChromeFileSystem._fileSystem","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeFileSystem.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_app.ChromeFileSystem.ChromeFileSystem-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_app.ChromeFileSystem._throwNotAvailable","comment":"","commentFrom":"chrome_app.ChromeFileSystem._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"chooseEntry":{"name":"chooseEntry","qualifiedName":"chrome/chrome_app.ChromeFileSystem.chooseEntry","comment":"<p>Ask the user to choose a file or directory.</p>\n<p>Returns:\nentry null\nfileEntries null</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.ChooseEntryResult","inner":[]}]}],"parameters":{"options":{"name":"options","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ChooseEntryOptions","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getDisplayPath":{"name":"getDisplayPath","qualifiedName":"chrome/chrome_app.ChromeFileSystem.getDisplayPath","comment":"<p>Get the display path of an Entry object. The display path is based on the\nfull path of the file or directory on the local file system, but may be\nmade more readable for display purposes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"entry":{"name":"entry","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Entry","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getWritableEntry":{"name":"getWritableEntry","qualifiedName":"chrome/chrome_app.ChromeFileSystem.getWritableEntry","comment":"<p>Get a writable Entry from another Entry. This call will fail with a runtime\nerror if the application does not have the 'write' permission under\n'fileSystem'. If entry is a DirectoryEntry, this call will fail if the\napplication does not have the 'directory' permission under 'fileSystem'.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.Entry","inner":[]}]}],"parameters":{"entry":{"name":"entry","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Entry","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isRestorable":{"name":"isRestorable","qualifiedName":"chrome/chrome_app.ChromeFileSystem.isRestorable","comment":"<p>Returns whether the app has permission to restore the entry with the given\nid. This method is new in Chrome 31.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isWritableEntry":{"name":"isWritableEntry","qualifiedName":"chrome/chrome_app.ChromeFileSystem.isWritableEntry","comment":"<p>Gets whether this Entry is writable or not.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"entry":{"name":"entry","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Entry","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"restoreEntry":{"name":"restoreEntry","qualifiedName":"chrome/chrome_app.ChromeFileSystem.restoreEntry","comment":"<p>Returns the file entry with the given id if it can be restored. This call\nwill fail with a runtime error otherwise. This method is new in Chrome 31.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.Entry","inner":[]}]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"retainEntry":{"name":"retainEntry","qualifiedName":"chrome/chrome_app.ChromeFileSystem.retainEntry","comment":"<p>Returns an id that can be passed to restoreEntry to regain access to a\ngiven file entry. Only the 500 most recently used entries are retained,\nwhere calls to retainEntry and restoreEntry count as use. If the app has\nthe 'retainEntries' permission under 'fileSystem', entries are retained\nindefinitely. Otherwise, entries are retained only while the app is running\nand across restarts. This method is new in Chrome 31.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"entry":{"name":"entry","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Entry","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeFileSystem.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_app.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_app.ChromeFileSystem.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_app.ChromeFileSystem.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_app.ChromeFileSystem.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_app.ChromeFileSystem.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_app.ChromeFileSystem.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_app.ChromeFileSystem.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_app.ChromeFileSystem.noSuchMethod","comment":"<p><a>chrome/chrome_app.ChromeFileSystem.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_app.ChromeFileSystem.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_app.ChromeFileSystem.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_app.ChromeFileSystem.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"chrome/chrome_app.ChromeFileSystem.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}