{"name":"ChromeBluetooth","qualifiedName":"chrome/chrome_app.ChromeBluetooth","comment":"","isAbstract":false,"superclass":"chrome/chrome_app.ChromeApi","implements":[],"subclass":[],"variables":{"_onAdapterStateChanged":{"name":"_onAdapterStateChanged","qualifiedName":"chrome/chrome_app.ChromeBluetooth._onAdapterStateChanged","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_app.AdapterState","inner":[]}]}],"annotations":[]},"_onConnection":{"name":"_onConnection","qualifiedName":"chrome/chrome_app.ChromeBluetooth._onConnection","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_app.Socket","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_bluetooth":{"name":"_bluetooth","qualifiedName":"chrome/chrome_app.ChromeBluetooth._bluetooth","comment":"","commentFrom":"chrome_app.ChromeBluetooth._bluetooth","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeBluetooth.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"onAdapterStateChanged":{"name":"onAdapterStateChanged","qualifiedName":"chrome/chrome_app.ChromeBluetooth.onAdapterStateChanged","comment":"","commentFrom":"chrome_app.ChromeBluetooth.onAdapterStateChanged","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_app.AdapterState","inner":[]}]}],"parameters":{},"annotations":[]},"onConnection":{"name":"onConnection","qualifiedName":"chrome/chrome_app.ChromeBluetooth.onConnection","comment":"","commentFrom":"chrome_app.ChromeBluetooth.onConnection","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_app.Socket","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_app.ChromeBluetooth.ChromeBluetooth-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_app.ChromeBluetooth._throwNotAvailable","comment":"","commentFrom":"chrome_app.ChromeBluetooth._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"addProfile":{"name":"addProfile","qualifiedName":"chrome/chrome_app.ChromeBluetooth.addProfile","comment":"<p>Registers the JavaScript application as an implementation for the given\nProfile; if a channel or PSM is specified, the profile will be exported in\nthe host's SDP and GATT tables and advertised to other devices.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"profile":{"name":"profile","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.Profile","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"connect":{"name":"connect","qualifiedName":"chrome/chrome_app.ChromeBluetooth.connect","comment":"<p>Connect to a service on a device.\n<a>chrome/chrome_app.ChromeBluetooth.connect.options</a>: The options for the connection.\ncallback: Called to indicate success or failure.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"options":{"name":"options","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ConnectOptions","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"disconnect":{"name":"disconnect","qualifiedName":"chrome/chrome_app.ChromeBluetooth.disconnect","comment":"<p>Close a Bluetooth connection.\n<a>chrome/chrome_app.ChromeBluetooth.disconnect.options</a>: The options for this function.\ncallback: Called to indicate success or failure.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"options":{"name":"options","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.DisconnectOptions","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getAdapterState":{"name":"getAdapterState","qualifiedName":"chrome/chrome_app.ChromeBluetooth.getAdapterState","comment":"<p>Get information about the Bluetooth adapter.\ncallback: Called with an AdapterState object describing the adapter\nstate.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.AdapterState","inner":[]}]}],"parameters":{},"annotations":[]},"getDevices":{"name":"getDevices","qualifiedName":"chrome/chrome_app.ChromeBluetooth.getDevices","comment":"<p>Get a bluetooth devices known to the system. Known devices are either\ncurrently paired, or have been paired in the past.\n<a>chrome/chrome_app.ChromeBluetooth.getDevices.options</a>: Controls which devices are returned and provides\ndeviceCallback, which is called for each matching device.\ncallback: Called when the search is completed. |options.deviceCallback|\nwill not be called after callback has been called.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"options":{"name":"options","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.GetDevicesOptions","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getLocalOutOfBandPairingData":{"name":"getLocalOutOfBandPairingData","qualifiedName":"chrome/chrome_app.ChromeBluetooth.getLocalOutOfBandPairingData","comment":"<p>Get the local Out of Band Pairing data.\ncallback: Called with the data.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.OutOfBandPairingData","inner":[]}]}],"parameters":{},"annotations":[]},"getProfiles":{"name":"getProfiles","qualifiedName":"chrome/chrome_app.ChromeBluetooth.getProfiles","comment":"<p>Returns the set of exported profiles for the device specified in options.\nThis function will not initiate a connection to the remote device.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_app.Profile","inner":[]}]}]}],"parameters":{"options":{"name":"options","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.GetProfilesOptions","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getServices":{"name":"getServices","qualifiedName":"chrome/chrome_app.ChromeBluetooth.getServices","comment":"<p>Get a list of services provided by a device.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_app.ServiceRecord","inner":[]}]}]}],"parameters":{"options":{"name":"options","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.GetServicesOptions","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"read":{"name":"read","qualifiedName":"chrome/chrome_app.ChromeBluetooth.read","comment":"<p>Read data from a Bluetooth connection.\n<a>chrome/chrome_app.ChromeBluetooth.read.options</a>: The options for this function.\ncallback: Called with the data when it is available.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.ArrayBuffer","inner":[]}]}],"parameters":{"options":{"name":"options","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ReadOptions","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeProfile":{"name":"removeProfile","qualifiedName":"chrome/chrome_app.ChromeBluetooth.removeProfile","comment":"<p>Unregisters the JavaScript application as an implementation for the given\nProfile; only the uuid field of the Profile object is used.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"profile":{"name":"profile","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.Profile","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setOutOfBandPairingData":{"name":"setOutOfBandPairingData","qualifiedName":"chrome/chrome_app.ChromeBluetooth.setOutOfBandPairingData","comment":"<p>Set the Out of Band Pairing data for a remote device. Any previous Out Of\nBand Pairing Data for this device is overwritten.\n<a>chrome/chrome_app.ChromeBluetooth.setOutOfBandPairingData.options</a>: The options for this function.\ncallback: Called to indicate success or failure.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"options":{"name":"options","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.SetOutOfBandPairingDataOptions","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"startDiscovery":{"name":"startDiscovery","qualifiedName":"chrome/chrome_app.ChromeBluetooth.startDiscovery","comment":"<p>Start discovery. Discovered devices will be returned via the\nonDeviceDiscovered callback. Discovery will fail to start if it is\nalready in progress. Discovery can be resource intensive: stopDiscovery\nshould be called as soon as possible.\n<a>chrome/chrome_app.ChromeBluetooth.startDiscovery.options</a>: The options for this function.\ncallback: Called to indicate success or failure.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"options":{"name":"options","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.StartDiscoveryOptions","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"stopDiscovery":{"name":"stopDiscovery","qualifiedName":"chrome/chrome_app.ChromeBluetooth.stopDiscovery","comment":"<p>Stop discovery.\ncallback: Called to indicate success or failure.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"write":{"name":"write","qualifiedName":"chrome/chrome_app.ChromeBluetooth.write","comment":"<p>Write data to a Bluetooth connection.\n<a>chrome/chrome_app.ChromeBluetooth.write.options</a>: The options for this function.\ncallback: Called with the number of bytes written.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"options":{"name":"options","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.WriteOptions","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeBluetooth.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_app.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_app.ChromeBluetooth.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_app.ChromeBluetooth.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_app.ChromeBluetooth.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_app.ChromeBluetooth.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_app.ChromeBluetooth.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_app.ChromeBluetooth.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_app.ChromeBluetooth.noSuchMethod","comment":"<p><a>chrome/chrome_app.ChromeBluetooth.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_app.ChromeBluetooth.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_app.ChromeBluetooth.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_app.ChromeBluetooth.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"chrome/chrome_app.ChromeBluetooth.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}