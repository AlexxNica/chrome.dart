{"name":"ChromeSocketsUdp","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp","comment":"<p>Use the <code>chrome.sockets.udp</code> API to send and receive data over the network\nusing UDP connections. This API supersedes the UDP functionality previously\nfound in the \"socket\" API. Note that the socket ids created from this\nnamespace are not compatible with ids created in other namespaces.</p>","isAbstract":false,"superclass":"chrome/chrome_app.ChromeApi","implements":[],"subclass":[],"variables":{"_onReceive":{"name":"_onReceive","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp._onReceive","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_app.ReceiveInfo","inner":[]}]}],"annotations":[]},"_onReceiveError":{"name":"_onReceiveError","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp._onReceiveError","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_app.ReceiveErrorInfo","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_sockets_udp":{"name":"_sockets_udp","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp._sockets_udp","comment":"","commentFrom":"chrome_app.ChromeSocketsUdp._sockets_udp","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"onReceive":{"name":"onReceive","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.onReceive","comment":"","commentFrom":"chrome_app.ChromeSocketsUdp.onReceive","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_app.ReceiveInfo","inner":[]}]}],"parameters":{},"annotations":[]},"onReceiveError":{"name":"onReceiveError","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.onReceiveError","comment":"","commentFrom":"chrome_app.ChromeSocketsUdp.onReceiveError","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_app.ReceiveErrorInfo","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.ChromeSocketsUdp-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp._throwNotAvailable","comment":"","commentFrom":"chrome_app.ChromeSocketsUdp._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"bind":{"name":"bind","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.bind","comment":"<p>Binds the local address for socket. When the <code>bind</code> operation completes\nsuccessfully, <code>onReceive</code> events are raised when UDP packets arrive on the\naddress/port specified. If a network error occurs while the runtime is\nreceiving packets, an <code>onReceiveError</code> event is raised, at which point no\nmore <code>onReceive</code> events will be raised for this socket.\n<a>chrome/chrome_app.ChromeSocketsUdp.bind.socketId</a>: The socket ID.\n<a>chrome/chrome_app.ChromeSocketsUdp.bind.address</a>: The address of the local machine. DNS name, IPv4 and IPv6\nformats are supported. Use \"0.0.0.0\" to accept packets from all local\navailable network interfaces.\n<a>chrome/chrome_app.ChromeSocketsUdp.bind.port</a>: The port of the local machine. Use \"0\" to bind to a free port.\ncallback: Called when the <code>bind</code> operation completes.</p>\n<p>Returns:\nCallback from the <code>bind</code> method.\nresult: The result code returned from the underlying network call. A\nnegative value indicates an error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"address":{"name":"address","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"port":{"name":"port","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"close":{"name":"close","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.close","comment":"<p>Closes the socket and releases the address/port the socket is bound to.\nEach socket created should be closed after use. The socket id is no no\nlonger valid as soon at the function is called. However, the socket is\nguaranteed to be closed only when the callback is invoked.\n<a>chrome/chrome_app.ChromeSocketsUdp.close.socketId</a>: The socket ID.\ncallback: Called when the <code>close</code> operation completes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"create":{"name":"create","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.create","comment":"<p>Creates a UDP socket.\n<a>chrome/chrome_app.ChromeSocketsUdp.create.properties</a>: The socket properties (optional).\ncallback: Called when the socket has been created.</p>\n<p>Returns:\nCallback from the <code>create</code> method.\ncreateInfo: The result of the socket creation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.CreateInfo","inner":[]}]}],"parameters":{"properties":{"name":"properties","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.SocketProperties","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getInfo":{"name":"getInfo","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.getInfo","comment":"<p>Retrieves the state of the given socket.\n<a>chrome/chrome_app.ChromeSocketsUdp.getInfo.socketId</a>: The socket ID.\ncallback: Called when the socket state is available.</p>\n<p>Returns:\nCallback from the <code>getInfo</code> method.\nsocketInfo: Object containing the socket information.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.SocketInfo","inner":[]}]}],"parameters":{"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getJoinedGroups":{"name":"getJoinedGroups","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.getJoinedGroups","comment":"<p>Gets the multicast group addresses the socket is currently joined to.\n<a>chrome/chrome_app.ChromeSocketsUdp.getJoinedGroups.socketId</a>: The socket ID.\ncallback: Called with an array of strings of the result.</p>\n<p>Returns:\nCallback from the <code>getJoinedGroupsCallback</code> method.\ngroups: Array of groups the socket joined.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}]}],"parameters":{"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getSockets":{"name":"getSockets","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.getSockets","comment":"<p>Retrieves the list of currently opened sockets owned by the application.\ncallback: Called when the list of sockets is available.</p>\n<p>Returns:\nCallback from the <code>getSockets</code> method.\nsocketInfos: Array of object containing socket information.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_app.SocketInfo","inner":[]}]}]}],"parameters":{},"annotations":[]},"joinGroup":{"name":"joinGroup","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.joinGroup","comment":"<p>Joins the multicast group and starts to receive packets from that group.\nThe socket must be bound to a local port before calling this method.\n<a>chrome/chrome_app.ChromeSocketsUdp.joinGroup.socketId</a>: The socket ID.\n<a>chrome/chrome_app.ChromeSocketsUdp.joinGroup.address</a>: The group address to join. Domain names are not supported.\ncallback: Called when the <code>joinGroup</code> operation completes.</p>\n<p>Returns:\nCallback from the <code>joinGroup</code> method.\nresult: The result code returned from the underlying network call. A\nnegative value indicates an error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"address":{"name":"address","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"leaveGroup":{"name":"leaveGroup","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.leaveGroup","comment":"<p>Leaves the multicast group previously joined using <code>joinGroup</code>. This is\nonly necessary to call if you plan to keep using the socketafterwards,\nsince it will be done automatically by the OS when the socket is closed.</p>\n<p>Leaving the group will prevent the router from sending multicast datagrams\nto the local host, presuming no other process on the host is still joined\nto the group.</p>\n<p><a>chrome/chrome_app.ChromeSocketsUdp.leaveGroup.socketId</a>: The socket ID.\n<a>chrome/chrome_app.ChromeSocketsUdp.leaveGroup.address</a>: The group address to leave. Domain names are not supported.\ncallback: Called when the <code>leaveGroup</code> operation completes.</p>\n<p>Returns:\nCallback from the <code>leaveGroup</code> method.\nresult: The result code returned from the underlying network call. A\nnegative value indicates an error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"address":{"name":"address","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"send":{"name":"send","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.send","comment":"<p>Sends data on the given UDP socket to the given address and port.\n<a>chrome/chrome_app.ChromeSocketsUdp.send.socketId</a>: The socket ID.\n<a>chrome/chrome_app.ChromeSocketsUdp.send.data</a>: The data to send.\n<a>chrome/chrome_app.ChromeSocketsUdp.send.address</a>: The address of the remote machine.\n<a>chrome/chrome_app.ChromeSocketsUdp.send.port</a>: The port of the remote machine.\ncallback: Called when the <code>send</code> operation completes.</p>\n<p>Returns:\nCallback from the <code>send</code> method.\nsendInfo: Result of the <code>send</code> method.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.SendInfo","inner":[]}]}],"parameters":{"address":{"name":"address","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ArrayBuffer","inner":[]}],"value":null,"annotations":[]},"port":{"name":"port","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setMulticastLoopbackMode":{"name":"setMulticastLoopbackMode","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.setMulticastLoopbackMode","comment":"<p>Sets whether multicast packets sent from the host to the multicast group\nwill be looped back to the host.</p>\n<p>Note: the behavior of <code>setMulticastLoopbackMode</code> is slightly different\nbetween Windows and Unix-like systems. The inconsistency happens only when\nthere is more than one application on the same host joined to the same\nmulticast group while having different settings on multicast loopback mode.\nOn Windows, the applications with loopback off will not RECEIVE the\nloopback packets; while on Unix-like systems, the applications with\nloopback off will not SEND the loopback packets to other applications on\nthe same host. See MSDN: http://goo.gl/6vqbj</p>\n<p>Calling this method does not require multicast permissions.</p>\n<p><a>chrome/chrome_app.ChromeSocketsUdp.setMulticastLoopbackMode.socketId</a>: The socket ID.\n<a>chrome/chrome_app.ChromeSocketsUdp.setMulticastLoopbackMode.enabled</a>: Indicate whether to enable loopback mode.\ncallback: Called when the configuration operation completes.</p>\n<p>Returns:\nCallback from the <code>setMulticastLoopbackMode</code> method.\nresult: The result code returned from the underlying network call. A\nnegative value indicates an error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"enabled":{"name":"enabled","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setMulticastTimeToLive":{"name":"setMulticastTimeToLive","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.setMulticastTimeToLive","comment":"<p>Sets the time-to-live of multicast packets sent to the multicast group.</p>\n<p>Calling this method does not require multicast permissions.</p>\n<p><a>chrome/chrome_app.ChromeSocketsUdp.setMulticastTimeToLive.socketId</a>: The socket ID.\n<a>chrome/chrome_app.ChromeSocketsUdp.setMulticastTimeToLive.ttl</a>: The time-to-live value.\ncallback: Called when the configuration operation completes.</p>\n<p>Returns:\nCallback from the <code>setMulticastTimeToLive</code> method.\nresult: The result code returned from the underlying network call. A\nnegative value indicates an error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"ttl":{"name":"ttl","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"update":{"name":"update","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.update","comment":"<p>Updates the socket properties.\n<a>chrome/chrome_app.ChromeSocketsUdp.update.socketId</a>: The socket ID.\n<a>chrome/chrome_app.ChromeSocketsUdp.update.properties</a>: The properties to update.\ncallback: Called when the properties are updated.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"properties":{"name":"properties","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.SocketProperties","inner":[]}],"value":null,"annotations":[]},"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_app.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_app.ChromeSocketsUdp.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_app.ChromeSocketsUdp.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_app.ChromeSocketsUdp.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.noSuchMethod","comment":"<p><a>chrome/chrome_app.ChromeSocketsUdp.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_app.ChromeSocketsUdp.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_app.ChromeSocketsUdp.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_app.ChromeSocketsUdp.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"chrome/chrome_app.ChromeSocketsUdp.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}