{"name":"ChromeExtension","qualifiedName":"chrome/chrome_ext.ChromeExtension","comment":"","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeApi","implements":[],"subclass":[],"variables":{"_onRequest":{"name":"_onRequest","qualifiedName":"chrome/chrome_ext.ChromeExtension._onRequest","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnRequestEvent","inner":[]}]}],"annotations":[]},"_onRequestExternal":{"name":"_onRequestExternal","qualifiedName":"chrome/chrome_ext.ChromeExtension._onRequestExternal","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnRequestExternalEvent","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_extension":{"name":"_extension","qualifiedName":"chrome/chrome_ext.ChromeExtension._extension","comment":"","commentFrom":"chrome_ext.ChromeExtension._extension","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeExtension.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"inIncognitoContext":{"name":"inIncognitoContext","qualifiedName":"chrome/chrome_ext.ChromeExtension.inIncognitoContext","comment":"<p>True for content scripts running inside incognito tabs, and for extension\npages running inside an incognito process. The latter only applies to\nextensions with 'split' incognito_behavior.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"lastError":{"name":"lastError","qualifiedName":"chrome/chrome_ext.ChromeExtension.lastError","comment":"<p>Set for the lifetime of a callback if an ansychronous extension api has\nresulted in an error. If no error has occured lastError will be\nundefined.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"chrome/chrome_ext.LastErrorExtension","inner":[]}],"parameters":{},"annotations":[]},"onRequest":{"name":"onRequest","qualifiedName":"chrome/chrome_ext.ChromeExtension.onRequest","comment":"<p>Deprecated: please use onMessage.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnRequestEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onRequestExternal":{"name":"onRequestExternal","qualifiedName":"chrome/chrome_ext.ChromeExtension.onRequestExternal","comment":"<p>Deprecated: please use onMessageExternal.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnRequestExternalEvent","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_ext.ChromeExtension.ChromeExtension-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_ext.ChromeExtension._throwNotAvailable","comment":"","commentFrom":"chrome_ext.ChromeExtension._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"getBackgroundPage":{"name":"getBackgroundPage","qualifiedName":"chrome/chrome_ext.ChromeExtension.getBackgroundPage","comment":"<p>Returns the JavaScript 'window' object for the background page running\ninside the current extension. Returns null if the extension has no\nbackground page.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"chrome/chrome_ext.Window","inner":[]}],"parameters":{},"annotations":[]},"getExtensionTabs":{"name":"getExtensionTabs","qualifiedName":"chrome/chrome_ext.ChromeExtension.getExtensionTabs","comment":"<p>Deprecated. Please use getViews({type: 'TAB'}). Returns an array of the\nJavaScript 'window' objects for each of the tabs running inside the current\nextension. If windowId is specified, returns only the 'window' objects of\ntabs attached to the specified window.</p>\n<p>Returns:\nArray of global window objects</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.Window","inner":[]}]}],"parameters":{"windowId":{"name":"windowId","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getURL":{"name":"getURL","qualifiedName":"chrome/chrome_ext.ChromeExtension.getURL","comment":"<p>Converts a relative path within an extension install directory to a\nfully-qualified URL.</p>\n<p><a>chrome/chrome_ext.ChromeExtension.getURL.path</a> A path to a resource within an extension expressed relative to its\ninstall directory.</p>\n<p>Returns:\nThe fully-qualified URL to the resource.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getViews":{"name":"getViews","qualifiedName":"chrome/chrome_ext.ChromeExtension.getViews","comment":"<p>Returns an array of the JavaScript 'window' objects for each of the pages\nrunning inside the current extension.</p>\n<p>Returns:\nArray of global objects</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.Window","inner":[]}]}],"parameters":{"fetchProperties":{"name":"fetchProperties","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.ExtensionGetViewsParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isAllowedFileSchemeAccess":{"name":"isAllowedFileSchemeAccess","qualifiedName":"chrome/chrome_ext.ChromeExtension.isAllowedFileSchemeAccess","comment":"<p>Retrieves the state of the extension's access to the 'file://' scheme (as\ndetermined by the user-controlled 'Allow access to File URLs' checkbox.</p>\n<p>Returns:\nTrue if the extension can access the 'file://' scheme, false otherwise.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{},"annotations":[]},"isAllowedIncognitoAccess":{"name":"isAllowedIncognitoAccess","qualifiedName":"chrome/chrome_ext.ChromeExtension.isAllowedIncognitoAccess","comment":"<p>Retrieves the state of the extension's access to Incognito-mode (as\ndetermined by the user-controlled 'Allowed in Incognito' checkbox.</p>\n<p>Returns:\nTrue if the extension has access to Incognito mode, false otherwise.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{},"annotations":[]},"sendRequest":{"name":"sendRequest","qualifiedName":"chrome/chrome_ext.ChromeExtension.sendRequest","comment":"<p>Deprecated: Please use sendMessage.</p>\n<p><a>chrome/chrome_ext.ChromeExtension.sendRequest.extensionId</a> The extension ID of the extension you want to connect to. If\nomitted, default is your own extension.</p>\n<p>Returns:\nThe JSON response object sent by the handler of the request. If an error\noccurs while connecting to the extension, the callback will be called with\nno arguments and runtime.lastError will be set to the error message.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"extensionId":{"name":"extensionId","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setUpdateUrlData":{"name":"setUpdateUrlData","qualifiedName":"chrome/chrome_ext.ChromeExtension.setUpdateUrlData","comment":"<p>Sets the value of the ap CGI parameter used in the extension's update URL.\nThis value is ignored for extensions that are hosted in the Chrome\nExtension Gallery.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeExtension.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_ext.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.ChromeExtension.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.ChromeExtension.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.ChromeExtension.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.ChromeExtension.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.ChromeExtension.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.ChromeExtension.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.ChromeExtension.noSuchMethod","comment":"<p><a>chrome/chrome_ext.ChromeExtension.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.ChromeExtension.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.ChromeExtension.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.ChromeExtension.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.ChromeExtension.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}