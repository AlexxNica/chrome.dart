{"name":"ChromeWebRequest","qualifiedName":"chrome/chrome_ext.ChromeWebRequest","comment":"","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeApi","implements":[],"subclass":[],"variables":{"_onAuthRequired":{"name":"_onAuthRequired","qualifiedName":"chrome/chrome_ext.ChromeWebRequest._onAuthRequired","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnAuthRequiredEvent","inner":[]}]}],"annotations":[]},"_onBeforeRedirect":{"name":"_onBeforeRedirect","qualifiedName":"chrome/chrome_ext.ChromeWebRequest._onBeforeRedirect","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onBeforeRequest":{"name":"_onBeforeRequest","qualifiedName":"chrome/chrome_ext.ChromeWebRequest._onBeforeRequest","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onBeforeSendHeaders":{"name":"_onBeforeSendHeaders","qualifiedName":"chrome/chrome_ext.ChromeWebRequest._onBeforeSendHeaders","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onCompleted":{"name":"_onCompleted","qualifiedName":"chrome/chrome_ext.ChromeWebRequest._onCompleted","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onErrorOccurred":{"name":"_onErrorOccurred","qualifiedName":"chrome/chrome_ext.ChromeWebRequest._onErrorOccurred","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onHeadersReceived":{"name":"_onHeadersReceived","qualifiedName":"chrome/chrome_ext.ChromeWebRequest._onHeadersReceived","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onResponseStarted":{"name":"_onResponseStarted","qualifiedName":"chrome/chrome_ext.ChromeWebRequest._onResponseStarted","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onSendHeaders":{"name":"_onSendHeaders","qualifiedName":"chrome/chrome_ext.ChromeWebRequest._onSendHeaders","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"MAX_HANDLER_BEHAVIOR_CHANGED_CALLS_PER_10_MINUTES":{"name":"MAX_HANDLER_BEHAVIOR_CHANGED_CALLS_PER_10_MINUTES","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.MAX_HANDLER_BEHAVIOR_CHANGED_CALLS_PER_10_MINUTES","comment":"<p>The maximum number of times that <code>handlerBehaviorChanged</code> can be called per\n10 minute sustained interval. <code>handlerBehaviorChanged</code> is an expensive\nfunction call that shouldn't be called often.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"_webRequest":{"name":"_webRequest","qualifiedName":"chrome/chrome_ext.ChromeWebRequest._webRequest","comment":"","commentFrom":"chrome_ext.ChromeWebRequest._webRequest","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"onAuthRequired":{"name":"onAuthRequired","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.onAuthRequired","comment":"<p>Fired when an authentication failure is received. The listener has three\noptions: it can provide authentication credentials, it can cancel the\nrequest and display the error page, or it can take no action on the\nchallenge. If bad user credentials are provided, this may be called\nmultiple times for the same request.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnAuthRequiredEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onBeforeRedirect":{"name":"onBeforeRedirect","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.onBeforeRedirect","comment":"<p>Fired when a server-initiated redirect is about to occur.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onBeforeRequest":{"name":"onBeforeRequest","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.onBeforeRequest","comment":"<p>Fired when a request is about to occur.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onBeforeSendHeaders":{"name":"onBeforeSendHeaders","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.onBeforeSendHeaders","comment":"<p>Fired before sending an HTTP request, once the request headers are\navailable. This may occur after a TCP connection is made to the server, but\nbefore any HTTP data is sent.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onCompleted":{"name":"onCompleted","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.onCompleted","comment":"<p>Fired when a request is completed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onErrorOccurred":{"name":"onErrorOccurred","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.onErrorOccurred","comment":"<p>Fired when an error occurs.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onHeadersReceived":{"name":"onHeadersReceived","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.onHeadersReceived","comment":"<p>Fired when HTTP response headers of a request have been received.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onResponseStarted":{"name":"onResponseStarted","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.onResponseStarted","comment":"<p>Fired when the first byte of the response body is received. For HTTP\nrequests, this means that the status line and response headers are\navailable.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onSendHeaders":{"name":"onSendHeaders","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.onSendHeaders","comment":"<p>Fired just before a request is going to be sent to the server\n(modifications of previous onBeforeSendHeaders callbacks are visible by the\ntime onSendHeaders is fired).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.ChromeWebRequest-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_ext.ChromeWebRequest._throwNotAvailable","comment":"","commentFrom":"chrome_ext.ChromeWebRequest._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"handlerBehaviorChanged":{"name":"handlerBehaviorChanged","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.handlerBehaviorChanged","comment":"<p>Needs to be called when the behavior of the webRequest handlers has changed\nto prevent incorrect handling due to caching. This function call is\nexpensive. Don't call it often.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_ext.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.ChromeWebRequest.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.ChromeWebRequest.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.ChromeWebRequest.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.noSuchMethod","comment":"<p><a>chrome/chrome_ext.ChromeWebRequest.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.ChromeWebRequest.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.ChromeWebRequest.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.ChromeWebRequest.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.ChromeWebRequest.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}