{"name":"TtsSpeakParams","qualifiedName":"chrome/chrome_ext.TtsSpeakParams","comment":"","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeObject","implements":[],"subclass":[],"variables":{},"inheritedVariables":{"jsProxy":{"name":"jsProxy","qualifiedName":"chrome/chrome_app.ChromeObject.jsProxy","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"methods":{"setters":{"desiredEventTypes=":{"name":"desiredEventTypes=","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.desiredEventTypes=","comment":"","commentFrom":"chrome_app.TtsSpeakParams.desiredEventTypes=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"enqueue=":{"name":"enqueue=","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.enqueue=","comment":"","commentFrom":"chrome_app.TtsSpeakParams.enqueue=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"extensionId=":{"name":"extensionId=","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.extensionId=","comment":"","commentFrom":"chrome_app.TtsSpeakParams.extensionId=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"gender=":{"name":"gender=","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.gender=","comment":"","commentFrom":"chrome_app.TtsSpeakParams.gender=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"lang=":{"name":"lang=","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.lang=","comment":"","commentFrom":"chrome_app.TtsSpeakParams.lang=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"onEvent=":{"name":"onEvent=","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.onEvent=","comment":"","commentFrom":"chrome_app.TtsSpeakParams.onEvent=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"pitch=":{"name":"pitch=","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.pitch=","comment":"","commentFrom":"chrome_app.TtsSpeakParams.pitch=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"rate=":{"name":"rate=","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.rate=","comment":"","commentFrom":"chrome_app.TtsSpeakParams.rate=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"requiredEventTypes=":{"name":"requiredEventTypes=","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.requiredEventTypes=","comment":"","commentFrom":"chrome_app.TtsSpeakParams.requiredEventTypes=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"voiceName=":{"name":"voiceName=","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.voiceName=","comment":"","commentFrom":"chrome_app.TtsSpeakParams.voiceName=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"volume=":{"name":"volume=","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.volume=","comment":"","commentFrom":"chrome_app.TtsSpeakParams.volume=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"desiredEventTypes":{"name":"desiredEventTypes","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.desiredEventTypes","comment":"<p>The TTS event types that you are interested in listening to. If missing,\nall event types may be sent.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"enqueue":{"name":"enqueue","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.enqueue","comment":"<p>If true, enqueues this utterance if TTS is already in progress. If false\n(the default), interrupts any current speech and flushes the speech queue\nbefore speaking this new utterance.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"extensionId":{"name":"extensionId","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.extensionId","comment":"<p>The extension ID of the speech engine to use, if known.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"gender":{"name":"gender","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.gender","comment":"<p>Gender of voice for synthesized speech.\nenum of <code>male</code>, <code>female</code></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"lang":{"name":"lang","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.lang","comment":"<p>The language to be used for synthesis, in the form <em>language</em>-<em>region</em>.\nExamples: 'en', 'en-US', 'en-GB', 'zh-CN'.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"onEvent":{"name":"onEvent","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.onEvent","comment":"<p>This function is called with events that occur in the process of speaking\nthe utterance.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"pitch":{"name":"pitch","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.pitch","comment":"<p>Speaking pitch between 0 and 2 inclusive, with 0 being lowest and 2 being\nhighest. 1.0 corresponds to a voice's default pitch.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"rate":{"name":"rate","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.rate","comment":"<p>Speaking rate relative to the default rate for this voice. 1.0 is the\ndefault rate, normally around 180 to 220 words per minute. 2.0 is twice as\nfast, and 0.5 is half as fast. Values below 0.1 or above 10.0 are strictly\ndisallowed, but many voices will constrain the minimum and maximum rates\nfurther-for example a particular voice may not actually speak faster than 3\ntimes normal even if you specify a value larger than 3.0.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"requiredEventTypes":{"name":"requiredEventTypes","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.requiredEventTypes","comment":"<p>The TTS event types the voice must support.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"voiceName":{"name":"voiceName","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.voiceName","comment":"<p>The name of the voice to use for synthesis. If empty, uses any available\nvoice.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"volume":{"name":"volume","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.volume","comment":"<p>Speaking volume between 0 and 1 inclusive, with 0 being lowest and 1 being\nhighest, with a default of 1.0.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.TtsSpeakParams-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"desiredEventTypes":{"name":"desiredEventTypes","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"enqueue":{"name":"enqueue","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"extensionId":{"name":"extensionId","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"gender":{"name":"gender","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"lang":{"name":"lang","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"onEvent":{"name":"onEvent","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"pitch":{"name":"pitch","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"rate":{"name":"rate","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"requiredEventTypes":{"name":"requiredEventTypes","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"voiceName":{"name":"voiceName","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"volume":{"name":"volume","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fromProxy":{"name":"fromProxy","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.TtsSpeakParams-fromProxy","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"jsProxy":{"name":"jsProxy","optional":false,"named":false,"default":false,"type":[{"outer":"dart-js.JsObject","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.TtsSpeakParams.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.TtsSpeakParams.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.TtsSpeakParams.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.noSuchMethod","comment":"<p><a>chrome/chrome_ext.TtsSpeakParams.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.TtsSpeakParams.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.TtsSpeakParams.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.TtsSpeakParams.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toJs":{"name":"toJs","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.toJs","comment":"","commentFrom":"","inheritedFrom":"chrome_ext.ChromeObject.toJs","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.TtsSpeakParams.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"chrome_ext.ChromeObject.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}