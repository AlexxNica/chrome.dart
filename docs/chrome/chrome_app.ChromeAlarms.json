{"name":"ChromeAlarms","qualifiedName":"chrome/chrome_app.ChromeAlarms","comment":"","isAbstract":false,"superclass":"chrome/chrome_app.ChromeApi","implements":[],"subclass":[],"variables":{"_onAlarm":{"name":"_onAlarm","qualifiedName":"chrome/chrome_app.ChromeAlarms._onAlarm","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_app.Alarm","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_alarms":{"name":"_alarms","qualifiedName":"chrome/chrome_app.ChromeAlarms._alarms","comment":"","commentFrom":"chrome_app.ChromeAlarms._alarms","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeAlarms.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"onAlarm":{"name":"onAlarm","qualifiedName":"chrome/chrome_app.ChromeAlarms.onAlarm","comment":"","commentFrom":"chrome_app.ChromeAlarms.onAlarm","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_app.Alarm","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_app.ChromeAlarms.ChromeAlarms-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_app.ChromeAlarms._throwNotAvailable","comment":"","commentFrom":"chrome_app.ChromeAlarms._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"clear":{"name":"clear","qualifiedName":"chrome/chrome_app.ChromeAlarms.clear","comment":"<p>Clears the alarm with the given name.\n<a>chrome/chrome_app.ChromeAlarms.clear.name</a>: The name of the alarm to clear. Defaults to the empty string.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"name":{"name":"name","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"clearAll":{"name":"clearAll","qualifiedName":"chrome/chrome_app.ChromeAlarms.clearAll","comment":"<p>Clears all alarms.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"create":{"name":"create","qualifiedName":"chrome/chrome_app.ChromeAlarms.create","comment":"<p>Creates an alarm. Near the time(s) specified by <a>chrome/chrome_app.ChromeAlarms.create.alarmInfo</a>, the <code>onAlarm</code>\nevent is fired. If there is another alarm with the same name (or no name if\nnone is specified), it will be cancelled and replaced by this alarm.</p>\n<p>In order to reduce the load on the user's machine, Chrome limits alarms to\nat most once every 1 minute but may delay them an arbitrary amount more.\nThat is, setting <code>delayInMinutes</code> or <code>periodInMinutes</code> to less than <code>1</code>\nwill not be honored and will cause a warning. <code>when</code> can be set to less\nthan 1 minute after \"now\" without warning but won't actually cause the\nalarm to fire for at least 1 minute.</p>\n<p>To help you debug your app or extension, when you've loaded it unpacked,\nthere's no limit to how often the alarm can fire.</p>\n<p><a>chrome/chrome_app.ChromeAlarms.create.name</a>: Optional name to identify this alarm. Defaults to the empty string.</p>\n<p><a>chrome/chrome_app.ChromeAlarms.create.alarmInfo</a>: Describes when the alarm should fire. The initial time must be\nspecified by either when or delayInMinutes (but not both). If\nperiodInMinutes is set, the alarm will repeat every periodInMinutes\nminutes after the initial event. If neither when or delayInMinutes is\nset for a repeating alarm, periodInMinutes is used as the default for\ndelayInMinutes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"alarmInfo":{"name":"alarmInfo","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.AlarmCreateInfo","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"get":{"name":"get","qualifiedName":"chrome/chrome_app.ChromeAlarms.get","comment":"<p>Retrieves details about the specified alarm.\n<a>chrome/chrome_app.ChromeAlarms.get.name</a>: The name of the alarm to get. Defaults to the empty string.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.Alarm","inner":[]}]}],"parameters":{"name":{"name":"name","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getAll":{"name":"getAll","qualifiedName":"chrome/chrome_app.ChromeAlarms.getAll","comment":"<p>Gets an array of all the alarms.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_app.Alarm","inner":[]}]}]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeAlarms.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_app.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_app.ChromeAlarms.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_app.ChromeAlarms.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_app.ChromeAlarms.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_app.ChromeAlarms.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_app.ChromeAlarms.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_app.ChromeAlarms.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_app.ChromeAlarms.noSuchMethod","comment":"<p><a>chrome/chrome_app.ChromeAlarms.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_app.ChromeAlarms.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_app.ChromeAlarms.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_app.ChromeAlarms.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"chrome/chrome_app.ChromeAlarms.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}