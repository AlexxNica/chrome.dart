{"name":"ChromeSocketsTcp","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp","comment":"<p>Use the <code>chrome.sockets.tcp</code> API to send and receive data over the network\nusing TCP connections. This API supersedes the TCP functionality previously\nfound in the <code>chrome.socket</code> API. Note that the socket ids created from this\nnamespace are not compatible with ids created in other namespaces.</p>","isAbstract":false,"superclass":"chrome/chrome_app.ChromeApi","implements":[],"subclass":[],"variables":{"_onReceive":{"name":"_onReceive","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp._onReceive","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_app.ReceiveInfo","inner":[]}]}],"annotations":[]},"_onReceiveError":{"name":"_onReceiveError","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp._onReceiveError","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_app.ReceiveErrorInfo","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_sockets_tcp":{"name":"_sockets_tcp","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp._sockets_tcp","comment":"","commentFrom":"chrome_app.ChromeSocketsTcp._sockets_tcp","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"onReceive":{"name":"onReceive","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.onReceive","comment":"","commentFrom":"chrome_app.ChromeSocketsTcp.onReceive","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_app.ReceiveInfo","inner":[]}]}],"parameters":{},"annotations":[]},"onReceiveError":{"name":"onReceiveError","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.onReceiveError","comment":"","commentFrom":"chrome_app.ChromeSocketsTcp.onReceiveError","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_app.ReceiveErrorInfo","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.ChromeSocketsTcp-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp._throwNotAvailable","comment":"","commentFrom":"chrome_app.ChromeSocketsTcp._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"close":{"name":"close","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.close","comment":"<p>Closes the socket and releases the address/port the socket is bound to.\nEach socket created should be closed after use. The socket id is no no\nlonger valid as soon at the function is called. However, the socket is\nguaranteed to be closed only when the callback is invoked.\n<a>chrome/chrome_app.ChromeSocketsTcp.close.socketId</a>: The socket identifier.\ncallback: Called when the <code>close</code> operation completes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"connect":{"name":"connect","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.connect","comment":"<p>Connects the socket to a remote machine. When the <code>connect</code> operation\ncompletes successfully, <code>onReceive</code> events are raised when data is received\nfrom the peer. If a network error occurs while the runtime is receiving\npackets, a <code>onReceiveError</code> event is raised, at which point no more\n<code>onReceive</code> event will be raised for this socket until the <code>resume</code> method\nis called.\n<a>chrome/chrome_app.ChromeSocketsTcp.connect.socketId</a>: The socket identifier.\n<a>chrome/chrome_app.ChromeSocketsTcp.connect.peerAddress</a>: The address of the remote machine. DNS name, IPv4 and IPv6\nformats are supported.\n<a>chrome/chrome_app.ChromeSocketsTcp.connect.peerPort</a>: The port of the remote machine.\ncallback: Called when the connect attempt is complete.</p>\n<p>Returns:\nCallback from the <code>connect</code> method.\nresult: The result code returned from the underlying network call. A\nnegative value indicates an error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"peerAddress":{"name":"peerAddress","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"peerPort":{"name":"peerPort","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"create":{"name":"create","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.create","comment":"<p>Creates a TCP socket.\n<a>chrome/chrome_app.ChromeSocketsTcp.create.properties</a>: The socket properties (optional).\ncallback: Called when the socket has been created.</p>\n<p>Returns:\nCallback from the <code>create</code> method.\ncreateInfo: The result of the socket creation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.CreateInfo","inner":[]}]}],"parameters":{"properties":{"name":"properties","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.SocketProperties","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"disconnect":{"name":"disconnect","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.disconnect","comment":"<p>Disconnects the socket.\n<a>chrome/chrome_app.ChromeSocketsTcp.disconnect.socketId</a>: The socket identifier.\ncallback: Called when the disconnect attempt is complete.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getInfo":{"name":"getInfo","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.getInfo","comment":"<p>Retrieves the state of the given socket.\n<a>chrome/chrome_app.ChromeSocketsTcp.getInfo.socketId</a>: The socket identifier.\ncallback: Called when the socket state is available.</p>\n<p>Returns:\nCallback from the <code>getInfo</code> method.\nsocketInfo: Object containing the socket information.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.SocketInfo","inner":[]}]}],"parameters":{"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getSockets":{"name":"getSockets","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.getSockets","comment":"<p>Retrieves the list of currently opened sockets owned by the application.\ncallback: Called when the list of sockets is available.</p>\n<p>Returns:\nCallback from the <code>getSockets</code> method.\nsocketInfos: Array of object containing socket information.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_app.SocketInfo","inner":[]}]}]}],"parameters":{},"annotations":[]},"send":{"name":"send","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.send","comment":"<p>Sends data on the given TCP socket.\n<a>chrome/chrome_app.ChromeSocketsTcp.send.socketId</a>: The socket identifier.\n<a>chrome/chrome_app.ChromeSocketsTcp.send.data</a>: The data to send.\ncallback: Called when the <code>send</code> operation completes.</p>\n<p>Returns:\nCallback from the <code>send</code> method.\nsendInfo: Result of the <code>send</code> method.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.SendInfo","inner":[]}]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ArrayBuffer","inner":[]}],"value":null,"annotations":[]},"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setKeepAlive":{"name":"setKeepAlive","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.setKeepAlive","comment":"<p>Enables or disables the keep-alive functionality for a TCP connection.\n<a>chrome/chrome_app.ChromeSocketsTcp.setKeepAlive.socketId</a>: The socket identifier.\n<a>chrome/chrome_app.ChromeSocketsTcp.setKeepAlive.enable</a>: If true, enable keep-alive functionality.\n<a>chrome/chrome_app.ChromeSocketsTcp.setKeepAlive.delay</a>: Set the delay seconds between the last data packet received and\nthe first keepalive probe. Default is 0.\ncallback: Called when the setKeepAlive attempt is complete.</p>\n<p>Returns:\nCallback from the <code>setKeepAliveCallback</code> method.\nresult: The result code returned from the underlying network call. A\nnegative value indicates an error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"delay":{"name":"delay","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"enable":{"name":"enable","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setNoDelay":{"name":"setNoDelay","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.setNoDelay","comment":"<p>Sets or clears <code>TCP_NODELAY</code> for a TCP connection. Nagle's algorithm will\nbe disabled when <code>TCP_NODELAY</code> is set.\n<a>chrome/chrome_app.ChromeSocketsTcp.setNoDelay.socketId</a>: The socket identifier.\n<a>chrome/chrome_app.ChromeSocketsTcp.setNoDelay.noDelay</a>: If true, disables Nagle's algorithm.\ncallback: Called when the setNoDelay attempt is complete.</p>\n<p>Returns:\nCallback from the <code>setNodeDelay</code> method.\nresult: The result code returned from the underlying network call. A\nnegative value indicates an error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"noDelay":{"name":"noDelay","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setPaused":{"name":"setPaused","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.setPaused","comment":"<p>Enables or disables the application from receiving messages from its peer.\nThe default value is \"false\". Pausing a socket is typically used by an\napplication to throttle data sent by its peer. When a socket is paused, no\n<code>onReceive</code> event is raised. When a socket is connected and un-paused,\n<code>onReceive</code> events are raised again when messages are received.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"paused":{"name":"paused","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"update":{"name":"update","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.update","comment":"<p>Updates the socket properties.\n<a>chrome/chrome_app.ChromeSocketsTcp.update.socketId</a>: The socket identifier.\n<a>chrome/chrome_app.ChromeSocketsTcp.update.properties</a>: The properties to update.\ncallback: Called when the properties are updated.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"properties":{"name":"properties","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.SocketProperties","inner":[]}],"value":null,"annotations":[]},"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_app.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_app.ChromeSocketsTcp.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_app.ChromeSocketsTcp.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_app.ChromeSocketsTcp.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.noSuchMethod","comment":"<p><a>chrome/chrome_app.ChromeSocketsTcp.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_app.ChromeSocketsTcp.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_app.ChromeSocketsTcp.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_app.ChromeSocketsTcp.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"chrome/chrome_app.ChromeSocketsTcp.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}