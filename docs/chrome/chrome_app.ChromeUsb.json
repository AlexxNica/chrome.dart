{"name":"ChromeUsb","qualifiedName":"chrome/chrome_app.ChromeUsb","comment":"","isAbstract":false,"superclass":"chrome/chrome_app.ChromeApi","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_usb":{"name":"_usb","qualifiedName":"chrome/chrome_app.ChromeUsb._usb","comment":"","commentFrom":"chrome_app.ChromeUsb._usb","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeUsb.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_app.ChromeUsb.ChromeUsb-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"getDevices":{"name":"getDevices","qualifiedName":"chrome/chrome_app.ChromeUsb.getDevices","comment":"<p>Lists USB devices specified by vendorId/productId/interfaceId tuple.\n<a>chrome/chrome_app.ChromeUsb.getDevices.options</a>: The properties to search for on target devices.\ncallback: Invoked with a list of <a>chrome/chrome_app.Device</a>s on complete.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_app.Device","inner":[]}]}]}],"parameters":{"options":{"name":"options","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.EnumerateDevicesOptions","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"requestAccess":{"name":"requestAccess","qualifiedName":"chrome/chrome_app.ChromeUsb.requestAccess","comment":"<p>This method is ChromeOS specific. Calling this method on other platforms\nwill fail. Requests access from the permission broker to an OS claimed\ndevice if the given interface on the device is not claimed.</p>\n<p><a>chrome/chrome_app.ChromeUsb.requestAccess.device</a>: The device to request access to.\n<a>chrome/chrome_app.ChromeUsb.requestAccess.interfaceId</a>:</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"device":{"name":"device","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.Device","inner":[]}],"value":"null","annotations":[]},"interfaceId":{"name":"interfaceId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"openDevice":{"name":"openDevice","qualifiedName":"chrome/chrome_app.ChromeUsb.openDevice","comment":"<p>Opens a USB device returned by <a>chrome/chrome_app.ChromeUsb.getDevices</a>.\n<a>chrome/chrome_app.ChromeUsb.openDevice.device</a>: The device to open.\ncallback: Invoked with the created ConnectionHandle on complete.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.ConnectionHandle","inner":[]}]}],"parameters":{"device":{"name":"device","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.Device","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"findDevices":{"name":"findDevices","qualifiedName":"chrome/chrome_app.ChromeUsb.findDevices","comment":"<p>Finds USB devices specified by the vendorId/productId/interfaceId tuple\nand, if permissions allow, opens them for use.</p>\n<p>On Chrome OS, you can specify the interfaceId. In that case the method will\nrequest access from permission broker in the same way as in\nrequestUsbAcess.</p>\n<p>If the access request is rejected, or the device is failed to be opened,\nits connection handle will not be created or returned.</p>\n<p>Calling this method is equivalent to calling <a>chrome/chrome_app.ChromeUsb.getDevices</a> followed by a\nseries of <a>chrome/chrome_app.ChromeUsb.requestAccess</a> (if it is on ChromeOs) and <a>chrome/chrome_app.ChromeUsb.openDevice</a> calls,\nand returning all the successfully opened connection handles.</p>\n<p><a>chrome/chrome_app.ChromeUsb.findDevices.options</a>: The properties to search for on target devices.\ncallback: Invoked with the opened ConnectionHandle on complete.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_app.ConnectionHandle","inner":[]}]}]}],"parameters":{"options":{"name":"options","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.EnumerateDevicesAndRequestAccessOptions","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"closeDevice":{"name":"closeDevice","qualifiedName":"chrome/chrome_app.ChromeUsb.closeDevice","comment":"<p>Closes a connection handle. Invoking operations on a device after it has\nbeen closed is a safe operation, but causes no action to be taken.\n<a>chrome/chrome_app.ChromeUsb.closeDevice.handle</a>: The connection handle to close.\ncallback: The callback to invoke once the device is closed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"handle":{"name":"handle","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ConnectionHandle","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"listInterfaces":{"name":"listInterfaces","qualifiedName":"chrome/chrome_app.ChromeUsb.listInterfaces","comment":"<p>Lists all the interfaces on the USB device.\n<a>chrome/chrome_app.ChromeUsb.listInterfaces.handle</a>: The device from which the interfaces should be listed.\ncallback: The callback to invoke when the interfaces are enumerated.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_app.InterfaceDescriptor","inner":[]}]}]}],"parameters":{"handle":{"name":"handle","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ConnectionHandle","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"claimInterface":{"name":"claimInterface","qualifiedName":"chrome/chrome_app.ChromeUsb.claimInterface","comment":"<p>Claims an interface on the specified USB device. Before you can transfer\ndata with endpoints, you must claim their parent interfaces. Only one\nconnection handle on the same host can claim each interface. If the\ninterface is already claimed, this call will fail.</p>\n<p>You shall call releaseInterface when the interface is not needed anymore.</p>\n<p><a>chrome/chrome_app.ChromeUsb.claimInterface.handle</a>: The device on which the interface is to be claimed.\ninterface: The interface number to be claimed.\ncallback: The callback to invoke once the interface is claimed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"handle":{"name":"handle","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ConnectionHandle","inner":[]}],"value":"null","annotations":[]},"interfaceNumber":{"name":"interfaceNumber","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"releaseInterface":{"name":"releaseInterface","qualifiedName":"chrome/chrome_app.ChromeUsb.releaseInterface","comment":"<p>Releases a claim to an interface on the provided device.\n<a>chrome/chrome_app.ChromeUsb.releaseInterface.handle</a>: The device on which the interface is to be released.\ninterface: The interface number to be released.\ncallback: The callback to invoke once the interface is released.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"handle":{"name":"handle","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ConnectionHandle","inner":[]}],"value":"null","annotations":[]},"interfaceNumber":{"name":"interfaceNumber","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setInterfaceAlternateSetting":{"name":"setInterfaceAlternateSetting","qualifiedName":"chrome/chrome_app.ChromeUsb.setInterfaceAlternateSetting","comment":"<p>Selects an alternate setting on a previously claimed interface on a device.\n<a>chrome/chrome_app.ChromeUsb.setInterfaceAlternateSetting.handle</a>: The device on which the interface settings are to be set.\ninterface: The interface number to be set.\n<a>chrome/chrome_app.ChromeUsb.setInterfaceAlternateSetting.alternateSetting</a>: The alternate setting to set.\ncallback: The callback to invoke once the interface setting is set.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"handle":{"name":"handle","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ConnectionHandle","inner":[]}],"value":"null","annotations":[]},"interfaceNumber":{"name":"interfaceNumber","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"alternateSetting":{"name":"alternateSetting","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"controlTransfer":{"name":"controlTransfer","qualifiedName":"chrome/chrome_app.ChromeUsb.controlTransfer","comment":"<p>Performs a control transfer on the specified device. See the\nControlTransferInfo structure for the parameters required to make a\ntransfer.</p>\n<p>Conceptually control transfer talks to the device itself. You do not need\nto claim interface 0 to perform a control transfer.</p>\n<p><a>chrome/chrome_app.ChromeUsb.controlTransfer.handle</a>: A connection handle to make the transfer on.\n<a>chrome/chrome_app.ChromeUsb.controlTransfer.transferInfo</a>: The parameters to the transfer. See ControlTransferInfo.\ncallback: Invoked once the transfer has completed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.TransferResultInfo","inner":[]}]}],"parameters":{"handle":{"name":"handle","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ConnectionHandle","inner":[]}],"value":"null","annotations":[]},"transferInfo":{"name":"transferInfo","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ControlTransferInfo","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"bulkTransfer":{"name":"bulkTransfer","qualifiedName":"chrome/chrome_app.ChromeUsb.bulkTransfer","comment":"<p>Performs a bulk transfer on the specified device.\n<a>chrome/chrome_app.ChromeUsb.bulkTransfer.handle</a>: A connection handle to make the transfer on.\n<a>chrome/chrome_app.ChromeUsb.bulkTransfer.transferInfo</a>: The parameters to the transfer. See GenericTransferInfo.\ncallback: Invoked once the transfer has completed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.TransferResultInfo","inner":[]}]}],"parameters":{"handle":{"name":"handle","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ConnectionHandle","inner":[]}],"value":"null","annotations":[]},"transferInfo":{"name":"transferInfo","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.GenericTransferInfo","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"interruptTransfer":{"name":"interruptTransfer","qualifiedName":"chrome/chrome_app.ChromeUsb.interruptTransfer","comment":"<p>Performs an interrupt transfer on the specified device.\n<a>chrome/chrome_app.ChromeUsb.interruptTransfer.handle</a>: A connection handle to make the transfer on.\n<a>chrome/chrome_app.ChromeUsb.interruptTransfer.transferInfo</a>: The parameters to the transfer. See GenericTransferInfo.\ncallback: Invoked once the transfer has completed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.TransferResultInfo","inner":[]}]}],"parameters":{"handle":{"name":"handle","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ConnectionHandle","inner":[]}],"value":"null","annotations":[]},"transferInfo":{"name":"transferInfo","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.GenericTransferInfo","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"isochronousTransfer":{"name":"isochronousTransfer","qualifiedName":"chrome/chrome_app.ChromeUsb.isochronousTransfer","comment":"<p>Performs an isochronous transfer on the specific device.\n<a>chrome/chrome_app.ChromeUsb.isochronousTransfer.handle</a>: A connection handle to make the transfer on.\n<a>chrome/chrome_app.ChromeUsb.isochronousTransfer.transferInfo</a>: The parameters to the transfer. See\nIsochronousTransferInfo.\ncallback: Invoked once the transfer has been completed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.TransferResultInfo","inner":[]}]}],"parameters":{"handle":{"name":"handle","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ConnectionHandle","inner":[]}],"value":"null","annotations":[]},"transferInfo":{"name":"transferInfo","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.IsochronousTransferInfo","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"resetDevice":{"name":"resetDevice","qualifiedName":"chrome/chrome_app.ChromeUsb.resetDevice","comment":"<p>Tries to reset the USB device and restores it to the previous status. If\nthe reset fails, the given connection handle will be closed and the USB\ndevice will appear to be disconnected then reconnected. In that case you\nmust call <a>chrome/chrome_app.ChromeUsb.getDevices</a> or <a>chrome/chrome_app.ChromeUsb.findDevices</a> again to acquire the device.</p>\n<p><a>chrome/chrome_app.ChromeUsb.resetDevice.handle</a>: A connection handle to reset.\ncallback: Invoked once the device is reset with a boolean indicating\nwhether the reset is completed successfully.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"handle":{"name":"handle","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ConnectionHandle","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_app.ChromeUsb._throwNotAvailable","comment":"","commentFrom":"chrome_app.ChromeUsb._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_app.ChromeUsb.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_app.ChromeUsb.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_app.ChromeUsb.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeUsb.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_app.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_app.ChromeUsb.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_app.ChromeUsb.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_app.ChromeUsb.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"chrome/chrome_app.ChromeUsb.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_app.ChromeUsb.noSuchMethod","comment":"<p><a>chrome/chrome_app.ChromeUsb.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_app.ChromeUsb.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_app.ChromeUsb.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_app.ChromeUsb.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}