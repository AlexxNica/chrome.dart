{"name":"ChromeSocketsTcpServer","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer","comment":"<p>Use the <code>chrome.sockets.tcpServer</code> API to create server applications using\nTCP connections. This API supersedes the TCP functionality previously found\nin the <code>chrome.socket</code> API. Note that the socket ids created from this\nnamespace are not compatible with ids created in other namespaces.</p>","isAbstract":false,"superclass":"chrome/chrome_app.ChromeApi","implements":[],"subclass":[],"variables":{"_onAccept":{"name":"_onAccept","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer._onAccept","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_app.AcceptInfo","inner":[]}]}],"annotations":[]},"_onAcceptError":{"name":"_onAcceptError","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer._onAcceptError","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_app.AcceptErrorInfo","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_sockets_tcpServer":{"name":"_sockets_tcpServer","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer._sockets_tcpServer","comment":"","commentFrom":"chrome_app.ChromeSocketsTcpServer._sockets_tcpServer","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"onAccept":{"name":"onAccept","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.onAccept","comment":"","commentFrom":"chrome_app.ChromeSocketsTcpServer.onAccept","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_app.AcceptInfo","inner":[]}]}],"parameters":{},"annotations":[]},"onAcceptError":{"name":"onAcceptError","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.onAcceptError","comment":"","commentFrom":"chrome_app.ChromeSocketsTcpServer.onAcceptError","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_app.AcceptErrorInfo","inner":[]}]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.ChromeSocketsTcpServer-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"create":{"name":"create","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.create","comment":"<p>Creates a TCP server socket.\n<a>chrome/chrome_app.ChromeSocketsTcpServer.create.properties</a>: The socket properties (optional).\ncallback: Called when the socket has been created.</p>\n<p>Returns:\nCallback from the <code>create</code> method.\ncreateInfo: The result of the socket creation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.CreateInfo","inner":[]}]}],"parameters":{"properties":{"name":"properties","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.SocketProperties","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"update":{"name":"update","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.update","comment":"<p>Updates the socket properties.\n<a>chrome/chrome_app.ChromeSocketsTcpServer.update.socketId</a>: The socket identifier.\n<a>chrome/chrome_app.ChromeSocketsTcpServer.update.properties</a>: The properties to update.\ncallback: Called when the properties are updated.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"properties":{"name":"properties","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.SocketProperties","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setPaused":{"name":"setPaused","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.setPaused","comment":"<p>Enables or disables a listening socket from accepting new connections. When\npaused, a listening socket accepts new connections until its backlog (see\n<code>listen</code> function) is full then refuses additional connection requests.\n<code>onAccept</code> events are raised only when the socket is un-paused.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"paused":{"name":"paused","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"listen":{"name":"listen","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.listen","comment":"<p>Listens for connections on the specified port and address. If the\nport/address is in use, the callback indicates a failure.\n<a>chrome/chrome_app.ChromeSocketsTcpServer.listen.socketId</a>: The socket identifier.\n<a>chrome/chrome_app.ChromeSocketsTcpServer.listen.address</a>: The address of the local machine.\n<a>chrome/chrome_app.ChromeSocketsTcpServer.listen.port</a>: The port of the local machine.\n<a>chrome/chrome_app.ChromeSocketsTcpServer.listen.backlog</a>: Length of the socket's listen queue. The default value depends\non the Operating System (SOMAXCONN), which ensures a reasonable queue\nlength for most applications.\ncallback: Called when listen operation completes.</p>\n<p>Returns:\nCallback from the <code>listen</code> method.\nresult: The result code returned from the underlying network call. A\nnegative value indicates an error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"address":{"name":"address","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"port":{"name":"port","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"backlog":{"name":"backlog","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"disconnect":{"name":"disconnect","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.disconnect","comment":"<p>Disconnects the listening socket, i.e. stops accepting new connections and\nreleases the address/port the socket is bound to. The socket identifier\nremains valid, e.g. it can be used with <code>listen</code> to accept connections on a\nnew port and address.\n<a>chrome/chrome_app.ChromeSocketsTcpServer.disconnect.socketId</a>: The socket identifier.\ncallback: Called when the disconnect attempt is complete.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"close":{"name":"close","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.close","comment":"<p>Disconnects and destroys the socket. Each socket created should be closed\nafter use. The socket id is no longer valid as soon at the function is\ncalled. However, the socket is guaranteed to be closed only when the\ncallback is invoked.\n<a>chrome/chrome_app.ChromeSocketsTcpServer.close.socketId</a>: The socket identifier.\ncallback: Called when the <code>close</code> operation completes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getInfo":{"name":"getInfo","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.getInfo","comment":"<p>Retrieves the state of the given socket.\n<a>chrome/chrome_app.ChromeSocketsTcpServer.getInfo.socketId</a>: The socket identifier.\ncallback: Called when the socket state is available.</p>\n<p>Returns:\nCallback from the <code>getInfo</code> method.\nsocketInfo: Object containing the socket information.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.SocketInfo","inner":[]}]}],"parameters":{"socketId":{"name":"socketId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getSockets":{"name":"getSockets","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.getSockets","comment":"<p>Retrieves the list of currently opened sockets owned by the application.\ncallback: Called when the list of sockets is available.</p>\n<p>Returns:\nCallback from the <code>getSockets</code> method.\nsocketInfos: Array of object containing socket information.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_app.SocketInfo","inner":[]}]}]}],"parameters":{},"annotations":[]},"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer._throwNotAvailable","comment":"","commentFrom":"chrome_app.ChromeSocketsTcpServer._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_app.ChromeSocketsTcpServer.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_app.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_app.ChromeSocketsTcpServer.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_app.ChromeSocketsTcpServer.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_app.ChromeSocketsTcpServer.noSuchMethod","comment":"<p><a>chrome/chrome_app.ChromeSocketsTcpServer.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_app.ChromeSocketsTcpServer.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_app.ChromeSocketsTcpServer.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_app.ChromeSocketsTcpServer.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}