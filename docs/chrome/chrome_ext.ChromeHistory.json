{"name":"ChromeHistory","qualifiedName":"chrome/chrome_ext.ChromeHistory","comment":"","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeApi","implements":[],"subclass":[],"variables":{"_onVisitRemoved":{"name":"_onVisitRemoved","qualifiedName":"chrome/chrome_ext.ChromeHistory._onVisitRemoved","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onVisited":{"name":"_onVisited","qualifiedName":"chrome/chrome_ext.ChromeHistory._onVisited","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.HistoryItem","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_history":{"name":"_history","qualifiedName":"chrome/chrome_ext.ChromeHistory._history","comment":"","commentFrom":"chrome_ext.ChromeHistory._history","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeHistory.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"onVisitRemoved":{"name":"onVisitRemoved","qualifiedName":"chrome/chrome_ext.ChromeHistory.onVisitRemoved","comment":"<p>Fired when one or more URLs are removed from the history service.  When all\nvisits have been removed the URL is purged from history.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onVisited":{"name":"onVisited","qualifiedName":"chrome/chrome_ext.ChromeHistory.onVisited","comment":"<p>Fired when a URL is visited, providing the HistoryItem data for that URL.\nThis event fires before the page has loaded.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.HistoryItem","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_ext.ChromeHistory.ChromeHistory-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_ext.ChromeHistory._throwNotAvailable","comment":"","commentFrom":"chrome_ext.ChromeHistory._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"addUrl":{"name":"addUrl","qualifiedName":"chrome/chrome_ext.ChromeHistory.addUrl","comment":"<p>Adds a URL to the history at the current time with a <a href=\"#transition_types\">transition\ntype</a> of \"link\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"details":{"name":"details","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.HistoryAddUrlParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"deleteAll":{"name":"deleteAll","qualifiedName":"chrome/chrome_ext.ChromeHistory.deleteAll","comment":"<p>Deletes all items from the history.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"deleteRange":{"name":"deleteRange","qualifiedName":"chrome/chrome_ext.ChromeHistory.deleteRange","comment":"<p>Removes all items within the specified date range from the history.  Pages\nwill not be removed from the history unless all visits fall within the\nrange.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"range":{"name":"range","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.HistoryDeleteRangeParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"deleteUrl":{"name":"deleteUrl","qualifiedName":"chrome/chrome_ext.ChromeHistory.deleteUrl","comment":"<p>Removes all occurrences of the given URL from the history.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"details":{"name":"details","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.HistoryDeleteUrlParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getVisits":{"name":"getVisits","qualifiedName":"chrome/chrome_ext.ChromeHistory.getVisits","comment":"<p>Retrieves information about visits to a URL.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.VisitItem","inner":[]}]}]}],"parameters":{"details":{"name":"details","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.HistoryGetVisitsParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"search":{"name":"search","qualifiedName":"chrome/chrome_ext.ChromeHistory.search","comment":"<p>Searches the history for the last visit time of each page matching the\nquery.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.HistoryItem","inner":[]}]}]}],"parameters":{"query":{"name":"query","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.HistorySearchParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeHistory.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_ext.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.ChromeHistory.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.ChromeHistory.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.ChromeHistory.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.ChromeHistory.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.ChromeHistory.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.ChromeHistory.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.ChromeHistory.noSuchMethod","comment":"<p><a>chrome/chrome_ext.ChromeHistory.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.ChromeHistory.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.ChromeHistory.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.ChromeHistory.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.ChromeHistory.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}