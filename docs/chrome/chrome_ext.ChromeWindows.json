{"name":"ChromeWindows","qualifiedName":"chrome/chrome_ext.ChromeWindows","comment":"","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeApi","implements":[],"subclass":[],"variables":{"_onCreated":{"name":"_onCreated","qualifiedName":"chrome/chrome_ext.ChromeWindows._onCreated","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.Window","inner":[]}]}],"annotations":[]},"_onFocusChanged":{"name":"_onFocusChanged","qualifiedName":"chrome/chrome_ext.ChromeWindows._onFocusChanged","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.int","inner":[]}]}],"annotations":[]},"_onRemoved":{"name":"_onRemoved","qualifiedName":"chrome/chrome_ext.ChromeWindows._onRemoved","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.int","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"WINDOW_ID_CURRENT":{"name":"WINDOW_ID_CURRENT","qualifiedName":"chrome/chrome_ext.ChromeWindows.WINDOW_ID_CURRENT","comment":"<p>The windowId value that represents the <a href=\"windows.html#current-window\">current\nwindow</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"WINDOW_ID_NONE":{"name":"WINDOW_ID_NONE","qualifiedName":"chrome/chrome_ext.ChromeWindows.WINDOW_ID_NONE","comment":"<p>The windowId value that represents the absence of a chrome browser window.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"_windows":{"name":"_windows","qualifiedName":"chrome/chrome_ext.ChromeWindows._windows","comment":"","commentFrom":"chrome_ext.ChromeWindows._windows","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeWindows.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"onCreated":{"name":"onCreated","qualifiedName":"chrome/chrome_ext.ChromeWindows.onCreated","comment":"<p>Fired when a window is created.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.Window","inner":[]}]}],"parameters":{},"annotations":[]},"onFocusChanged":{"name":"onFocusChanged","qualifiedName":"chrome/chrome_ext.ChromeWindows.onFocusChanged","comment":"<p>Fired when the currently focused window changes. Will be\nchrome.windows.WINDOW<em>ID</em>NONE if all chrome windows have lost focus. Note:\nOn some Linux window managers, WINDOW<em>ID</em>NONE will always be sent\nimmediately preceding a switch from one chrome window to another.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"onRemoved":{"name":"onRemoved","qualifiedName":"chrome/chrome_ext.ChromeWindows.onRemoved","comment":"<p>Fired when a window is removed (closed).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_ext.ChromeWindows.ChromeWindows-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_ext.ChromeWindows._throwNotAvailable","comment":"","commentFrom":"chrome_ext.ChromeWindows._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"create":{"name":"create","qualifiedName":"chrome/chrome_ext.ChromeWindows.create","comment":"<p>Creates (opens) a new browser with any optional sizing, position or default\nURL provided.</p>\n<p>Returns:\nContains details about the created window.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.Window","inner":[]}]}],"parameters":{"createData":{"name":"createData","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.WindowsCreateParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"get":{"name":"get","qualifiedName":"chrome/chrome_ext.ChromeWindows.get","comment":"<p>Gets details about a window.</p>\n<p><a>chrome/chrome_ext.ChromeWindows.get.getInfo</a></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.Window","inner":[]}]}],"parameters":{"getInfo":{"name":"getInfo","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.WindowsGetParams","inner":[]}],"value":null,"annotations":[]},"windowId":{"name":"windowId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getAll":{"name":"getAll","qualifiedName":"chrome/chrome_ext.ChromeWindows.getAll","comment":"<p>Gets all windows.</p>\n<p><a>chrome/chrome_ext.ChromeWindows.getAll.getInfo</a></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.Window","inner":[]}]}]}],"parameters":{"getInfo":{"name":"getInfo","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.WindowsGetAllParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getCurrent":{"name":"getCurrent","qualifiedName":"chrome/chrome_ext.ChromeWindows.getCurrent","comment":"<p>Gets the <a href=\"#current-window\">current window</a>.</p>\n<p><a>chrome/chrome_ext.ChromeWindows.getCurrent.getInfo</a></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.Window","inner":[]}]}],"parameters":{"getInfo":{"name":"getInfo","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.WindowsGetCurrentParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getLastFocused":{"name":"getLastFocused","qualifiedName":"chrome/chrome_ext.ChromeWindows.getLastFocused","comment":"<p>Gets the window that was most recently focused - typically the window 'on\ntop'.</p>\n<p><a>chrome/chrome_ext.ChromeWindows.getLastFocused.getInfo</a></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.Window","inner":[]}]}],"parameters":{"getInfo":{"name":"getInfo","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.WindowsGetLastFocusedParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"chrome/chrome_ext.ChromeWindows.remove","comment":"<p>Removes (closes) a window, and all the tabs inside it.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"windowId":{"name":"windowId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"update":{"name":"update","qualifiedName":"chrome/chrome_ext.ChromeWindows.update","comment":"<p>Updates the properties of a window. Specify only the properties that you\nwant to change; unspecified properties will be left unchanged.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.Window","inner":[]}]}],"parameters":{"updateInfo":{"name":"updateInfo","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.WindowsUpdateParams","inner":[]}],"value":null,"annotations":[]},"windowId":{"name":"windowId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeWindows.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_ext.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.ChromeWindows.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.ChromeWindows.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.ChromeWindows.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.ChromeWindows.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.ChromeWindows.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.ChromeWindows.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.ChromeWindows.noSuchMethod","comment":"<p><a>chrome/chrome_ext.ChromeWindows.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.ChromeWindows.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.ChromeWindows.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.ChromeWindows.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.ChromeWindows.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}