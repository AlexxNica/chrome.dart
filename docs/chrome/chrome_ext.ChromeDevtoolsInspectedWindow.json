{"name":"ChromeDevtoolsInspectedWindow","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow","comment":"<p>Use the <code>chrome.devtools.inspectedWindow</code> API to interact with the inspected\nwindow: obtain the tab ID for the inspected page, evaluate the code in the\ncontext of the inspected window, reload the page, or obtain the list of\nresources within the page.</p>","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeApi","implements":[],"subclass":[],"variables":{"_onResourceAdded":{"name":"_onResourceAdded","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow._onResourceAdded","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.Resource","inner":[]}]}],"annotations":[]},"_onResourceContentCommitted":{"name":"_onResourceContentCommitted","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow._onResourceContentCommitted","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnResourceContentCommittedEvent","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_devtools_inspectedWindow":{"name":"_devtools_inspectedWindow","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow._devtools_inspectedWindow","comment":"","commentFrom":"chrome_ext.ChromeDevtoolsInspectedWindow._devtools_inspectedWindow","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"onResourceAdded":{"name":"onResourceAdded","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow.onResourceAdded","comment":"<p>Fired when a new resource is added to the inspected page.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.Resource","inner":[]}]}],"parameters":{},"annotations":[]},"onResourceContentCommitted":{"name":"onResourceContentCommitted","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow.onResourceContentCommitted","comment":"<p>Fired when a new revision of the resource is committed (e.g. user saves an\nedited version of the resource in the Developer Tools).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnResourceContentCommittedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"tabId":{"name":"tabId","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow.tabId","comment":"<p>The ID of the tab being inspected. This ID may be used with chrome.tabs.*\nAPI.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow.ChromeDevtoolsInspectedWindow-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow._throwNotAvailable","comment":"","commentFrom":"chrome_ext.ChromeDevtoolsInspectedWindow._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"eval":{"name":"eval","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow.eval","comment":"<p>Evaluates a JavaScript expression in the context of the main frame of the\ninspected page. The expression must evaluate to a JSON-compliant object,\notherwise an exception is thrown.</p>\n<p><a>chrome/chrome_ext.ChromeDevtoolsInspectedWindow.eval.expression</a> An expression to evaluate.</p>\n<p>Returns:\nresult The result of evaluation.\nisException Set if an exception was caught while evaluating the\nexpression.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.EvalResult","inner":[]}]}],"parameters":{"expression":{"name":"expression","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getResources":{"name":"getResources","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow.getResources","comment":"<p>Retrieves the list of resources from the inspected page.</p>\n<p>Returns:\nThe resources within the page.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.Resource","inner":[]}]}]}],"parameters":{},"annotations":[]},"reload":{"name":"reload","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow.reload","comment":"<p>Reloads the inspected page.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"reloadOptions":{"name":"reloadOptions","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.DevtoolsInspectedWindowReloadParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_ext.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.ChromeDevtoolsInspectedWindow.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.ChromeDevtoolsInspectedWindow.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.ChromeDevtoolsInspectedWindow.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow.noSuchMethod","comment":"<p><a>chrome/chrome_ext.ChromeDevtoolsInspectedWindow.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.ChromeDevtoolsInspectedWindow.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.ChromeDevtoolsInspectedWindow.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.ChromeDevtoolsInspectedWindow.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.ChromeDevtoolsInspectedWindow.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}