{"name":"ChromeNotifications","qualifiedName":"chrome/chrome_ext.ChromeNotifications","comment":"","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeApi","implements":[],"subclass":[],"variables":{"_onClosed":{"name":"_onClosed","qualifiedName":"chrome/chrome_app.ChromeNotifications._onClosed","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_app.OnClosedEvent","inner":[]}]}],"annotations":[]},"_onClicked":{"name":"_onClicked","qualifiedName":"chrome/chrome_app.ChromeNotifications._onClicked","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.String","inner":[]}]}],"annotations":[]},"_onButtonClicked":{"name":"_onButtonClicked","qualifiedName":"chrome/chrome_app.ChromeNotifications._onButtonClicked","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_app.OnButtonClickedEvent","inner":[]}]}],"annotations":[]},"_onPermissionLevelChanged":{"name":"_onPermissionLevelChanged","qualifiedName":"chrome/chrome_app.ChromeNotifications._onPermissionLevelChanged","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_app.PermissionLevel","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_notifications":{"name":"_notifications","qualifiedName":"chrome/chrome_ext.ChromeNotifications._notifications","comment":"","commentFrom":"chrome_app.ChromeNotifications._notifications","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"onClosed":{"name":"onClosed","qualifiedName":"chrome/chrome_ext.ChromeNotifications.onClosed","comment":"","commentFrom":"chrome_app.ChromeNotifications.onClosed","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnClosedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onClicked":{"name":"onClicked","qualifiedName":"chrome/chrome_ext.ChromeNotifications.onClicked","comment":"","commentFrom":"chrome_app.ChromeNotifications.onClicked","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"onButtonClicked":{"name":"onButtonClicked","qualifiedName":"chrome/chrome_ext.ChromeNotifications.onButtonClicked","comment":"","commentFrom":"chrome_app.ChromeNotifications.onButtonClicked","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnButtonClickedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onPermissionLevelChanged":{"name":"onPermissionLevelChanged","qualifiedName":"chrome/chrome_ext.ChromeNotifications.onPermissionLevelChanged","comment":"","commentFrom":"chrome_app.ChromeNotifications.onPermissionLevelChanged","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.PermissionLevel","inner":[]}]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeNotifications.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_ext.ChromeNotifications.ChromeNotifications-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"create":{"name":"create","qualifiedName":"chrome/chrome_ext.ChromeNotifications.create","comment":"<p>Creates and displays a notification.\n<a>chrome/chrome_ext.ChromeNotifications.create.notificationId</a>: Identifier of the notification. If it is empty, this\nmethod generates an id. If it matches an existing notification, this method\nfirst clears that notification before proceeding with the create operation.\n<a>chrome/chrome_ext.ChromeNotifications.create.options</a>: Contents of the notification.\ncallback: Returns the notification id (either supplied or generated) that\nrepresents the created notification.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"notificationId":{"name":"notificationId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"options":{"name":"options","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.NotificationOptions","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"update":{"name":"update","qualifiedName":"chrome/chrome_ext.ChromeNotifications.update","comment":"<p>Updates an existing notification.\n<a>chrome/chrome_ext.ChromeNotifications.update.notificationId</a>: The id of the notification to be updated. This is\nreturned by notifications.create method.\n<a>chrome/chrome_ext.ChromeNotifications.update.options</a>: Contents of the notification to update to.\ncallback: Called to indicate whether a matching notification existed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"notificationId":{"name":"notificationId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"options":{"name":"options","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.NotificationOptions","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"clear":{"name":"clear","qualifiedName":"chrome/chrome_ext.ChromeNotifications.clear","comment":"<p>Clears the specified notification.\n<a>chrome/chrome_ext.ChromeNotifications.clear.notificationId</a>: The id of the notification to be cleared. This is\nreturned by notifications.create method.\ncallback: Called to indicate whether a matching notification existed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"notificationId":{"name":"notificationId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getAll":{"name":"getAll","qualifiedName":"chrome/chrome_ext.ChromeNotifications.getAll","comment":"<p>Retrieves all the notifications.\ncallback: Returns the set of notification_ids currently in the system.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{},"annotations":[]},"getPermissionLevel":{"name":"getPermissionLevel","qualifiedName":"chrome/chrome_ext.ChromeNotifications.getPermissionLevel","comment":"<p>Retrieves whether the user has enabled notifications from this app or\nextension.\ncallback: Returns the current permission level.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.PermissionLevel","inner":[]}]}],"parameters":{},"annotations":[]},"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_ext.ChromeNotifications._throwNotAvailable","comment":"","commentFrom":"chrome_app.ChromeNotifications._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.ChromeNotifications.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.ChromeNotifications.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.ChromeNotifications.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeNotifications.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_ext.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.ChromeNotifications.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.ChromeNotifications.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.ChromeNotifications.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.ChromeNotifications.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.ChromeNotifications.noSuchMethod","comment":"<p><a>chrome/chrome_ext.ChromeNotifications.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.ChromeNotifications.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.ChromeNotifications.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.ChromeNotifications.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}