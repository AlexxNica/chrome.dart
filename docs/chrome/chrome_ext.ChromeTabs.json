{"name":"ChromeTabs","qualifiedName":"chrome/chrome_ext.ChromeTabs","comment":"","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeApi","implements":[],"subclass":[],"variables":{"_onCreated":{"name":"_onCreated","qualifiedName":"chrome/chrome_ext.ChromeTabs._onCreated","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.Tab","inner":[]}]}],"annotations":[]},"_onUpdated":{"name":"_onUpdated","qualifiedName":"chrome/chrome_ext.ChromeTabs._onUpdated","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnUpdatedEvent","inner":[]}]}],"annotations":[]},"_onMoved":{"name":"_onMoved","qualifiedName":"chrome/chrome_ext.ChromeTabs._onMoved","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.TabsOnMovedEvent","inner":[]}]}],"annotations":[]},"_onSelectionChanged":{"name":"_onSelectionChanged","qualifiedName":"chrome/chrome_ext.ChromeTabs._onSelectionChanged","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnSelectionChangedEvent","inner":[]}]}],"annotations":[]},"_onActiveChanged":{"name":"_onActiveChanged","qualifiedName":"chrome/chrome_ext.ChromeTabs._onActiveChanged","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnActiveChangedEvent","inner":[]}]}],"annotations":[]},"_onActivated":{"name":"_onActivated","qualifiedName":"chrome/chrome_ext.ChromeTabs._onActivated","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onHighlightChanged":{"name":"_onHighlightChanged","qualifiedName":"chrome/chrome_ext.ChromeTabs._onHighlightChanged","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onHighlighted":{"name":"_onHighlighted","qualifiedName":"chrome/chrome_ext.ChromeTabs._onHighlighted","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onDetached":{"name":"_onDetached","qualifiedName":"chrome/chrome_ext.ChromeTabs._onDetached","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnDetachedEvent","inner":[]}]}],"annotations":[]},"_onAttached":{"name":"_onAttached","qualifiedName":"chrome/chrome_ext.ChromeTabs._onAttached","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnAttachedEvent","inner":[]}]}],"annotations":[]},"_onRemoved":{"name":"_onRemoved","qualifiedName":"chrome/chrome_ext.ChromeTabs._onRemoved","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.TabsOnRemovedEvent","inner":[]}]}],"annotations":[]},"_onReplaced":{"name":"_onReplaced","qualifiedName":"chrome/chrome_ext.ChromeTabs._onReplaced","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnReplacedEvent","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_tabs":{"name":"_tabs","qualifiedName":"chrome/chrome_ext.ChromeTabs._tabs","comment":"","commentFrom":"chrome_ext.ChromeTabs._tabs","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"onCreated":{"name":"onCreated","qualifiedName":"chrome/chrome_ext.ChromeTabs.onCreated","comment":"<p>Fired when a tab is created. Note that the tab's URL may not be set at the\ntime this event fired, but you can listen to onUpdated events to be\nnotified when a URL is set.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.Tab","inner":[]}]}],"parameters":{},"annotations":[]},"onUpdated":{"name":"onUpdated","qualifiedName":"chrome/chrome_ext.ChromeTabs.onUpdated","comment":"<p>Fired when a tab is updated.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnUpdatedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onMoved":{"name":"onMoved","qualifiedName":"chrome/chrome_ext.ChromeTabs.onMoved","comment":"<p>Fired when a tab is moved within a window. Only one move event is fired,\nrepresenting the tab the user directly moved. Move events are not fired for\nthe other tabs that must move in response. This event is not fired when a\ntab is moved between windows. For that, see onDetached.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.TabsOnMovedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onSelectionChanged":{"name":"onSelectionChanged","qualifiedName":"chrome/chrome_ext.ChromeTabs.onSelectionChanged","comment":"<p>Deprecated. Please use onActivated.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnSelectionChangedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onActiveChanged":{"name":"onActiveChanged","qualifiedName":"chrome/chrome_ext.ChromeTabs.onActiveChanged","comment":"<p>Deprecated. Please use onActivated.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnActiveChangedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onActivated":{"name":"onActivated","qualifiedName":"chrome/chrome_ext.ChromeTabs.onActivated","comment":"<p>Fires when the active tab in a window changes. Note that the tab's URL may\nnot be set at the time this event fired, but you can listen to onUpdated\nevents to be notified when a URL is set.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onHighlightChanged":{"name":"onHighlightChanged","qualifiedName":"chrome/chrome_ext.ChromeTabs.onHighlightChanged","comment":"<p>Deprecated. Please use onHighlighted.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onHighlighted":{"name":"onHighlighted","qualifiedName":"chrome/chrome_ext.ChromeTabs.onHighlighted","comment":"<p>Fired when the highlighted or selected tabs in a window changes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onDetached":{"name":"onDetached","qualifiedName":"chrome/chrome_ext.ChromeTabs.onDetached","comment":"<p>Fired when a tab is detached from a window, for example because it is being\nmoved between windows.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnDetachedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onAttached":{"name":"onAttached","qualifiedName":"chrome/chrome_ext.ChromeTabs.onAttached","comment":"<p>Fired when a tab is attached to a window, for example because it was moved\nbetween windows.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnAttachedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onRemoved":{"name":"onRemoved","qualifiedName":"chrome/chrome_ext.ChromeTabs.onRemoved","comment":"<p>Fired when a tab is closed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.TabsOnRemovedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onReplaced":{"name":"onReplaced","qualifiedName":"chrome/chrome_ext.ChromeTabs.onReplaced","comment":"<p>Fired when a tab is replaced with another tab due to prerendering or\ninstant.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnReplacedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeTabs.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_ext.ChromeTabs.ChromeTabs-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"get":{"name":"get","qualifiedName":"chrome/chrome_ext.ChromeTabs.get","comment":"<p>Retrieves details about the specified tab.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.Tab","inner":[]}]}],"parameters":{"tabId":{"name":"tabId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getCurrent":{"name":"getCurrent","qualifiedName":"chrome/chrome_ext.ChromeTabs.getCurrent","comment":"<p>Gets the tab that this script call is being made from. May be undefined if\ncalled from a non-tab context (for example: a background page or popup\nview).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.Tab","inner":[]}]}],"parameters":{},"annotations":[]},"connect":{"name":"connect","qualifiedName":"chrome/chrome_ext.ChromeTabs.connect","comment":"<p>Connects to the content script(s) in the specified tab. The\nruntime.onConnect event is fired in each content script running in the\nspecified tab for the current extension. For more details, see <a href=\"messaging.html\">Content\nScript Messaging</a>.</p>\n<p>Returns:\nA port that can be used to communicate with the content scripts running in\nthe specified tab. The port's runtime.Port event is fired if the tab\ncloses or does not exist.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"chrome/chrome_ext.Port","inner":[]}],"parameters":{"tabId":{"name":"tabId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"connectInfo":{"name":"connectInfo","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.TabsConnectParams","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"sendRequest":{"name":"sendRequest","qualifiedName":"chrome/chrome_ext.ChromeTabs.sendRequest","comment":"<p>Deprecated: Please use sendMessage.</p>\n<p>Returns:\nThe JSON response object sent by the handler of the request. If an error\noccurs while connecting to the specified tab, the callback will be called\nwith no arguments and runtime.lastError will be set to the error message.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"tabId":{"name":"tabId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"sendMessage":{"name":"sendMessage","qualifiedName":"chrome/chrome_ext.ChromeTabs.sendMessage","comment":"<p>Sends a single message to the content script(s) in the specified tab, with\nan optional callback to run when a response is sent back.  The\nruntime.onMessage event is fired in each content script running in the\nspecified tab for the current extension.</p>\n<p>Returns:\nThe JSON response object sent by the handler of the message. If an error\noccurs while connecting to the specified tab, the callback will be called\nwith no arguments and runtime.lastError will be set to the error message.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"tabId":{"name":"tabId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getSelected":{"name":"getSelected","qualifiedName":"chrome/chrome_ext.ChromeTabs.getSelected","comment":"<p>Deprecated. Please use query({'active': true}). Gets the tab that is\nselected in the specified window.</p>\n<p><a>chrome/chrome_ext.ChromeTabs.getSelected.windowId</a> Defaults to the <a href=\"windows.html#current-window\">current window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.Tab","inner":[]}]}],"parameters":{"windowId":{"name":"windowId","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getAllInWindow":{"name":"getAllInWindow","qualifiedName":"chrome/chrome_ext.ChromeTabs.getAllInWindow","comment":"<p>Deprecated. Please use query({'windowId': windowId}). Gets details about\nall tabs in the specified window.</p>\n<p><a>chrome/chrome_ext.ChromeTabs.getAllInWindow.windowId</a> Defaults to the <a href=\"windows.html#current-window\">current window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.Tab","inner":[]}]}]}],"parameters":{"windowId":{"name":"windowId","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"create":{"name":"create","qualifiedName":"chrome/chrome_ext.ChromeTabs.create","comment":"<p>Creates a new tab.</p>\n<p>Returns:\nDetails about the created tab. Will contain the ID of the new tab.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.Tab","inner":[]}]}],"parameters":{"createProperties":{"name":"createProperties","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.TabsCreateParams","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"duplicate":{"name":"duplicate","qualifiedName":"chrome/chrome_ext.ChromeTabs.duplicate","comment":"<p>Duplicates a tab.</p>\n<p><a>chrome/chrome_ext.ChromeTabs.duplicate.tabId</a> The ID of the tab which is to be duplicated.</p>\n<p>Returns:\nDetails about the duplicated tab. The tabs.Tab object doesn't contain\n<code>url</code>, <code>title</code> and <code>favIconUrl</code> if the <code>\"tabs\"</code> permission has not been\nrequested.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.Tab","inner":[]}]}],"parameters":{"tabId":{"name":"tabId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"query":{"name":"query","qualifiedName":"chrome/chrome_ext.ChromeTabs.query","comment":"<p>Gets all tabs that have the specified properties, or all tabs if no\nproperties are specified.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.Tab","inner":[]}]}]}],"parameters":{"queryInfo":{"name":"queryInfo","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.TabsQueryParams","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"highlight":{"name":"highlight","qualifiedName":"chrome/chrome_ext.ChromeTabs.highlight","comment":"<p>Highlights the given tabs.</p>\n<p>Returns:\nContains details about the window whose tabs were highlighted.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.Window","inner":[]}]}],"parameters":{"highlightInfo":{"name":"highlightInfo","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.TabsHighlightParams","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"update":{"name":"update","qualifiedName":"chrome/chrome_ext.ChromeTabs.update","comment":"<p>Modifies the properties of a tab. Properties that are not specified in\n<a>chrome/chrome_ext.ChromeTabs.update.updateProperties</a> are not modified.</p>\n<p><a>chrome/chrome_ext.ChromeTabs.update.tabId</a> Defaults to the selected tab of the <a href=\"windows.html#current-window\">current\nwindow</a>.</p>\n<p>Returns:\nDetails about the updated tab. The tabs.Tab object doesn't contain <code>url</code>,\n<code>title</code> and <code>favIconUrl</code> if the <code>\"tabs\"</code> permission has not been requested.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_ext.Tab","inner":[]}]}],"parameters":{"updateProperties":{"name":"updateProperties","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.TabsUpdateParams","inner":[]}],"value":"null","annotations":[]},"tabId":{"name":"tabId","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"move":{"name":"move","qualifiedName":"chrome/chrome_ext.ChromeTabs.move","comment":"<p>Moves one or more tabs to a new position within its window, or to a new\nwindow. Note that tabs can only be moved to and from normal (window.type\n=== \"normal\") windows.</p>\n<p><a>chrome/chrome_ext.ChromeTabs.move.tabIds</a> The tab or list of tabs to move.</p>\n<p>Returns:\nDetails about the moved tabs.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dynamic","inner":[]}]}],"parameters":{"tabIds":{"name":"tabIds","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"moveProperties":{"name":"moveProperties","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.TabsMoveParams","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"reload":{"name":"reload","qualifiedName":"chrome/chrome_ext.ChromeTabs.reload","comment":"<p>Reload a tab.</p>\n<p><a>chrome/chrome_ext.ChromeTabs.reload.tabId</a> The ID of the tab to reload; defaults to the selected tab of the\ncurrent window.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"tabId":{"name":"tabId","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"reloadProperties":{"name":"reloadProperties","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.TabsReloadParams","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"chrome/chrome_ext.ChromeTabs.remove","comment":"<p>Closes one or more tabs.</p>\n<p><a>chrome/chrome_ext.ChromeTabs.remove.tabIds</a> The tab or list of tabs to close.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"tabIds":{"name":"tabIds","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"detectLanguage":{"name":"detectLanguage","qualifiedName":"chrome/chrome_ext.ChromeTabs.detectLanguage","comment":"<p>Detects the primary language of the content in a tab.</p>\n<p><a>chrome/chrome_ext.ChromeTabs.detectLanguage.tabId</a> Defaults to the active tab of the <a href=\"windows.html#current-window\">current\nwindow</a>.</p>\n<p>Returns:\nAn ISO language code such as <code>en</code> or <code>fr</code>. For a complete list of languages\nsupported by this method, see\n<a href=\"http://src.chromium.org/viewvc/chrome/trunk/src/third_party/cld/languages/internal/languages.cc\">kLanguageInfoTable</a>.\nThe 2nd to 4th columns will be checked and the first non-NULL value will be\nreturned except for Simplified Chinese for which zh-CN will be returned.\nFor an unknown language, <code>und</code> will be returned.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"tabId":{"name":"tabId","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"captureVisibleTab":{"name":"captureVisibleTab","qualifiedName":"chrome/chrome_ext.ChromeTabs.captureVisibleTab","comment":"<p>Captures the visible area of the currently active tab in the specified\nwindow. You must have <a href=\"declare_permissions.html\">host permission</a> for the\nURL displayed by the tab.</p>\n<p><a>chrome/chrome_ext.ChromeTabs.captureVisibleTab.windowId</a> The target window. Defaults to the <a href=\"windows.html#current-window\">current\nwindow</a>.</p>\n<p><a>chrome/chrome_ext.ChromeTabs.captureVisibleTab.options</a> Set parameters of image capture, such as the format of the\nresulting image.</p>\n<p>Returns:\nA data URL which encodes an image of the visible area of the captured tab.\nMay be assigned to the 'src' property of an HTML Image element for display.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"windowId":{"name":"windowId","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"options":{"name":"options","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.TabsCaptureVisibleTabParams","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"executeScript":{"name":"executeScript","qualifiedName":"chrome/chrome_ext.ChromeTabs.executeScript","comment":"<p>Injects JavaScript code into a page. For details, see the <a href=\"content_scripts.html#pi\">programmatic\ninjection</a> section of the content scripts doc.</p>\n<p><a>chrome/chrome_ext.ChromeTabs.executeScript.tabId</a> The ID of the tab in which to run the script; defaults to the\nactive tab of the current window.</p>\n<p><a>chrome/chrome_ext.ChromeTabs.executeScript.details</a> Details of the script to run.</p>\n<p>Returns:\nThe result of the script in every injected frame.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dynamic","inner":[]}]}]}],"parameters":{"details":{"name":"details","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.InjectDetails","inner":[]}],"value":"null","annotations":[]},"tabId":{"name":"tabId","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"insertCSS":{"name":"insertCSS","qualifiedName":"chrome/chrome_ext.ChromeTabs.insertCSS","comment":"<p>Injects CSS into a page. For details, see the <a href=\"content_scripts.html#pi\">programmatic\ninjection</a> section of the content scripts doc.</p>\n<p><a>chrome/chrome_ext.ChromeTabs.insertCSS.tabId</a> The ID of the tab in which to insert the CSS; defaults to the\nactive tab of the current window.</p>\n<p><a>chrome/chrome_ext.ChromeTabs.insertCSS.details</a> Details of the CSS text to insert.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"details":{"name":"details","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.InjectDetails","inner":[]}],"value":"null","annotations":[]},"tabId":{"name":"tabId","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_ext.ChromeTabs._throwNotAvailable","comment":"","commentFrom":"chrome_ext.ChromeTabs._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.ChromeTabs.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.ChromeTabs.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.ChromeTabs.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeTabs.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_ext.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.ChromeTabs.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.ChromeTabs.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.ChromeTabs.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.ChromeTabs.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.ChromeTabs.noSuchMethod","comment":"<p><a>chrome/chrome_ext.ChromeTabs.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.ChromeTabs.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.ChromeTabs.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.ChromeTabs.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}