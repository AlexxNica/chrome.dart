{"name":"ChromeInputIme","qualifiedName":"chrome/chrome_ext.ChromeInputIme","comment":"<p>Use the <code>chrome.input.ime</code> API to implement a custom IME for Chrome OS. This\nallows your extension to handle keystrokes, set the composition, and manage\nthe candidate window.</p>","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeApi","implements":[],"subclass":[],"variables":{"_onActivate":{"name":"_onActivate","qualifiedName":"chrome/chrome_ext.ChromeInputIme._onActivate","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.String","inner":[]}]}],"annotations":[]},"_onBlur":{"name":"_onBlur","qualifiedName":"chrome/chrome_ext.ChromeInputIme._onBlur","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.int","inner":[]}]}],"annotations":[]},"_onCandidateClicked":{"name":"_onCandidateClicked","qualifiedName":"chrome/chrome_ext.ChromeInputIme._onCandidateClicked","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnCandidateClickedEvent","inner":[]}]}],"annotations":[]},"_onDeactivated":{"name":"_onDeactivated","qualifiedName":"chrome/chrome_ext.ChromeInputIme._onDeactivated","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.String","inner":[]}]}],"annotations":[]},"_onFocus":{"name":"_onFocus","qualifiedName":"chrome/chrome_ext.ChromeInputIme._onFocus","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.InputContext","inner":[]}]}],"annotations":[]},"_onInputContextUpdate":{"name":"_onInputContextUpdate","qualifiedName":"chrome/chrome_ext.ChromeInputIme._onInputContextUpdate","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.InputContext","inner":[]}]}],"annotations":[]},"_onKeyEvent":{"name":"_onKeyEvent","qualifiedName":"chrome/chrome_ext.ChromeInputIme._onKeyEvent","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnKeyEventEvent","inner":[]}]}],"annotations":[]},"_onMenuItemActivated":{"name":"_onMenuItemActivated","qualifiedName":"chrome/chrome_ext.ChromeInputIme._onMenuItemActivated","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnMenuItemActivatedEvent","inner":[]}]}],"annotations":[]},"_onReset":{"name":"_onReset","qualifiedName":"chrome/chrome_ext.ChromeInputIme._onReset","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.String","inner":[]}]}],"annotations":[]},"_onSurroundingTextChanged":{"name":"_onSurroundingTextChanged","qualifiedName":"chrome/chrome_ext.ChromeInputIme._onSurroundingTextChanged","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnSurroundingTextChangedEvent","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_input_ime":{"name":"_input_ime","qualifiedName":"chrome/chrome_ext.ChromeInputIme._input_ime","comment":"","commentFrom":"chrome_ext.ChromeInputIme._input_ime","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeInputIme.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"onActivate":{"name":"onActivate","qualifiedName":"chrome/chrome_ext.ChromeInputIme.onActivate","comment":"<p>This event is sent when an IME is activated. It signals that the IME will\nbe receiving onKeyPress events.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"onBlur":{"name":"onBlur","qualifiedName":"chrome/chrome_ext.ChromeInputIme.onBlur","comment":"<p>This event is sent when focus leaves a text box. It is sent to all\nextensions that are listening to this event, and enabled by the user.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"onCandidateClicked":{"name":"onCandidateClicked","qualifiedName":"chrome/chrome_ext.ChromeInputIme.onCandidateClicked","comment":"<p>This event is sent if this extension owns the active IME.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnCandidateClickedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onDeactivated":{"name":"onDeactivated","qualifiedName":"chrome/chrome_ext.ChromeInputIme.onDeactivated","comment":"<p>This event is sent when an IME is deactivated. It signals that the IME will\nno longer be receiving onKeyPress events.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"onFocus":{"name":"onFocus","qualifiedName":"chrome/chrome_ext.ChromeInputIme.onFocus","comment":"<p>This event is sent when focus enters a text box. It is sent to all\nextensions that are listening to this event, and enabled by the user.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.InputContext","inner":[]}]}],"parameters":{},"annotations":[]},"onInputContextUpdate":{"name":"onInputContextUpdate","qualifiedName":"chrome/chrome_ext.ChromeInputIme.onInputContextUpdate","comment":"<p>This event is sent when the properties of the current InputContext change,\nsuch as the the type. It is sent to all extensions that are listening to\nthis event, and enabled by the user.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.InputContext","inner":[]}]}],"parameters":{},"annotations":[]},"onKeyEvent":{"name":"onKeyEvent","qualifiedName":"chrome/chrome_ext.ChromeInputIme.onKeyEvent","comment":"<p>This event is sent if this extension owns the active IME.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnKeyEventEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onMenuItemActivated":{"name":"onMenuItemActivated","qualifiedName":"chrome/chrome_ext.ChromeInputIme.onMenuItemActivated","comment":"<p>Called when the user selects a menu item</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnMenuItemActivatedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onReset":{"name":"onReset","qualifiedName":"chrome/chrome_ext.ChromeInputIme.onReset","comment":"<p>This event is sent when chrome terminates ongoing text input session.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"onSurroundingTextChanged":{"name":"onSurroundingTextChanged","qualifiedName":"chrome/chrome_ext.ChromeInputIme.onSurroundingTextChanged","comment":"<p>Called when the editable string around caret is changed or when the caret\nposition is moved. The text length is limited to 100 characters for each\nback and forth direction.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnSurroundingTextChangedEvent","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_ext.ChromeInputIme.ChromeInputIme-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_ext.ChromeInputIme._throwNotAvailable","comment":"","commentFrom":"chrome_ext.ChromeInputIme._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"clearComposition":{"name":"clearComposition","qualifiedName":"chrome/chrome_ext.ChromeInputIme.clearComposition","comment":"<p>Clear the current composition. If this extension does not own the active\nIME, this fails.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"parameters":{"name":"parameters","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.InputImeClearCompositionParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"commitText":{"name":"commitText","qualifiedName":"chrome/chrome_ext.ChromeInputIme.commitText","comment":"<p>Commits the provided text to the current input.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"parameters":{"name":"parameters","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.InputImeCommitTextParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"deleteSurroundingText":{"name":"deleteSurroundingText","qualifiedName":"chrome/chrome_ext.ChromeInputIme.deleteSurroundingText","comment":"<p>Deletes the text around the caret.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"parameters":{"name":"parameters","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.InputImeDeleteSurroundingTextParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"keyEventHandled":{"name":"keyEventHandled","qualifiedName":"chrome/chrome_ext.ChromeInputIme.keyEventHandled","comment":"<p>Indicates that the key event received by onKeyEvent is handled.  This\nshould only be called if the onKeyEvent listener is asynchronous.</p>\n<p><a>chrome/chrome_ext.ChromeInputIme.keyEventHandled.requestId</a> Request id of the event that was handled.  This should come\nfrom keyEvent.requestId</p>\n<p><a>chrome/chrome_ext.ChromeInputIme.keyEventHandled.response</a> True if the keystroke was handled, false if not</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"requestId":{"name":"requestId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"response":{"name":"response","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setCandidateWindowProperties":{"name":"setCandidateWindowProperties","qualifiedName":"chrome/chrome_ext.ChromeInputIme.setCandidateWindowProperties","comment":"<p>Sets the properties of the candidate window. This fails if the extension\ndoesn’t own the active IME</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"parameters":{"name":"parameters","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.InputImeSetCandidateWindowPropertiesParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setCandidates":{"name":"setCandidates","qualifiedName":"chrome/chrome_ext.ChromeInputIme.setCandidates","comment":"<p>Sets the current candidate list. This fails if this extension doesn’t own\nthe active IME</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"parameters":{"name":"parameters","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.InputImeSetCandidatesParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setComposition":{"name":"setComposition","qualifiedName":"chrome/chrome_ext.ChromeInputIme.setComposition","comment":"<p>Set the current composition. If this extension does not own the active IME,\nthis fails.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"parameters":{"name":"parameters","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.InputImeSetCompositionParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setCursorPosition":{"name":"setCursorPosition","qualifiedName":"chrome/chrome_ext.ChromeInputIme.setCursorPosition","comment":"<p>Set the position of the cursor in the candidate window. This is a no-op if\nthis extension does not own the active IME.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"parameters":{"name":"parameters","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.InputImeSetCursorPositionParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setMenuItems":{"name":"setMenuItems","qualifiedName":"chrome/chrome_ext.ChromeInputIme.setMenuItems","comment":"<p>Adds the provided menu items to the language menu when this IME is active.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"parameters":{"name":"parameters","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.InputImeSetMenuItemsParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"updateMenuItems":{"name":"updateMenuItems","qualifiedName":"chrome/chrome_ext.ChromeInputIme.updateMenuItems","comment":"<p>Updates the state of the MenuItems specified</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"parameters":{"name":"parameters","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.InputImeUpdateMenuItemsParams","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeInputIme.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_ext.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.ChromeInputIme.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.ChromeInputIme.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.ChromeInputIme.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.ChromeInputIme.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.ChromeInputIme.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.ChromeInputIme.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.ChromeInputIme.noSuchMethod","comment":"<p><a>chrome/chrome_ext.ChromeInputIme.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.ChromeInputIme.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.ChromeInputIme.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.ChromeInputIme.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.ChromeInputIme.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}