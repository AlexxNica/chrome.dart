{"name":"ChromeDebugger","qualifiedName":"chrome/chrome_ext.ChromeDebugger","comment":"","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeApi","implements":[],"subclass":[],"variables":{"_onEvent":{"name":"_onEvent","qualifiedName":"chrome/chrome_ext.ChromeDebugger._onEvent","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnEventEvent","inner":[]}]}],"annotations":[]},"_onDetach":{"name":"_onDetach","qualifiedName":"chrome/chrome_ext.ChromeDebugger._onDetach","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnDetachEvent","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_debugger":{"name":"_debugger","qualifiedName":"chrome/chrome_ext.ChromeDebugger._debugger","comment":"","commentFrom":"chrome_ext.ChromeDebugger._debugger","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"onEvent":{"name":"onEvent","qualifiedName":"chrome/chrome_ext.ChromeDebugger.onEvent","comment":"<p>Fired whenever debugging target issues instrumentation event.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnEventEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onDetach":{"name":"onDetach","qualifiedName":"chrome/chrome_ext.ChromeDebugger.onDetach","comment":"<p>Fired when browser terminates debugging session for the tab. This happens\nwhen either the tab is being closed or Chrome DevTools is being invoked for\nthe attached tab.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnDetachEvent","inner":[]}]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeDebugger.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_ext.ChromeDebugger.ChromeDebugger-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"attach":{"name":"attach","qualifiedName":"chrome/chrome_ext.ChromeDebugger.attach","comment":"<p>Attaches debugger to the given target.</p>\n<p><a>chrome/chrome_ext.ChromeDebugger.attach.target</a> Debugging target to which you want to attach.</p>\n<p><a>chrome/chrome_ext.ChromeDebugger.attach.requiredVersion</a> Required debugging protocol version (\"0.1\"). One can only\nattach to the debuggee with matching major version and greater or equal\nminor version. List of the protocol versions can be obtained\n<a href=\"http://code.google.com/chrome/devtools/docs/remote-debugging.html\">here</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"target":{"name":"target","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.Debuggee","inner":[]}],"value":"null","annotations":[]},"requiredVersion":{"name":"requiredVersion","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"detach":{"name":"detach","qualifiedName":"chrome/chrome_ext.ChromeDebugger.detach","comment":"<p>Detaches debugger from the given target.</p>\n<p><a>chrome/chrome_ext.ChromeDebugger.detach.target</a> Debugging target from which you want to detach.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"target":{"name":"target","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.Debuggee","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"sendCommand":{"name":"sendCommand","qualifiedName":"chrome/chrome_ext.ChromeDebugger.sendCommand","comment":"<p>Sends given command to the debugging target.</p>\n<p><a>chrome/chrome_ext.ChromeDebugger.sendCommand.target</a> Debugging target to which you want to send the command.</p>\n<p><a>chrome/chrome_ext.ChromeDebugger.sendCommand.method</a> Method name. Should be one of the methods defined by the <a href=\"http://code.google.com/chrome/devtools/docs/remote-debugging.html\">remote\ndebugging\nprotocol</a>.</p>\n<p><a>chrome/chrome_ext.ChromeDebugger.sendCommand.commandParams</a> JSON object with request parameters. This object must\nconform to the remote debugging params scheme for given method.</p>\n<p>Returns:\nJSON object with the response. Structure of the response varies depending\non the method and is defined by the remote debugging protocol.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dynamic","inner":[]}]}]}],"parameters":{"target":{"name":"target","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.Debuggee","inner":[]}],"value":"null","annotations":[]},"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"commandParams":{"name":"commandParams","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"getTargets":{"name":"getTargets","qualifiedName":"chrome/chrome_ext.ChromeDebugger.getTargets","comment":"<p>Returns the list of available debug targets.</p>\n<p>Returns:\nArray of TargetInfo objects corresponding to the available debug targets.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.TargetInfo","inner":[]}]}]}],"parameters":{},"annotations":[]},"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_ext.ChromeDebugger._throwNotAvailable","comment":"","commentFrom":"chrome_ext.ChromeDebugger._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.ChromeDebugger.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.ChromeDebugger.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.ChromeDebugger.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeDebugger.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_ext.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.ChromeDebugger.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.ChromeDebugger.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.ChromeDebugger.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.ChromeDebugger.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.ChromeDebugger.noSuchMethod","comment":"<p><a>chrome/chrome_ext.ChromeDebugger.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.ChromeDebugger.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.ChromeDebugger.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.ChromeDebugger.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}