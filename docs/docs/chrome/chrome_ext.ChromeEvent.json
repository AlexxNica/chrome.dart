{"name":"ChromeEvent","qualifiedName":"chrome/chrome_ext.ChromeEvent","comment":"<p>An object which allows the addition and removal of listeners for a Chrome\nevent.</p>","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeObject","implements":[],"subclass":[],"variables":{},"inheritedVariables":{"jsProxy":{"name":"jsProxy","qualifiedName":"chrome/chrome_app.ChromeObject.jsProxy","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"chrome/chrome_ext.ChromeEvent.ChromeEvent-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"fromProxy":{"name":"fromProxy","qualifiedName":"chrome/chrome_ext.ChromeEvent.ChromeEvent-fromProxy","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"jsProxy":{"name":"jsProxy","optional":false,"named":false,"default":false,"type":[{"outer":"dart-js.JsObject","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"addListener":{"name":"addListener","qualifiedName":"chrome/chrome_ext.ChromeEvent.addListener","comment":"<p>Registers an event listener <em>callback</em> to an event.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"removeListener":{"name":"removeListener","qualifiedName":"chrome/chrome_ext.ChromeEvent.removeListener","comment":"<p>Deregisters an event listener <em>callback</em> from an event.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"hasListener":{"name":"hasListener","qualifiedName":"chrome/chrome_ext.ChromeEvent.hasListener","comment":"","commentFrom":"chrome_app.ChromeEvent.hasListener","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"hasListeners":{"name":"hasListeners","qualifiedName":"chrome/chrome_ext.ChromeEvent.hasListeners","comment":"","commentFrom":"chrome_app.ChromeEvent.hasListeners","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"addRules":{"name":"addRules","qualifiedName":"chrome/chrome_ext.ChromeEvent.addRules","comment":"<p>Registers rules to handle events.</p>\n<p><a>chrome/chrome_ext.ChromeEvent.addRules.eventName</a> Name of the event this function affects.</p>\n<p><a>chrome/chrome_ext.ChromeEvent.addRules.rules</a> Rules to be registered. These do not replace previously registered\nrules.</p>\n<p>Returns:\nRules that were registered, the optional parameters are filled with values.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.Rule","inner":[]}]}]}],"parameters":{"eventName":{"name":"eventName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"rules":{"name":"rules","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.Rule","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"getRules":{"name":"getRules","qualifiedName":"chrome/chrome_ext.ChromeEvent.getRules","comment":"<p>Returns currently registered rules.</p>\n<p><a>chrome/chrome_ext.ChromeEvent.getRules.eventName</a> Name of the event this function affects.</p>\n<p><a>chrome/chrome_ext.ChromeEvent.getRules.ruleIdentifiers</a> If an array is passed, only rules with identifiers\ncontained in this array are returned.</p>\n<p>Returns:\nRules that were registered, the optional parameters are filled with values.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.Rule","inner":[]}]}]}],"parameters":{"eventName":{"name":"eventName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"ruleIdentifiers":{"name":"ruleIdentifiers","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"removeRules":{"name":"removeRules","qualifiedName":"chrome/chrome_ext.ChromeEvent.removeRules","comment":"<p>Unregisters currently registered rules.</p>\n<p><a>chrome/chrome_ext.ChromeEvent.removeRules.eventName</a> Name of the event this function affects.</p>\n<p><a>chrome/chrome_ext.ChromeEvent.removeRules.ruleIdentifiers</a> If an array is passed, only rules with identifiers\ncontained in this array are unregistered.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"eventName":{"name":"eventName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"ruleIdentifiers":{"name":"ruleIdentifiers","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.ChromeEvent.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.ChromeEvent.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.ChromeEvent.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.ChromeEvent.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.ChromeEvent.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.ChromeEvent.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.ChromeEvent.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"chrome_ext.ChromeObject.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.ChromeEvent.noSuchMethod","comment":"<p><a>chrome/chrome_ext.ChromeEvent.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.ChromeEvent.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.ChromeEvent.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.ChromeEvent.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"toJs":{"name":"toJs","qualifiedName":"chrome/chrome_ext.ChromeEvent.toJs","comment":"","commentFrom":"","inheritedFrom":"chrome_ext.ChromeObject.toJs","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}