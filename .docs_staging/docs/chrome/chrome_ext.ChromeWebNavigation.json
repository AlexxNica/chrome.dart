{"name":"ChromeWebNavigation","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation","comment":"","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeApi","implements":[],"subclass":[],"variables":{"_onBeforeNavigate":{"name":"_onBeforeNavigate","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation._onBeforeNavigate","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onCommitted":{"name":"_onCommitted","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation._onCommitted","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onDOMContentLoaded":{"name":"_onDOMContentLoaded","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation._onDOMContentLoaded","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onCompleted":{"name":"_onCompleted","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation._onCompleted","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onErrorOccurred":{"name":"_onErrorOccurred","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation._onErrorOccurred","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onCreatedNavigationTarget":{"name":"_onCreatedNavigationTarget","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation._onCreatedNavigationTarget","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onReferenceFragmentUpdated":{"name":"_onReferenceFragmentUpdated","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation._onReferenceFragmentUpdated","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onTabReplaced":{"name":"_onTabReplaced","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation._onTabReplaced","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onHistoryStateUpdated":{"name":"_onHistoryStateUpdated","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation._onHistoryStateUpdated","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_webNavigation":{"name":"_webNavigation","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation._webNavigation","comment":"","commentFrom":"chrome_ext.ChromeWebNavigation._webNavigation","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"onBeforeNavigate":{"name":"onBeforeNavigate","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.onBeforeNavigate","comment":"<p>Fired when a navigation is about to occur.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onCommitted":{"name":"onCommitted","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.onCommitted","comment":"<p>Fired when a navigation is committed. The document (and the resources it\nrefers to, such as images and subframes) might still be downloading, but at\nleast part of the document has been received from the server and the\nbrowser has decided to switch to the new document.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onDOMContentLoaded":{"name":"onDOMContentLoaded","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.onDOMContentLoaded","comment":"<p>Fired when the page's DOM is fully constructed, but the referenced\nresources may not finish loading.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onCompleted":{"name":"onCompleted","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.onCompleted","comment":"<p>Fired when a document, including the resources it refers to, is completely\nloaded and initialized.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onErrorOccurred":{"name":"onErrorOccurred","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.onErrorOccurred","comment":"<p>Fired when an error occurs and the navigation is aborted. This can happen\nif either a network error occurred, or the user aborted the navigation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onCreatedNavigationTarget":{"name":"onCreatedNavigationTarget","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.onCreatedNavigationTarget","comment":"<p>Fired when a new window, or a new tab in an existing window, is created to\nhost a navigation.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onReferenceFragmentUpdated":{"name":"onReferenceFragmentUpdated","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.onReferenceFragmentUpdated","comment":"<p>Fired when the reference fragment of a frame was updated. All future events\nfor that frame will use the updated URL.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onTabReplaced":{"name":"onTabReplaced","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.onTabReplaced","comment":"<p>Fired when the contents of the tab is replaced by a different (usually\npreviously pre-rendered) tab.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onHistoryStateUpdated":{"name":"onHistoryStateUpdated","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.onHistoryStateUpdated","comment":"<p>Fired when the frame's history was updated to a new URL. All future events\nfor that frame will use the updated URL.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.ChromeWebNavigation-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"getFrame":{"name":"getFrame","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.getFrame","comment":"<p>Retrieves information about the given frame. A frame refers to an\n&lt;iframe&gt; or a &lt;frame&gt; of a web page and is identified by a tab\nID and a frame ID.</p>\n<p><a>chrome/chrome_ext.ChromeWebNavigation.getFrame.details</a> Information about the frame to retrieve information about.</p>\n<p>Returns:\nInformation about the requested frame, null if the specified frame ID\nand/or tab ID are invalid.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{"details":{"name":"details","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.WebNavigationGetFrameParams","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getAllFrames":{"name":"getAllFrames","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.getAllFrames","comment":"<p>Retrieves information about all frames of a given tab.</p>\n<p><a>chrome/chrome_ext.ChromeWebNavigation.getAllFrames.details</a> Information about the tab to retrieve all frames from.</p>\n<p>Returns:\nA list of frames in the given tab, null if the specified tab ID is invalid.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Map","inner":[]}]}]}],"parameters":{"details":{"name":"details","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.WebNavigationGetAllFramesParams","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation._throwNotAvailable","comment":"","commentFrom":"chrome_ext.ChromeWebNavigation._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.ChromeWebNavigation.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_ext.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.ChromeWebNavigation.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.ChromeWebNavigation.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.ChromeWebNavigation.noSuchMethod","comment":"<p><a>chrome/chrome_ext.ChromeWebNavigation.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.ChromeWebNavigation.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.ChromeWebNavigation.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.ChromeWebNavigation.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}