{"name":"ChromeDownloads","qualifiedName":"chrome/chrome_ext.ChromeDownloads","comment":"","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeApi","implements":[],"subclass":[],"variables":{"_onCreated":{"name":"_onCreated","qualifiedName":"chrome/chrome_ext.ChromeDownloads._onCreated","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.DownloadItem","inner":[]}]}],"annotations":[]},"_onErased":{"name":"_onErased","qualifiedName":"chrome/chrome_ext.ChromeDownloads._onErased","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.int","inner":[]}]}],"annotations":[]},"_onChanged":{"name":"_onChanged","qualifiedName":"chrome/chrome_ext.ChromeDownloads._onChanged","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.DownloadDelta","inner":[]}]}],"annotations":[]},"_onDeterminingFilename":{"name":"_onDeterminingFilename","qualifiedName":"chrome/chrome_ext.ChromeDownloads._onDeterminingFilename","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnDeterminingFilenameEvent","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_downloads":{"name":"_downloads","qualifiedName":"chrome/chrome_ext.ChromeDownloads._downloads","comment":"","commentFrom":"chrome_ext.ChromeDownloads._downloads","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"onCreated":{"name":"onCreated","qualifiedName":"chrome/chrome_ext.ChromeDownloads.onCreated","comment":"","commentFrom":"chrome_ext.ChromeDownloads.onCreated","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.DownloadItem","inner":[]}]}],"parameters":{},"annotations":[]},"onErased":{"name":"onErased","qualifiedName":"chrome/chrome_ext.ChromeDownloads.onErased","comment":"","commentFrom":"chrome_ext.ChromeDownloads.onErased","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"onChanged":{"name":"onChanged","qualifiedName":"chrome/chrome_ext.ChromeDownloads.onChanged","comment":"","commentFrom":"chrome_ext.ChromeDownloads.onChanged","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.DownloadDelta","inner":[]}]}],"parameters":{},"annotations":[]},"onDeterminingFilename":{"name":"onDeterminingFilename","qualifiedName":"chrome/chrome_ext.ChromeDownloads.onDeterminingFilename","comment":"","commentFrom":"chrome_ext.ChromeDownloads.onDeterminingFilename","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnDeterminingFilenameEvent","inner":[]}]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeDownloads.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_ext.ChromeDownloads.ChromeDownloads-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"download":{"name":"download","qualifiedName":"chrome/chrome_ext.ChromeDownloads.download","comment":"<p>Download a URL. If the URL uses the HTTPS protocol, then the request will\ninclude all cookies currently set for its hostname. If both <code>filename</code> and\n<code>saveAs</code> are specified, then the Save As dialog will be displayed,\npre-populated with the specified <code>filename</code>. If the download started\nsuccessfully, <code>callback</code> will be called with the new <a>chrome/chrome_ext.DownloadItem</a>'s\n<code>downloadId</code>. If there was an error starting the download, then <code>callback</code>\nwill be called with <code>downloadId=undefined</code> and runtime.lastError will\ncontain a descriptive string. The error strings are not guaranteed to\nremain backwards compatible between releases. Extensions must not parse it.\n<a>chrome/chrome_ext.ChromeDownloads.download.options</a>: What to download and how.\ncallback: Called with the id of the new <a>chrome/chrome_ext.DownloadItem</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"options":{"name":"options","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.DownloadOptions","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"search":{"name":"search","qualifiedName":"chrome/chrome_ext.ChromeDownloads.search","comment":"<p>Find <a>chrome/chrome_ext.DownloadItem</a>. Set <code>query</code> to the empty object to get all\n<a>chrome/chrome_ext.DownloadItem</a>. To get a specific <a>chrome/chrome_ext.DownloadItem</a>, set only the <code>id</code> field.\nTo page through a large number of items, set <code>orderBy: ['-startTime']</code>, set\n<code>limit</code> to the number of items per page, and set <code>startedAfter</code> to the\n<code>startTime</code> of the last item from the last page.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_ext.DownloadItem","inner":[]}]}]}],"parameters":{"query":{"name":"query","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.DownloadQuery","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"pause":{"name":"pause","qualifiedName":"chrome/chrome_ext.ChromeDownloads.pause","comment":"<p>Pause the download. If the request was successful the download is in a\npaused state. Otherwise runtime.lastError contains an error message. The\nrequest will fail if the download is not active.\n<a>chrome/chrome_ext.ChromeDownloads.pause.downloadId</a>: The id of the download to pause.\ncallback: Called when the pause request is completed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"downloadId":{"name":"downloadId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"resume":{"name":"resume","qualifiedName":"chrome/chrome_ext.ChromeDownloads.resume","comment":"<p>Resume a paused download. If the request was successful the download is in\nprogress and unpaused. Otherwise runtime.lastError contains an error\nmessage. The request will fail if the download is not active.\n<a>chrome/chrome_ext.ChromeDownloads.resume.downloadId</a>: The id of the download to resume.\ncallback: Called when the resume request is completed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"downloadId":{"name":"downloadId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cancel":{"name":"cancel","qualifiedName":"chrome/chrome_ext.ChromeDownloads.cancel","comment":"<p>Cancel a download. When <code>callback</code> is run, the download is cancelled,\ncompleted, interrupted or doesn't exist anymore.\n<a>chrome/chrome_ext.ChromeDownloads.cancel.downloadId</a>: The id of the download to cancel.\ncallback: Called when the cancel request is completed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"downloadId":{"name":"downloadId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getFileIcon":{"name":"getFileIcon","qualifiedName":"chrome/chrome_ext.ChromeDownloads.getFileIcon","comment":"<p>Retrieve an icon for the specified download. For new downloads, file icons\nare available after the <a>chrome/chrome_ext.ChromeDownloads.onCreated</a> event has been received. The image\nreturned by this function while a download is in progress may be different\nfrom the image returned after the download is complete. Icon retrieval is\ndone by querying the underlying operating system or toolkit depending on\nthe platform. The icon that is returned will therefore depend on a number\nof factors including state of the download, platform, registered file types\nand visual theme. If a file icon cannot be determined, runtime.lastError\nwill contain an error message.\n<a>chrome/chrome_ext.ChromeDownloads.getFileIcon.downloadId</a>: The identifier for the download.\ncallback: A URL to an image that represents the download.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"downloadId":{"name":"downloadId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"options":{"name":"options","optional":true,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.GetFileIconOptions","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"open":{"name":"open","qualifiedName":"chrome/chrome_ext.ChromeDownloads.open","comment":"<p>Open the downloaded file now if the <a>chrome/chrome_ext.DownloadItem</a> is complete; otherwise\nreturns an error through runtime.lastError. Requires the\n<code>\"downloads.open\"</code> permission in addition to the <code>\"downloads\"</code> permission.\nAn <a>chrome/chrome_ext.ChromeDownloads.onChanged</a> event will fire when the item is opened for the first time.\n<a>chrome/chrome_ext.ChromeDownloads.open.downloadId</a>: The identifier for the downloaded file.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"downloadId":{"name":"downloadId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"show":{"name":"show","qualifiedName":"chrome/chrome_ext.ChromeDownloads.show","comment":"<p>Show the downloaded file in its folder in a file manager.\n<a>chrome/chrome_ext.ChromeDownloads.show.downloadId</a>: The identifier for the downloaded file.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"downloadId":{"name":"downloadId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"showDefaultFolder":{"name":"showDefaultFolder","qualifiedName":"chrome/chrome_ext.ChromeDownloads.showDefaultFolder","comment":"<p>Show the default Downloads folder in a file manager.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"erase":{"name":"erase","qualifiedName":"chrome/chrome_ext.ChromeDownloads.erase","comment":"<p>Erase matching <a>chrome/chrome_ext.DownloadItem</a> from history without deleting the downloaded\nfile. An <a>chrome/chrome_ext.ChromeDownloads.onErased</a> event will fire for each <a>chrome/chrome_ext.DownloadItem</a> that matches\n<code>query</code>, then <code>callback</code> will be called.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"parameters":{"query":{"name":"query","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_ext.DownloadQuery","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeFile":{"name":"removeFile","qualifiedName":"chrome/chrome_ext.ChromeDownloads.removeFile","comment":"<p>Remove the downloaded file if it exists and the <a>chrome/chrome_ext.DownloadItem</a> is complete;\notherwise return an error through runtime.lastError.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"downloadId":{"name":"downloadId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"acceptDanger":{"name":"acceptDanger","qualifiedName":"chrome/chrome_ext.ChromeDownloads.acceptDanger","comment":"<p>Prompt the user to accept a dangerous download. Does not automatically\naccept dangerous downloads. If the download is accepted, then an\n<a>chrome/chrome_ext.ChromeDownloads.onChanged</a> event will fire, otherwise nothing will happen. When all the\ndata is fetched into a temporary file and either the download is not\ndangerous or the danger has been accepted, then the temporary file is\nrenamed to the target filename, the state changes to 'complete', and\n<a>chrome/chrome_ext.ChromeDownloads.onChanged</a> fires.\n<a>chrome/chrome_ext.ChromeDownloads.acceptDanger.downloadId</a>: The identifier for the <a>chrome/chrome_ext.DownloadItem</a>.\ncallback: Called when the danger prompt dialog closes.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"downloadId":{"name":"downloadId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"drag":{"name":"drag","qualifiedName":"chrome/chrome_ext.ChromeDownloads.drag","comment":"<p>Initiate dragging the downloaded file to another application. Call in a\njavascript <code>ondragstart</code> handler.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"downloadId":{"name":"downloadId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"setShelfEnabled":{"name":"setShelfEnabled","qualifiedName":"chrome/chrome_ext.ChromeDownloads.setShelfEnabled","comment":"<p>Enable or disable the gray shelf at the bottom of every window associated\nwith the current browser profile. The shelf will be disabled as long as at\nleast one extension has disabled it. Enabling the shelf while at least one\nother extension has disabled it will return an error through\nruntime.lastError. Requires the <code>\"downloads.shelf\"</code> permission in\naddition to the <code>\"downloads\"</code> permission.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"enabled":{"name":"enabled","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_ext.ChromeDownloads._throwNotAvailable","comment":"","commentFrom":"chrome_ext.ChromeDownloads._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.ChromeDownloads.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.ChromeDownloads.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.ChromeDownloads.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeDownloads.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_ext.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.ChromeDownloads.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.ChromeDownloads.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.ChromeDownloads.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.ChromeDownloads.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.ChromeDownloads.noSuchMethod","comment":"<p><a>chrome/chrome_ext.ChromeDownloads.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.ChromeDownloads.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.ChromeDownloads.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.ChromeDownloads.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}