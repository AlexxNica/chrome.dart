{"name":"ChromeProcesses","qualifiedName":"chrome/chrome_ext.ChromeProcesses","comment":"","isAbstract":false,"superclass":"chrome/chrome_ext.ChromeApi","implements":[],"subclass":[],"variables":{"_onUpdated":{"name":"_onUpdated","qualifiedName":"chrome/chrome_ext.ChromeProcesses._onUpdated","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onUpdatedWithMemory":{"name":"_onUpdatedWithMemory","qualifiedName":"chrome/chrome_ext.ChromeProcesses._onUpdatedWithMemory","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"dart-core.Map","inner":[]}]}],"annotations":[]},"_onCreated":{"name":"_onCreated","qualifiedName":"chrome/chrome_ext.ChromeProcesses._onCreated","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.Process","inner":[]}]}],"annotations":[]},"_onUnresponsive":{"name":"_onUnresponsive","qualifiedName":"chrome/chrome_ext.ChromeProcesses._onUnresponsive","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.Process","inner":[]}]}],"annotations":[]},"_onExited":{"name":"_onExited","qualifiedName":"chrome/chrome_ext.ChromeProcesses._onExited","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_ext.OnExitedEvent","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_processes":{"name":"_processes","qualifiedName":"chrome/chrome_ext.ChromeProcesses._processes","comment":"","commentFrom":"chrome_ext.ChromeProcesses._processes","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"onUpdated":{"name":"onUpdated","qualifiedName":"chrome/chrome_ext.ChromeProcesses.onUpdated","comment":"<p>Fired each time the Task Manager updates its process statistics, providing\nthe dictionary of updated Process objects, indexed by process ID.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onUpdatedWithMemory":{"name":"onUpdatedWithMemory","qualifiedName":"chrome/chrome_ext.ChromeProcesses.onUpdatedWithMemory","comment":"<p>Fired each time the Task Manager updates its process statistics, providing\nthe dictionary of updated Process objects, indexed by process ID. Identical\nto onUpdate, with the addition of memory usage details included in each\nProcess object. Note, collecting memory usage information incurs extra CPU\nusage and should only be listened for when needed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{},"annotations":[]},"onCreated":{"name":"onCreated","qualifiedName":"chrome/chrome_ext.ChromeProcesses.onCreated","comment":"<p>Fired each time a process is created, providing the corrseponding Process\nobject.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.Process","inner":[]}]}],"parameters":{},"annotations":[]},"onUnresponsive":{"name":"onUnresponsive","qualifiedName":"chrome/chrome_ext.ChromeProcesses.onUnresponsive","comment":"<p>Fired each time a process becomes unresponsive, providing the corrseponding\nProcess object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.Process","inner":[]}]}],"parameters":{},"annotations":[]},"onExited":{"name":"onExited","qualifiedName":"chrome/chrome_ext.ChromeProcesses.onExited","comment":"<p>Fired each time a process is terminated, providing the type of exit.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_ext.OnExitedEvent","inner":[]}]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeProcesses.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_ext.ChromeProcesses.ChromeProcesses-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"terminate":{"name":"terminate","qualifiedName":"chrome/chrome_ext.ChromeProcesses.terminate","comment":"<p>Terminates the specified renderer process. Equivalent to visiting\nabout:crash, but without changing the tab's URL.</p>\n<p><a>chrome/chrome_ext.ChromeProcesses.terminate.processId</a> The ID of the process to be terminated.</p>\n<p>Returns:\nTrue if terminating the process was successful, otherwise false.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"processId":{"name":"processId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getProcessIdForTab":{"name":"getProcessIdForTab","qualifiedName":"chrome/chrome_ext.ChromeProcesses.getProcessIdForTab","comment":"<p>Returns the ID of the renderer process for the specified tab.</p>\n<p><a>chrome/chrome_ext.ChromeProcesses.getProcessIdForTab.tabId</a> The ID of the tab for which the renderer process ID is to be\nreturned.</p>\n<p>Returns:\nProcess ID of the tab's renderer process.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"tabId":{"name":"tabId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getProcessInfo":{"name":"getProcessInfo","qualifiedName":"chrome/chrome_ext.ChromeProcesses.getProcessInfo","comment":"<p>Retrieves the process information for each process ID specified.</p>\n<p><a>chrome/chrome_ext.ChromeProcesses.getProcessInfo.processIds</a> The list of process IDs or single process ID for which to\nreturn the process information. An empty list indicates all processes are\nrequested.</p>\n<p><a>chrome/chrome_ext.ChromeProcesses.getProcessInfo.includeMemory</a> True if detailed memory usage is required. Note, collecting\nmemory usage information incurs extra CPU usage and should only be queried\nfor when needed.</p>\n<p>Returns:\nA dictionary of Process objects for each requested process that is a live\nchild process of the current browser process, indexed by process ID.\nMetrics requiring aggregation over time will not be populated in each\nProcess object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.Map","inner":[]}]}],"parameters":{"processIds":{"name":"processIds","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"includeMemory":{"name":"includeMemory","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_ext.ChromeProcesses._throwNotAvailable","comment":"","commentFrom":"chrome_ext.ChromeProcesses._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_ext.ChromeProcesses.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_ext.ChromeProcesses.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_ext.ChromeProcesses.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_ext.ChromeProcesses.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_ext.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_ext.ChromeProcesses.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_ext.ChromeProcesses.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_ext.ChromeProcesses.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"chrome/chrome_ext.ChromeProcesses.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_ext.ChromeProcesses.noSuchMethod","comment":"<p><a>chrome/chrome_ext.ChromeProcesses.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_ext.ChromeProcesses.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_ext.ChromeProcesses.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_ext.ChromeProcesses.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}