{"name":"ChromeSyncFileSystem","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem","comment":"","isAbstract":false,"superclass":"chrome/chrome_app.ChromeApi","implements":[],"subclass":[],"variables":{"_onServiceStatusChanged":{"name":"_onServiceStatusChanged","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem._onServiceStatusChanged","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_app.ServiceInfo","inner":[]}]}],"annotations":[]},"_onFileStatusChanged":{"name":"_onFileStatusChanged","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem._onFileStatusChanged","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"chrome/chrome-src-common.ChromeStreamController","inner":[{"outer":"chrome/chrome_app.FileInfo","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"_syncFileSystem":{"name":"_syncFileSystem","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem._syncFileSystem","comment":"","commentFrom":"chrome_app.ChromeSyncFileSystem._syncFileSystem","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-js.JsObject","inner":[]}],"parameters":{},"annotations":[]},"onServiceStatusChanged":{"name":"onServiceStatusChanged","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.onServiceStatusChanged","comment":"","commentFrom":"chrome_app.ChromeSyncFileSystem.onServiceStatusChanged","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_app.ServiceInfo","inner":[]}]}],"parameters":{},"annotations":[]},"onFileStatusChanged":{"name":"onFileStatusChanged","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.onFileStatusChanged","comment":"","commentFrom":"chrome_app.ChromeSyncFileSystem.onFileStatusChanged","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"chrome/chrome_app.FileInfo","inner":[]}]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"chrome_app.ChromeApi.available","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"_":{"name":"_","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.ChromeSyncFileSystem-_","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"requestFileSystem":{"name":"requestFileSystem","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.requestFileSystem","comment":"<p>Returns a syncable filesystem backed by Google Drive. The returned\n<code>FileSystem</code> instance can be operated on in the same way as the\nTemporary and Persistant file systems (see &lt;a\nhref=\"http://www.w3.org/TR/file-system-api/\">http://www.w3.org/TR/file-system-api/&lt;/a>).\nCalling this multiple times from the same app will return the same handle\nto the same file system.</p>\n<p>Returns:\nA callback type for requestFileSystem.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.FileSystem","inner":[]}]}],"parameters":{},"annotations":[]},"setConflictResolutionPolicy":{"name":"setConflictResolutionPolicy","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.setConflictResolutionPolicy","comment":"<p>Sets the default conflict resolution policy for the <code>'syncable'</code> file\nstorage for the app. By default it is set to <code>'last_write_win'</code>. When\nconflict resolution policy is set to <code>'last_write_win'</code> conflicts for\nexisting files are automatically resolved next time the file is updated.\ncallback can be optionally given to know if the request has succeeded or\nnot.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"policy":{"name":"policy","optional":false,"named":false,"default":false,"type":[{"outer":"chrome/chrome_app.ConflictResolutionPolicy","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getConflictResolutionPolicy":{"name":"getConflictResolutionPolicy","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.getConflictResolutionPolicy","comment":"<p>Gets the current conflict resolution policy.</p>\n<p>Returns:\nA callback type for getConflictResolutionPolicy.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.ConflictResolutionPolicy","inner":[]}]}],"parameters":{},"annotations":[]},"getUsageAndQuota":{"name":"getUsageAndQuota","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.getUsageAndQuota","comment":"<p>Returns the current usage and quota in bytes for the <code>'syncable'</code> file\nstorage for the app.</p>\n<p>Returns:\nA callback type for getUsageAndQuota.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.StorageInfo","inner":[]}]}],"parameters":{"fileSystem":{"name":"fileSystem","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.FileSystem","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getFileStatus":{"name":"getFileStatus","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.getFileStatus","comment":"<p>Returns the <a>chrome/chrome_app.FileStatus</a> for the given <code>fileEntry</code>. The status value can be\n<code>'synced'</code>, <code>'pending'</code> or <code>'conflicting'</code>. Note that <code>'conflicting'</code> state\nonly happens when the service's conflict resolution policy is set to\n<code>'manual'</code>.</p>\n<p>Returns:\nA callback type for getFileStatus.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.FileStatus","inner":[]}]}],"parameters":{"fileEntry":{"name":"fileEntry","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Entry","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getFileStatuses":{"name":"getFileStatuses","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.getFileStatuses","comment":"<p>Returns each <a>chrome/chrome_app.FileStatus</a> for the given <code>fileEntry</code> array. Typically called\nwith the result from dirReader.readEntries().</p>\n<p>Returns:\nA callback type for getFileStatuses.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.List","inner":[{"outer":"chrome/chrome_app.FileStatusInfo","inner":[]}]}]}],"parameters":{"fileEntries":{"name":"fileEntries","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dynamic","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"getServiceStatus":{"name":"getServiceStatus","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.getServiceStatus","comment":"<p>Returns the current sync backend status.</p>\n<p>Returns:\nA callback type for getServiceStatus.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"chrome/chrome_app.ServiceStatus","inner":[]}]}],"parameters":{},"annotations":[]},"_throwNotAvailable":{"name":"_throwNotAvailable","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem._throwNotAvailable","comment":"","commentFrom":"chrome_app.ChromeSyncFileSystem._throwNotAvailable","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>chrome/chrome_app.ChromeSyncFileSystem.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"available":{"name":"available","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.available","comment":"<p>Returns true if the API is available. The common causes of an API not being\navilable are:</p><ul><li>a permission is missing in the application's manifest.json file</li><li>the API is defined on a newer version of Chrome then the current runtime</li></ul>","commentFrom":"","inheritedFrom":"chrome_app.ChromeApi.available","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>chrome/chrome_app.ChromeSyncFileSystem.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>chrome/chrome_app.ChromeSyncFileSystem.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"chrome/chrome_app.ChromeSyncFileSystem.noSuchMethod","comment":"<p><a>chrome/chrome_app.ChromeSyncFileSystem.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>chrome/chrome_app.ChromeSyncFileSystem.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>chrome/chrome_app.ChromeSyncFileSystem.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>chrome/chrome_app.ChromeSyncFileSystem.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}