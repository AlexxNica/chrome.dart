{"dependencies":[{"kind":"library","id":"chrome.src.common_exp","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ChromeApi","id":"ChromeApi","comment":"\nA common super class for the Chrome APIs.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"available","id":"available","comment":"\nReturns true if the API is available. The common causes of an API not being\navilable are:\n\n * a permission is missing in the application's manifest.json file\n * the API is defined on a newer version of Chrome then the current runtime\n","line":"41"}],"line":"33"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"ChromeObject","id":"ChromeObject","comment":"\nThe abstract superclass of objects that can hold [JsObject] proxies.\n","children":[{"returnType":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"method","name":"toJs","id":"toJs0()","line":"25"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"27"},{"isFinal":true,"kind":"variable","name":"jsProxy","id":"jsProxy","line":"11"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreate a new instance of a `ChromeObject`, which creates and delegates to\na JsObject proxy.\n","line":"17"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","comment":"\nCreate a new instance of a `ChromeObject`, which delegates to the given\nJsObject proxy.\n","children":[{"initializedField":{"name":"jsProxy","refId":"chrome.src.common_exp/ChromeObject/jsProxy"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"23"}],"line":"10"}],"uri":"file:///home/ubuntu/src/github.com/dart-gde/chrome.dart/lib/src/common_exp.dart","line":"2"},{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","id":"chrome.sockets","children":[{"returnType":{"name":"AcceptErrorInfo","refId":"chrome.sockets/AcceptErrorInfo"},"kind":"method","name":"_createAcceptErrorInfo","id":"_createAcceptErrorInfo1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"590"},{"returnType":{"name":"AcceptInfo","refId":"chrome.sockets/AcceptInfo"},"kind":"method","name":"_createAcceptInfo","id":"_createAcceptInfo1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"589"},{"returnType":{"name":"ArrayBuffer","refId":"chrome.src.common_exp/ArrayBuffer"},"kind":"method","name":"_createArrayBuffer","id":"_createArrayBuffer1()","children":[{"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"391"},{"returnType":{"name":"ReceiveErrorInfo","refId":"chrome.sockets/ReceiveErrorInfo"},"kind":"method","name":"_createReceiveErrorInfo","id":"_createReceiveErrorInfo1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"390"},{"returnType":{"name":"ReceiveInfo","refId":"chrome.sockets/ReceiveInfo"},"kind":"method","name":"_createReceiveInfo","id":"_createReceiveInfo1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"389"},{"returnType":{"name":"SocketInfo","refId":"chrome.sockets/SocketInfo"},"kind":"method","name":"_createSocketInfo","id":"_createSocketInfo1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"388"},{"returnType":{"name":"SendInfo","refId":"chrome.sockets/SendInfo"},"kind":"method","name":"_createSendInfo","id":"_createSendInfo1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"387"},{"returnType":{"name":"CreateInfo","refId":"chrome.sockets/CreateInfo"},"kind":"method","name":"_createCreateInfo","id":"_createCreateInfo1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"isPrivate":true,"line":"386"},{"ref":{"name":"ChromeSockets","refId":"chrome.sockets/ChromeSockets"},"isFinal":true,"kind":"variable","name":"sockets","id":"sockets","line":"7"},{"superclass":{"name":"ChromeApi","refId":"chrome.src.common_exp/ChromeApi"},"kind":"class","name":"ChromeSocketsUdp","id":"ChromeSocketsUdp","comment":"\nUse the `chrome.sockets.udp` API to send and receive data over the network\nusing UDP connections. This API supersedes the UDP functionality previously\nfound in the \"socket\" API. Note that the socket ids created from this\nnamespace are not compatible with ids created in other namespaces.\n","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"CreateInfo","refId":"chrome.sockets/CreateInfo"}]},"kind":"method","name":"create","id":"create1()","comment":"\nCreates a UDP socket.\n[properties]: The socket properties (optional).\n[callback]: Called when the socket has been created.\n\nReturns:\nCallback from the `create` method.\n[createInfo]: The result of the socket creation.\n","children":[{"ref":{"name":"SocketProperties","refId":"chrome.sockets/SocketProperties"},"isOptional":true,"kind":"param","name":"properties","id":"properties"}],"line":"614"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"update","id":"update2()","comment":"\nUpdates the socket properties.\n[socketId]: The socket ID.\n[properties]: The properties to update.\n[callback]: Called when the properties are updated.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"SocketProperties","refId":"chrome.sockets/SocketProperties"},"kind":"param","name":"properties","id":"properties"}],"line":"628"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"bind","id":"bind3()","comment":"\nBinds the local address for socket. When the `bind` operation completes\nsuccessfully, `onReceive` events are raised when UDP packets arrive on the\naddress/port specified. If a network error occurs while the runtime is\nreceiving packets, an `onReceiveError` event is raised, at which point no\nmore `onReceive` events will be raised for this socket.\n[socketId]: The socket ID.\n[address]: The address of the local machine. DNS name, IPv4 and IPv6\nformats are supported. Use \"0.0.0.0\" to accept packets from all local\navailable network interfaces.\n[port]: The port of the local machine. Use \"0\" to bind to a free port.\n[callback]: Called when the `bind` operation completes.\n\nReturns:\nCallback from the `bind` method.\n[result]: The result code returned from the underlying network call. A\nnegative value indicates an error.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"address","id":"address"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"port","id":"port"}],"line":"654"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"SendInfo","refId":"chrome.sockets/SendInfo"}]},"kind":"method","name":"send","id":"send4()","comment":"\nSends data on the given UDP socket to the given address and port.\n[socketId]: The socket ID.\n[data]: The data to send.\n[address]: The address of the remote machine.\n[port]: The port of the remote machine.\n[callback]: Called when the `send` operation completes.\n\nReturns:\nCallback from the `send` method.\n[sendInfo]: Result of the `send` method.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"ArrayBuffer","refId":"chrome.src.common_exp/ArrayBuffer"},"kind":"param","name":"data","id":"data"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"address","id":"address"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"port","id":"port"}],"line":"674"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"close","id":"close1()","comment":"\nCloses the socket and releases the address/port the socket is bound to.\nEach socket created should be closed after use. The socket id is no no\nlonger valid as soon at the function is called. However, the socket is\nguaranteed to be closed only when the callback is invoked.\n[socketId]: The socket ID.\n[callback]: Called when the `close` operation completes.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"}],"line":"690"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"SocketInfo","refId":"chrome.sockets/SocketInfo"}]},"kind":"method","name":"getInfo","id":"getInfo1()","comment":"\nRetrieves the state of the given socket.\n[socketId]: The socket ID.\n[callback]: Called when the socket state is available.\n\nReturns:\nCallback from the `getInfo` method.\n[socketInfo]: Object containing the socket information.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"}],"line":"707"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"SocketInfo","refId":"chrome.sockets/SocketInfo"}]}]},"kind":"method","name":"getSockets","id":"getSockets0()","comment":"\nRetrieves the list of currently opened sockets owned by the application.\n[callback]: Called when the list of sockets is available.\n\nReturns:\nCallback from the `getSockets` method.\n[socketInfos]: Array of object containing socket information.\n","line":"723"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"joinGroup","id":"joinGroup2()","comment":"\nJoins the multicast group and starts to receive packets from that group.\nThe socket must be bound to a local port before calling this method.\n[socketId]: The socket ID.\n[address]: The group address to join. Domain names are not supported.\n[callback]: Called when the `joinGroup` operation completes.\n\nReturns:\nCallback from the `joinGroup` method.\n[result]: The result code returned from the underlying network call. A\nnegative value indicates an error.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"address","id":"address"}],"line":"743"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"leaveGroup","id":"leaveGroup2()","comment":"\nLeaves the multicast group previously joined using `joinGroup`. This is\nonly necessary to call if you plan to keep using the socketafterwards,\nsince it will be done automatically by the OS when the socket is closed.\n\nLeaving the group will prevent the router from sending multicast datagrams\nto the local host, presuming no other process on the host is still joined\nto the group.\n\n[socketId]: The socket ID.\n[address]: The group address to leave. Domain names are not supported.\n[callback]: Called when the `leaveGroup` operation completes.\n\nReturns:\nCallback from the `leaveGroup` method.\n[result]: The result code returned from the underlying network call. A\nnegative value indicates an error.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"address","id":"address"}],"line":"769"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"setMulticastTimeToLive","id":"setMulticastTimeToLive2()","comment":"\nSets the time-to-live of multicast packets sent to the multicast group.\n\nCalling this method does not require multicast permissions.\n\n[socketId]: The socket ID.\n[ttl]: The time-to-live value.\n[callback]: Called when the configuration operation completes.\n\nReturns:\nCallback from the `setMulticastTimeToLive` method.\n[result]: The result code returned from the underlying network call. A\nnegative value indicates an error.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"ttl","id":"ttl"}],"line":"791"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"setMulticastLoopbackMode","id":"setMulticastLoopbackMode2()","comment":"\nSets whether multicast packets sent from the host to the multicast group\nwill be looped back to the host.\n\nNote: the behavior of `setMulticastLoopbackMode` is slightly different\nbetween Windows and Unix-like systems. The inconsistency happens only when\nthere is more than one application on the same host joined to the same\nmulticast group while having different settings on multicast loopback mode.\nOn Windows, the applications with loopback off will not RECEIVE the\nloopback packets; while on Unix-like systems, the applications with\nloopback off will not SEND the loopback packets to other applications on\nthe same host. See MSDN: http://goo.gl/6vqbj\n\nCalling this method does not require multicast permissions.\n\n[socketId]: The socket ID.\n[enabled]: Indicate whether to enable loopback mode.\n[callback]: Called when the configuration operation completes.\n\nReturns:\nCallback from the `setMulticastLoopbackMode` method.\n[result]: The result code returned from the underlying network call. A\nnegative value indicates an error.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"enabled","id":"enabled"}],"line":"823"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]}]},"kind":"method","name":"getJoinedGroups","id":"getJoinedGroups1()","comment":"\nGets the multicast group addresses the socket is currently joined to.\n[socketId]: The socket ID.\n[callback]: Called with an array of strings of the result.\n\nReturns:\nCallback from the `getJoinedGroupsCallback` method.\n[groups]: Array of groups the socket joined.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"}],"line":"840"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_throwNotAvailable","id":"_throwNotAvailable0()","isPrivate":true,"line":"858"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"available","id":"available","line":"603"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"ReceiveInfo","refId":"chrome.sockets/ReceiveInfo"}]},"kind":"property","name":"onReceive","id":"onReceive","line":"848"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"ReceiveErrorInfo","refId":"chrome.sockets/ReceiveErrorInfo"}]},"kind":"property","name":"onReceiveError","id":"onReceiveError","line":"853"},{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"isStatic":true,"isFinal":true,"kind":"variable","name":"_sockets_udp","id":"_sockets_udp","isPrivate":true,"line":"599"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController","arguments":[{"name":"ReceiveInfo","refId":"chrome.sockets/ReceiveInfo"}]},"isFinal":true,"kind":"variable","name":"_onReceive","id":"_onReceive","isPrivate":true,"line":"850"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController","arguments":[{"name":"ReceiveErrorInfo","refId":"chrome.sockets/ReceiveErrorInfo"}]},"isFinal":true,"kind":"variable","name":"_onReceiveError","id":"_onReceiveError","isPrivate":true,"line":"855"},{"kind":"constructor","name":"_","id":"_0()","isPrivate":true,"line":"601"}],"line":"598"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"AcceptErrorInfo","id":"AcceptErrorInfo","comment":"\nData from an `onAcceptError` event.\n","children":[{"isSetter":true,"kind":"method","name":"socketId=","id":"socketId=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"583"},{"isSetter":true,"kind":"method","name":"resultCode=","id":"resultCode=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"586"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"socketId","id":"socketId","line":"582"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"resultCode","id":"resultCode","line":"585"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"resultCode","id":"resultCode"}],"line":"576"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"580"}],"line":"575"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"AcceptInfo","id":"AcceptInfo","comment":"\nData from an `onAccept` event.\n","children":[{"isSetter":true,"kind":"method","name":"socketId=","id":"socketId=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"566"},{"isSetter":true,"kind":"method","name":"clientSocketId=","id":"clientSocketId=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"569"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"socketId","id":"socketId","line":"565"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"clientSocketId","id":"clientSocketId","line":"568"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"clientSocketId","id":"clientSocketId"}],"line":"559"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"563"}],"line":"558"},{"superclass":{"name":"ChromeApi","refId":"chrome.src.common_exp/ChromeApi"},"kind":"class","name":"ChromeSocketsTcpServer","id":"ChromeSocketsTcpServer","comment":"\nUse the `chrome.sockets.tcpServer` API to create server applications using\nTCP connections. This API supersedes the TCP functionality previously found\nin the `chrome.socket` API. Note that the socket ids created from this\nnamespace are not compatible with ids created in other namespaces.\n","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"CreateInfo","refId":"chrome.sockets/CreateInfo"}]},"kind":"method","name":"create","id":"create1()","comment":"\nCreates a TCP server socket.\n[properties]: The socket properties (optional).\n[callback]: Called when the socket has been created.\n\nReturns:\nCallback from the `create` method.\n[createInfo]: The result of the socket creation.\n","children":[{"ref":{"name":"SocketProperties","refId":"chrome.sockets/SocketProperties"},"isOptional":true,"kind":"param","name":"properties","id":"properties"}],"line":"415"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"update","id":"update2()","comment":"\nUpdates the socket properties.\n[socketId]: The socket identifier.\n[properties]: The properties to update.\n[callback]: Called when the properties are updated.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"SocketProperties","refId":"chrome.sockets/SocketProperties"},"kind":"param","name":"properties","id":"properties"}],"line":"429"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"setPaused","id":"setPaused2()","comment":"\nEnables or disables a listening socket from accepting new connections. When\npaused, a listening socket accepts new connections until its backlog (see\n`listen` function) is full then refuses additional connection requests.\n`onAccept` events are raised only when the socket is un-paused.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"paused","id":"paused"}],"line":"443"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"listen","id":"listen4()","comment":"\nListens for connections on the specified port and address. If the\nport/address is in use, the callback indicates a failure.\n[socketId]: The socket identifier.\n[address]: The address of the local machine.\n[port]: The port of the local machine.\n[backlog]: Length of the socket's listen queue. The default value depends\non the Operating System (SOMAXCONN), which ensures a reasonable queue\nlength for most applications.\n[callback]: Called when listen operation completes.\n\nReturns:\nCallback from the `listen` method.\n[result]: The result code returned from the underlying network call. A\nnegative value indicates an error.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"address","id":"address"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"port","id":"port"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"backlog","id":"backlog"}],"line":"467"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"disconnect","id":"disconnect1()","comment":"\nDisconnects the listening socket, i.e. stops accepting new connections and\nreleases the address/port the socket is bound to. The socket identifier\nremains valid, e.g. it can be used with `listen` to accept connections on a\nnew port and address.\n[socketId]: The socket identifier.\n[callback]: Called when the disconnect attempt is complete.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"}],"line":"483"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"close","id":"close1()","comment":"\nDisconnects and destroys the socket. Each socket created should be closed\nafter use. The socket id is no longer valid as soon at the function is\ncalled. However, the socket is guaranteed to be closed only when the\ncallback is invoked.\n[socketId]: The socket identifier.\n[callback]: Called when the `close` operation completes.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"}],"line":"499"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"SocketInfo","refId":"chrome.sockets/SocketInfo"}]},"kind":"method","name":"getInfo","id":"getInfo1()","comment":"\nRetrieves the state of the given socket.\n[socketId]: The socket identifier.\n[callback]: Called when the socket state is available.\n\nReturns:\nCallback from the `getInfo` method.\n[socketInfo]: Object containing the socket information.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"}],"line":"516"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"SocketInfo","refId":"chrome.sockets/SocketInfo"}]}]},"kind":"method","name":"getSockets","id":"getSockets0()","comment":"\nRetrieves the list of currently opened sockets owned by the application.\n[callback]: Called when the list of sockets is available.\n\nReturns:\nCallback from the `getSockets` method.\n[socketInfos]: Array of object containing socket information.\n","line":"532"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_throwNotAvailable","id":"_throwNotAvailable0()","isPrivate":true,"line":"550"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"available","id":"available","line":"404"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"AcceptInfo","refId":"chrome.sockets/AcceptInfo"}]},"kind":"property","name":"onAccept","id":"onAccept","line":"540"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"AcceptErrorInfo","refId":"chrome.sockets/AcceptErrorInfo"}]},"kind":"property","name":"onAcceptError","id":"onAcceptError","line":"545"},{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"isStatic":true,"isFinal":true,"kind":"variable","name":"_sockets_tcpServer","id":"_sockets_tcpServer","isPrivate":true,"line":"400"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController","arguments":[{"name":"AcceptInfo","refId":"chrome.sockets/AcceptInfo"}]},"isFinal":true,"kind":"variable","name":"_onAccept","id":"_onAccept","isPrivate":true,"line":"542"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController","arguments":[{"name":"AcceptErrorInfo","refId":"chrome.sockets/AcceptErrorInfo"}]},"isFinal":true,"kind":"variable","name":"_onAcceptError","id":"_onAcceptError","isPrivate":true,"line":"547"},{"kind":"constructor","name":"_","id":"_0()","isPrivate":true,"line":"402"}],"line":"399"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"ReceiveErrorInfo","id":"ReceiveErrorInfo","comment":"\nData from an `onReceiveError` event.\n","children":[{"isSetter":true,"kind":"method","name":"socketId=","id":"socketId=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"380"},{"isSetter":true,"kind":"method","name":"resultCode=","id":"resultCode=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"383"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"socketId","id":"socketId","line":"379"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"resultCode","id":"resultCode","line":"382"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"resultCode","id":"resultCode"}],"line":"373"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"377"}],"line":"372"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"ReceiveInfo","id":"ReceiveInfo","comment":"\nData from an `onReceive` event.\n","children":[{"isSetter":true,"kind":"method","name":"socketId=","id":"socketId=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"363"},{"isSetter":true,"kind":"method","name":"data=","id":"data=1()","children":[{"ref":{"name":"ArrayBuffer","refId":"chrome.src.common_exp/ArrayBuffer"},"kind":"param","name":"value","id":"value"}],"line":"366"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"socketId","id":"socketId","line":"362"},{"ref":{"name":"ArrayBuffer","refId":"chrome.src.common_exp/ArrayBuffer"},"kind":"property","name":"data","id":"data","line":"365"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"ArrayBuffer","refId":"chrome.src.common_exp/ArrayBuffer"},"isOptional":true,"isNamed":true,"kind":"param","name":"data","id":"data"}],"line":"356"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"360"}],"line":"355"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"SocketInfo","id":"SocketInfo","comment":"\nResult of the `getInfo` method.\n","children":[{"isSetter":true,"kind":"method","name":"socketId=","id":"socketId=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"322"},{"isSetter":true,"kind":"method","name":"persistent=","id":"persistent=1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"value","id":"value"}],"line":"325"},{"isSetter":true,"kind":"method","name":"name=","id":"name=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"328"},{"isSetter":true,"kind":"method","name":"bufferSize=","id":"bufferSize=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"331"},{"isSetter":true,"kind":"method","name":"paused=","id":"paused=1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"value","id":"value"}],"line":"334"},{"isSetter":true,"kind":"method","name":"connected=","id":"connected=1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"value","id":"value"}],"line":"337"},{"isSetter":true,"kind":"method","name":"localAddress=","id":"localAddress=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"340"},{"isSetter":true,"kind":"method","name":"localPort=","id":"localPort=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"343"},{"isSetter":true,"kind":"method","name":"peerAddress=","id":"peerAddress=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"346"},{"isSetter":true,"kind":"method","name":"peerPort=","id":"peerPort=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"349"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"socketId","id":"socketId","line":"321"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"persistent","id":"persistent","line":"324"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"name","id":"name","line":"327"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"bufferSize","id":"bufferSize","line":"330"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"paused","id":"paused","line":"333"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"connected","id":"connected","line":"336"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"localAddress","id":"localAddress","line":"339"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"localPort","id":"localPort","line":"342"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"peerAddress","id":"peerAddress","line":"345"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"peerPort","id":"peerPort","line":"348"},{"kind":"constructor","name":"","id":"10()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"persistent","id":"persistent"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"name","id":"name"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"bufferSize","id":"bufferSize"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"paused","id":"paused"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"connected","id":"connected"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"localAddress","id":"localAddress"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"localPort","id":"localPort"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"peerAddress","id":"peerAddress"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"peerPort","id":"peerPort"}],"line":"307"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"319"}],"line":"306"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"SendInfo","id":"SendInfo","comment":"\nResult of the `send` method.\n","children":[{"isSetter":true,"kind":"method","name":"resultCode=","id":"resultCode=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"297"},{"isSetter":true,"kind":"method","name":"bytesSent=","id":"bytesSent=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"300"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"resultCode","id":"resultCode","line":"296"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"bytesSent","id":"bytesSent","line":"299"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"resultCode","id":"resultCode"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"bytesSent","id":"bytesSent"}],"line":"290"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"294"}],"line":"289"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"CreateInfo","id":"CreateInfo","comment":"\nResult of `create` call.\n","children":[{"isSetter":true,"kind":"method","name":"socketId=","id":"socketId=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"283"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"socketId","id":"socketId","line":"282"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"socketId","id":"socketId"}],"line":"277"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"280"}],"line":"276"},{"superclass":{"name":"ChromeObject","refId":"chrome.src.common_exp/ChromeObject"},"kind":"class","name":"SocketProperties","id":"SocketProperties","comment":"\nThe socket properties specified in the `create` or `update` function. Each\nproperty is optional. If a property value is not specified, a default value\nis used when calling `create`, or the existing value if preserved when\ncalling `update`.\n","children":[{"isSetter":true,"kind":"method","name":"persistent=","id":"persistent=1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"value","id":"value"}],"line":"264"},{"isSetter":true,"kind":"method","name":"name=","id":"name=1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"line":"267"},{"isSetter":true,"kind":"method","name":"bufferSize=","id":"bufferSize=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"270"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"persistent","id":"persistent","line":"263"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"name","id":"name","line":"266"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"bufferSize","id":"bufferSize","line":"269"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"persistent","id":"persistent"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"name","id":"name"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"bufferSize","id":"bufferSize"}],"line":"256"},{"kind":"constructor","name":"fromProxy","id":"fromProxy1()","children":[{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"kind":"param","name":"jsProxy","id":"jsProxy"}],"line":"261"}],"line":"255"},{"superclass":{"name":"ChromeApi","refId":"chrome.src.common_exp/ChromeApi"},"kind":"class","name":"ChromeSocketsTcp","id":"ChromeSocketsTcp","comment":"\nUse the `chrome.sockets.tcp` API to send and receive data over the network\nusing TCP connections. This API supersedes the TCP functionality previously\nfound in the `chrome.socket` API. Note that the socket ids created from this\nnamespace are not compatible with ids created in other namespaces.\n","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"CreateInfo","refId":"chrome.sockets/CreateInfo"}]},"kind":"method","name":"create","id":"create1()","comment":"\nCreates a TCP socket.\n[properties]: The socket properties (optional).\n[callback]: Called when the socket has been created.\n\nReturns:\nCallback from the `create` method.\n[createInfo]: The result of the socket creation.\n","children":[{"ref":{"name":"SocketProperties","refId":"chrome.sockets/SocketProperties"},"isOptional":true,"kind":"param","name":"properties","id":"properties"}],"line":"50"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"update","id":"update2()","comment":"\nUpdates the socket properties.\n[socketId]: The socket identifier.\n[properties]: The properties to update.\n[callback]: Called when the properties are updated.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"SocketProperties","refId":"chrome.sockets/SocketProperties"},"kind":"param","name":"properties","id":"properties"}],"line":"64"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"setPaused","id":"setPaused2()","comment":"\nEnables or disables the application from receiving messages from its peer.\nThe default value is \"false\". Pausing a socket is typically used by an\napplication to throttle data sent by its peer. When a socket is paused, no\n`onReceive` event is raised. When a socket is connected and un-paused,\n`onReceive` events are raised again when messages are received.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"paused","id":"paused"}],"line":"79"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"setKeepAlive","id":"setKeepAlive3()","comment":"\nEnables or disables the keep-alive functionality for a TCP connection.\n[socketId]: The socket identifier.\n[enable]: If true, enable keep-alive functionality.\n[delay]: Set the delay seconds between the last data packet received and\nthe first keepalive probe. Default is 0.\n[callback]: Called when the setKeepAlive attempt is complete.\n\nReturns:\nCallback from the `setKeepAliveCallback` method.\n[result]: The result code returned from the underlying network call. A\nnegative value indicates an error.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"enable","id":"enable"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"delay","id":"delay"}],"line":"100"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"setNoDelay","id":"setNoDelay2()","comment":"\nSets or clears `TCP_NODELAY` for a TCP connection. Nagle's algorithm will\nbe disabled when `TCP_NODELAY` is set.\n[socketId]: The socket identifier.\n[noDelay]: If true, disables Nagle's algorithm.\n[callback]: Called when the setNoDelay attempt is complete.\n\nReturns:\nCallback from the `setNodeDelay` method.\n[result]: The result code returned from the underlying network call. A\nnegative value indicates an error.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"noDelay","id":"noDelay"}],"line":"120"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"connect","id":"connect3()","comment":"\nConnects the socket to a remote machine. When the `connect` operation\ncompletes successfully, `onReceive` events are raised when data is received\nfrom the peer. If a network error occurs while the runtime is receiving\npackets, a `onReceiveError` event is raised, at which point no more\n`onReceive` event will be raised for this socket until the `resume` method\nis called.\n[socketId]: The socket identifier.\n[peerAddress]: The address of the remote machine. DNS name, IPv4 and IPv6\nformats are supported.\n[peerPort]: The port of the remote machine.\n[callback]: Called when the connect attempt is complete.\n\nReturns:\nCallback from the `connect` method.\n[result]: The result code returned from the underlying network call. A\nnegative value indicates an error.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"peerAddress","id":"peerAddress"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"peerPort","id":"peerPort"}],"line":"146"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"disconnect","id":"disconnect1()","comment":"\nDisconnects the socket.\n[socketId]: The socket identifier.\n[callback]: Called when the disconnect attempt is complete.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"}],"line":"159"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"SendInfo","refId":"chrome.sockets/SendInfo"}]},"kind":"method","name":"send","id":"send2()","comment":"\nSends data on the given TCP socket.\n[socketId]: The socket identifier.\n[data]: The data to send.\n[callback]: Called when the `send` operation completes.\n\nReturns:\nCallback from the `send` method.\n[sendInfo]: Result of the `send` method.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"},{"ref":{"name":"ArrayBuffer","refId":"chrome.src.common_exp/ArrayBuffer"},"kind":"param","name":"data","id":"data"}],"line":"177"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"close","id":"close1()","comment":"\nCloses the socket and releases the address/port the socket is bound to.\nEach socket created should be closed after use. The socket id is no no\nlonger valid as soon at the function is called. However, the socket is\nguaranteed to be closed only when the callback is invoked.\n[socketId]: The socket identifier.\n[callback]: Called when the `close` operation completes.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"}],"line":"193"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"SocketInfo","refId":"chrome.sockets/SocketInfo"}]},"kind":"method","name":"getInfo","id":"getInfo1()","comment":"\nRetrieves the state of the given socket.\n[socketId]: The socket identifier.\n[callback]: Called when the socket state is available.\n\nReturns:\nCallback from the `getInfo` method.\n[socketInfo]: Object containing the socket information.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"socketId","id":"socketId"}],"line":"210"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"SocketInfo","refId":"chrome.sockets/SocketInfo"}]}]},"kind":"method","name":"getSockets","id":"getSockets0()","comment":"\nRetrieves the list of currently opened sockets owned by the application.\n[callback]: Called when the list of sockets is available.\n\nReturns:\nCallback from the `getSockets` method.\n[socketInfos]: Array of object containing socket information.\n","line":"226"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_throwNotAvailable","id":"_throwNotAvailable0()","isPrivate":true,"line":"244"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"available","id":"available","line":"39"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"ReceiveInfo","refId":"chrome.sockets/ReceiveInfo"}]},"kind":"property","name":"onReceive","id":"onReceive","line":"234"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"ReceiveErrorInfo","refId":"chrome.sockets/ReceiveErrorInfo"}]},"kind":"property","name":"onReceiveError","id":"onReceiveError","line":"239"},{"ref":{"name":"JsObject","refId":"dart.js/JsObject"},"isStatic":true,"isFinal":true,"kind":"variable","name":"_sockets_tcp","id":"_sockets_tcp","isPrivate":true,"line":"35"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController","arguments":[{"name":"ReceiveInfo","refId":"chrome.sockets/ReceiveInfo"}]},"isFinal":true,"kind":"variable","name":"_onReceive","id":"_onReceive","isPrivate":true,"line":"236"},{"ref":{"name":"ChromeStreamController","refId":"chrome.src.common/ChromeStreamController","arguments":[{"name":"ReceiveErrorInfo","refId":"chrome.sockets/ReceiveErrorInfo"}]},"isFinal":true,"kind":"variable","name":"_onReceiveError","id":"_onReceiveError","isPrivate":true,"line":"241"},{"kind":"constructor","name":"_","id":"_0()","isPrivate":true,"line":"37"}],"line":"34"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"ChromeSockets","id":"ChromeSockets","children":[{"ref":{"name":"ChromeSocketsTcp","refId":"chrome.sockets/ChromeSocketsTcp"},"isFinal":true,"kind":"variable","name":"tcp","id":"tcp","comment":"\nAccessor for the `chrome.sockets.tcp` namespace.\n","line":"15"},{"ref":{"name":"ChromeSocketsTcpServer","refId":"chrome.sockets/ChromeSocketsTcpServer"},"isFinal":true,"kind":"variable","name":"tcpServer","id":"tcpServer","comment":"\nAccessor for the `chrome.sockets.tcpServer` namespace.\n","line":"20"},{"ref":{"name":"ChromeSocketsUdp","refId":"chrome.sockets/ChromeSocketsUdp"},"isFinal":true,"kind":"variable","name":"udp","id":"udp","comment":"\nAccessor for the `chrome.sockets.udp` namespace.\n","line":"25"},{"kind":"constructor","name":"_","id":"_0()","isPrivate":true,"line":"10"}],"line":"9"}],"uri":"file:///home/ubuntu/src/github.com/dart-gde/chrome.dart/lib/gen/sockets.dart","line":"3"}