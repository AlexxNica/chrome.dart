{"dependencies":[{"id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","uri":"dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"48","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"67","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"79","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"62","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"84","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"153","kind":"library"},{"id":"js","comment":"\nThe js.dart library provides simple JavaScript invocation from Dart that\nworks on both Dartium and on other modern browsers via Dart2JS.\n\nIt provides a model based on scoped [Proxy] objects.  Proxies give Dart\ncode access to JavaScript objects, fields, and functions as well as the\nability to pass Dart objects and functions to JavaScript functions.  Scopes\nenable developers to use proxies without memory leaks - a common challenge\nwith cross-runtime interoperation.\n\nThe top-level [context] getter provides a [Proxy] to the global JavaScript\ncontext for the page your Dart code is running on.  In the following example:\n\n    import 'package:js/js.dart' as js;\n\n    void main() {\n      js.context.alert('Hello from Dart via JavaScript');\n    }\n\njs.context.alert creates a proxy to the top-level alert function in\nJavaScript.  It is invoked from Dart as a regular function that forwards to\nthe underlying JavaScript one.  By default, proxies are released when\nthe currently executing event completes, e.g., when main is completes\nin this example.\n\nThe library also enables JavaScript proxies to Dart objects and functions.\nFor example, the following Dart code:\n\n    js.context.dartCallback = new Callback.once((x) => print(x*2));\n\ndefines a top-level JavaScript function 'dartCallback' that is a proxy to\nthe corresponding Dart function.  The [Callback.once] constructor allows the\nproxy to the Dart function to be retained across multiple events;\ninstead it is released after the first invocation.  (This is a common\npattern for asychronous callbacks.)\n\nNote, parameters and return values are intuitively passed by value for\nprimitives and by reference for non-primitives.  In the latter case, the\nreferences are automatically wrapped and unwrapped as proxies by the library.\n\nThis library also allows construction of JavaScripts objects given a [Proxy]\nto a corresponding JavaScript constructor.  For example, if the following\nJavaScript is loaded on the page:\n\n    function Foo(x) {\n      this.x = x;\n    }\n\n    Foo.prototype.add = function(other) {\n      return new Foo(this.x + other.x);\n    }\n\nthen, the following Dart:\n\n    var foo = new js.Proxy(js.context.Foo, 42);\n    var foo2 = foo.add(foo);\n    print(foo2.x);\n\nwill construct a JavaScript Foo object with the parameter 42, invoke its\nadd method, and return a [Proxy] to a new Foo object whose x field is 84.\n\nSee [samples](http://dart-lang.github.com/js-interop/example) for more\nexamples of usage.\n\nSee this [article](http://www.dartlang.org/articles/js-dart-interop) for\nmore detailed discussion.\n","uri":"package:js/js.dart","name":"package:js/js.dart","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Serializable","comment":"Marker class used to indicate it is serializable to js. If a class is a\n[Serializable] the \"toJs\" method will be called and the result will be used\nas value.","name":"Serializable","children":[{"returnType":{"refId":"js/Serializable/T","name":"T"},"id":"toJs0()","name":"toJs","line":"1067","kind":"method"},{"id":"T","name":"T","kind":"typeparam"}],"line":"1066","kind":"class"}],"line":"73","kind":"library"}],"id":"chrome.file_system","uri":"file:///home/ubuntu/src/github.com/dart-gde/chrome.dart/lib/src/file_system.dart","children":[{"ref":{"refId":"chrome.file_system/ChromeFileSystem","name":"ChromeFileSystem"},"isFinal":true,"id":"fileSystem","comment":"Accessor for the `chrome.fileSystem` namespace.\n\nAdditional documentation is available here:\n  http://developer.chrome.com/apps/fileSystem.html.","name":"fileSystem","line":"15","kind":"variable"},{"interfaces":[{"refId":"js/Serializable","name":"Serializable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"ChooseEntryAccepts","comment":"\nFor use in the [ChromeFileSystem.chooseEntry] and\n[ChromeFileSystem.chooseEntry] methods.\n","name":"ChooseEntryAccepts","children":[{"id":"toJs0()","name":"toJs","line":"214","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"description","comment":"\nThis is the optional text description for this option. If not present, a\ndescription will be automatically generated; typically containing an\nexpanded list of valid extensions (e.g. \"text/html\" may expand to \"*.html,\n*.htm\").\n","name":"description","line":"199","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"mimeTypes","comment":"\nMime-types to accept, e.g. \"image/jpeg\" or \"audio/ *\". One of mimeTypes or\nextensions must contain at least one valid element.\n","name":"mimeTypes","line":"205","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"id":"extensions","comment":"\nExtensions to accept, e.g. \"jpg\", \"gif\", \"crx\".\n","name":"extensions","line":"210","kind":"variable"},{"id":"3()","name":"","children":[{"initializedField":{"refId":"chrome.file_system/ChooseEntryAccepts/description","name":"description"},"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"description","name":"description","kind":"param"},{"initializedField":{"refId":"chrome.file_system/ChooseEntryAccepts/mimeTypes","name":"mimeTypes"},"isNamed":true,"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isOptional":true,"id":"mimeTypes","name":"mimeTypes","kind":"param"},{"initializedField":{"refId":"chrome.file_system/ChooseEntryAccepts/extensions","name":"extensions"},"isNamed":true,"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isOptional":true,"id":"extensions","name":"extensions","kind":"param"}],"line":"212","kind":"constructor"}],"line":"192","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"ChromeFileSystem","comment":"\nUse the chrome.fileSystem API to create, read, navigate, and write to a\nsandboxed section of the user's local file system. With this API, packaged\napps can read and write to a user-selected location. For example, a text\neditor app can use the API to read and write local documents.\n","name":"ChromeFileSystem","children":[{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Future"},"id":"getDisplayPath1()","comment":"\nGet the display path of an Entry object. The display path is based on the\nfull path of the file or directory on the local file system, but may be\nmade more readable for display purposes.\n","name":"getDisplayPath","children":[{"ref":{"refId":"chrome.files/Entry","name":"Entry"},"id":"entry","name":"entry","kind":"param"}],"line":"32","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"chrome.files/Entry","name":"Entry"}],"name":"Future"},"id":"getWritableEntry1()","comment":"\nGet a writable Entry from another Entry. This call will fail if the\napplication does not have the 'write' permission under 'fileSystem'. If\nentry is a DirectoryEntry, this call will fail if the application does not\nhave the 'directory' permission under 'fileSystem'.\n\nNote that this will soon be deprecated.\n","name":"getWritableEntry","children":[{"ref":{"refId":"chrome.files/Entry","name":"Entry"},"id":"entry","name":"entry","line":"47","kind":"param"}],"line":"46","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"id":"isWritableEntry1()","comment":"\nGets whether this Entry is writable or not.\n\nNote that this will soon be deprecated.\n","name":"isWritableEntry","children":[{"ref":{"refId":"chrome.files/Entry","name":"Entry"},"id":"entry","name":"entry","line":"59","kind":"param"}],"line":"58","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"chrome.files/FileEntry","name":"FileEntry"}],"name":"Future"},"id":"chooseEntry4()","comment":"\nAsk the user to choose a file.\n\n[type] is one of 'openFile', 'openWritableFile', 'saveFile'. Note that\n'openWritableFile' will soon be deprecated.\n\nThis will return a dom FileEntry. js.retain() has been called on it; it is\nthe caller's responsibility to call js.release();\n","name":"chooseEntry","children":[{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"'openFile'","id":"type","name":"type","line":"75","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"suggestedName","name":"suggestedName","line":"76","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/List","arguments":[{"refId":"chrome.file_system/ChooseEntryAccepts","name":"ChooseEntryAccepts"}],"name":"List"},"isOptional":true,"id":"accepts","name":"accepts","line":"77","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"acceptsAllTypes","name":"acceptsAllTypes","line":"78","kind":"param"}],"line":"74","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"chrome.files/DirectoryEntry","name":"DirectoryEntry"}],"name":"Future"},"id":"chooseEntryDirectory3()","comment":"\nAsk the user to choose (open) a directory. This is sugar for the\nchrome.fileSystem.chooseEntry call.\n\nThis will return a dom DirectoryEntry. js.retain() has been called on it;\nit is the caller's responsibility to call js.release();\n","name":"chooseEntryDirectory","children":[{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"suggestedName","name":"suggestedName","line":"100","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/List","arguments":[{"refId":"chrome.file_system/ChooseEntryAccepts","name":"ChooseEntryAccepts"}],"name":"List"},"isOptional":true,"id":"accepts","name":"accepts","line":"101","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"acceptsAllTypes","name":"acceptsAllTypes","line":"102","kind":"param"}],"line":"99","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"chrome.files/FileEntry","name":"FileEntry"}],"name":"List"}],"name":"Future"},"id":"chooseEntries4()","comment":"\nAsk the user to choose one or more files. This is sugar for the\nchrome.fileSystem.chooseEntry call.\n\n[type] is one of \"openFile\", \"openWritableFile\", or \"saveFile\"\n\nThis will return a list of dom FileEntry objects.\n","name":"chooseEntries","children":[{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"'openFile'","id":"type","name":"type","line":"125","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"id":"suggestedName","name":"suggestedName","line":"126","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/List","arguments":[{"refId":"chrome.file_system/ChooseEntryAccepts","name":"ChooseEntryAccepts"}],"name":"List"},"isOptional":true,"id":"accepts","name":"accepts","line":"127","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"acceptsAllTypes","name":"acceptsAllTypes","line":"128","kind":"param"}],"line":"124","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"chrome.files/FileEntry","name":"FileEntry"}],"name":"Future"},"id":"restoreEntry1()","comment":"\nReturns the file entry with the given id if it can be restored. This call\nwill fail otherwise. This method is new in Chrome 30.\n\nThis will return a dom FileEntry. js.retain() has been called on it; it is\nthe caller's responsibility to call js.release();\n","name":"restoreEntry","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"id","name":"id","kind":"param"}],"line":"157","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/bool","name":"bool"}],"name":"Future"},"id":"isRestorable1()","comment":"\nReturns whether a file entry for the given id can be restored, i.e. whether\nrestoreEntry would succeed with this id now. This method is new in Chrome\n30.\n","name":"isRestorable","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"id","name":"id","kind":"param"}],"line":"168","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"retainEntry1()","comment":"\nReturns an id that can be passed to restoreEntry to regain access to a\ngiven file entry. Only the 500 most recently used entries are retained,\nwhere calls to retainEntry and restoreEntry count as use. If the app has\nthe 'retainEntries' permission under 'fileSystem' (currently restricted to\ndev channel), entries are retained indefinitely. Otherwise, entries are\nretained only while the app is running and across restarts. This method is\nnew in Chrome 30.\n","name":"retainEntry","children":[{"ref":{"refId":"chrome.files/Entry","name":"Entry"},"id":"entry","name":"entry","kind":"param"}],"line":"183","kind":"method"},{"id":"_0()","name":"_","isPrivate":true,"line":"25","kind":"constructor"}],"line":"23","kind":"class"}],"line":"1","kind":"library"}