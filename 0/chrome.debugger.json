{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","id":"chrome.debugger","children":[{"kind":"method","name":"_chrome","id":"_chrome0()","isPrivate":true,"line":"13"},{"kind":"property","name":"_chrome","id":"_chrome","isPrivate":true,"line":"13"},{"ref":{"name":"Debugger","refId":"chrome.debugger/Debugger"},"isFinal":true,"kind":"variable","name":"debugger","id":"debugger","comment":"Accessor for the `chrome.debugger` namespace.","line":"11"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"DebuggerEvent","id":"DebuggerEvent","comment":"\nFired whenever debugging target issues instrumentation event.\n","children":[{"ref":{"name":"Debuggee","refId":"chrome.debugger/Debuggee"},"kind":"variable","name":"source","id":"source","comment":"\nThe debuggee that generated this event.\n","line":"197"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"method","id":"method","comment":"\nMethod name. Should be one of the notifications defined by the remote\ndebugging protocol.\n","line":"202"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"variable","name":"params","id":"params","comment":"\nJSON object with the response. Structure of the response varies depending\non the method and is defined by the remote debugging protocol.\n","line":"207"},{"kind":"constructor","name":"_","id":"_3()","children":[{"ref":{"name":"Debuggee","refId":"chrome.debugger/Debuggee"},"initializedField":{"name":"source","refId":"chrome.debugger/DebuggerEvent/source"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"method","refId":"chrome.debugger/DebuggerEvent/method"},"kind":"param","name":"method","id":"method"},{"ref":{"name":"Map","refId":"dart.core/Map"},"isOptional":true,"initializedField":{"name":"params","refId":"chrome.debugger/DebuggerEvent/params"},"kind":"param","name":"params","id":"params"}],"isPrivate":true,"line":"209"}],"line":"193"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"DetachEvent","id":"DetachEvent","comment":"\nFired when browser terminates debugging session for the tab. This happens\nwhen either the tab is being closed or Chrome DevTools is being invoked for\nthe attached tab.\n","children":[{"ref":{"name":"Debuggee","refId":"chrome.debugger/Debuggee"},"kind":"variable","name":"source","id":"source","line":"177"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"reason","id":"reason","comment":"\nOne of:\n* 'target_closed'\n* 'canceled_by_user'\n* 'replaced_with_devtools'\n","line":"185"},{"kind":"constructor","name":"_","id":"_2()","children":[{"ref":{"name":"Debuggee","refId":"chrome.debugger/Debuggee"},"initializedField":{"name":"source","refId":"chrome.debugger/DetachEvent/source"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"reason","refId":"chrome.debugger/DetachEvent/reason"},"kind":"param","name":"reason","id":"reason"}],"isPrivate":true,"line":"187"}],"line":"176"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Debuggee","id":"Debuggee","children":[{"returnType":{"name":"Proxy","refId":"js/Proxy"},"kind":"method","name":"_toJS","id":"_toJS0()","isPrivate":true,"line":"156"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"tabId","id":"tabId","comment":"\nThe id of the tab which you intend to debug.\n","line":"138"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"extensionId","id":"extensionId","comment":"\nThe id of the extension which you intend to debug. Attaching to an\nextension background page is only possible when 'enable-silent-debugging'\nflag is enabled on the target browser.\n","line":"145"},{"kind":"constructor","name":"fromTabId","id":"fromTabId1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"tabId","refId":"chrome.debugger/Debuggee/tabId"},"kind":"param","name":"tabId","id":"tabId"}],"line":"147"},{"kind":"constructor","name":"fromExtensionId","id":"fromExtensionId1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"extensionId","refId":"chrome.debugger/Debuggee/extensionId"},"kind":"param","name":"extensionId","id":"extensionId"}],"line":"149"},{"kind":"constructor","name":"_fromProxy","id":"_fromProxy1()","children":[{"ref":{"name":"Proxy","refId":"js/Proxy"},"kind":"param","name":"proxy","id":"proxy"}],"isPrivate":true,"line":"151"}],"line":"134"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Debugger","id":"Debugger","comment":"\nDebugger API serves as an alternate transport for Chrome's remote debugging\nprotocol. Use chrome.debugger to attach to one or more tabs to instrument\nnetwork interaction, debug JavaScript, mutate the DOM and CSS, etc. Use the\nDebuggee tabId to target tabs with sendCommand and route events by tabId from\nonEvent callbacks.\n\nAs of today, attaching to the tab by means of the debugger API and using\nembedded Chrome DevTools with that tab are mutually exclusive. If user\ninvokes Chrome DevTools while extension is attached to the tab, debugging\nsession is terminated. Extension can re-establish it later.\n","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Debuggee","refId":"chrome.debugger/Debuggee"}]},"kind":"method","name":"attach","id":"attach2()","comment":"\nAttaches debugger to the given target.\n\nRequired debugging protocol version (\"0.1\"). One can only attach to the\ndebuggee with matching major version and greater or equal minor version.\n","children":[{"ref":{"name":"Debuggee","refId":"chrome.debugger/Debuggee"},"kind":"param","name":"target","id":"target"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"requiredVersion","id":"requiredVersion"}],"line":"59"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Debuggee","refId":"chrome.debugger/Debuggee"}]},"kind":"method","name":"detach","id":"detach2()","comment":"\nDetaches debugger from the given target.\n","children":[{"ref":{"name":"Debuggee","refId":"chrome.debugger/Debuggee"},"kind":"param","name":"target","id":"target"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"requiredVersion","id":"requiredVersion"}],"line":"80"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Map","refId":"dart.core/Map"}]},"kind":"method","name":"sendCommand","id":"sendCommand3()","comment":"\nSends given command to the debugging target.\n","children":[{"ref":{"name":"Debuggee","refId":"chrome.debugger/Debuggee"},"kind":"param","name":"target","id":"target"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"method","id":"method"},{"ref":{"name":"Map","refId":"dart.core/Map"},"isOptional":true,"kind":"param","name":"commandParams","id":"commandParams"}],"line":"101"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"DebuggerEvent","refId":"chrome.debugger/DebuggerEvent"}]},"kind":"property","name":"onEvent","id":"onEvent","line":"129"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"DetachEvent","refId":"chrome.debugger/DetachEvent"}]},"kind":"property","name":"onDetach","id":"onDetach","line":"131"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[{"name":"DetachEvent","refId":"chrome.debugger/DetachEvent"}]},"kind":"variable","name":"_detachStreamController","id":"_detachStreamController","isPrivate":true,"line":"28"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[{"name":"DebuggerEvent","refId":"chrome.debugger/DebuggerEvent"}]},"kind":"variable","name":"_eventStreamController","id":"_eventStreamController","isPrivate":true,"line":"30"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"DetachEvent","refId":"chrome.debugger/DetachEvent"}]},"kind":"variable","name":"_detachStream","id":"_detachStream","isPrivate":true,"line":"33"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"DebuggerEvent","refId":"chrome.debugger/DebuggerEvent"}]},"kind":"variable","name":"_eventStream","id":"_eventStream","isPrivate":true,"line":"34"},{"kind":"constructor","name":"_","id":"_0()","isPrivate":true,"line":"36"}],"line":"27"}],"uri":"file:///home/ubuntu/src/github.com/dart-gde/chrome.dart/lib/src/debugger.dart","line":"1"}