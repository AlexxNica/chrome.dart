{"dependencies":[{"id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element, \nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n    \n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n    \n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe \n[Dart Language Specification](https://www.dartlang.org/docs/spec/)\nprovides technical details.\n","uri":"dart-sdk/lib/core/core.dart","name":"dart:core","children":[{"id":"Object","comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"48","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a string representation of this object.\n","name":"toString","line":"67","kind":"method"},{"id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"79","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","line":"62","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","line":"84","kind":"property"},{"id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","line":"18","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Map","comment":"\nAn unordered collection of key-value pairs,\nfrom which you retrieve a value by using its associated key.\n\nEach key must be unique.\nNull values are supported, but null keys are not.\n","uri":"dart-sdk/lib/core/map.dart","name":"Map","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"containsValue1()","comment":"\nReturns true if this map contains the given value.\n","name":"containsValue","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"value","name":"value","kind":"param"}],"line":"59","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"containsKey1()","comment":"\nReturns true if this map contains the given key.\n","name":"containsKey","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"key","name":"key","kind":"param"}],"line":"64","kind":"method"},{"returnType":{"refId":"dart.core/Map/V","name":"V"},"isOperator":true,"id":"[]1()","comment":"\nReturns the value for the given [key] or null if [key] is not\nin the map. Because null values are supported, one should either\nuse [containsKey] to distinguish between an absent key and a null\nvalue, or use the [putIfAbsent] method.\n","name":"[]","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"key","name":"key","kind":"param"}],"line":"72","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"id":"[]=2()","comment":"\nAssociates the [key] with the given [value].\n","name":"[]=","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"id":"key","name":"key","kind":"param"},{"ref":{"refId":"dart.core/Map/V","name":"V"},"id":"value","name":"value","kind":"param"}],"line":"77","kind":"method"},{"returnType":{"refId":"dart.core/Map/V","name":"V"},"id":"putIfAbsent2()","comment":"\nIf [key] is not associated to a value, calls [ifAbsent] and\nupdates the map by mapping [key] to the value returned by\n[ifAbsent]. Returns the value in the map.\n\nIt is an error to add or remove keys from the map during the call to\n[ifAbsent].\n","name":"putIfAbsent","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"id":"key","name":"key","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"ifAbsent","name":"ifAbsent","children":[{"returnType":{"refId":"dart.core/Map/V","name":"V"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"87","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"addAll1()","comment":"\nAdds all key-value pairs of [other] to this map.\n\nIf a key of [other] is already in this map, its value is overwritten.\n\nThe operation is equivalent to doing `this[key] = value` for each key\nand associated value in other. It iterates over [other], which must\ntherefore not change during the iteration.\n","name":"addAll","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"id":"other","name":"other","kind":"param"}],"line":"98","kind":"method"},{"returnType":{"refId":"dart.core/Map/V","name":"V"},"id":"remove1()","comment":"\nRemoves the association for the given [key]. Returns the value for\n[key] in the map or null if [key] is not in the map. Note that values\ncan be null and a returned null value does not always imply that the\nkey is absent.\n","name":"remove","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"key","name":"key","kind":"param"}],"line":"106","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"clear0()","comment":"\nRemoves all pairs from the map.\n","name":"clear","line":"111","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"forEach1()","comment":"\nApplies [f] to each {key, value} pair of the map.\n\nIt is an error to add or remove keys from the map during iteration.\n","name":"forEach","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Map/K","name":"K"},"id":"key","uri":"dart-sdk/lib/core/map.dart","name":"key","line":"118","kind":"param"},{"ref":{"refId":"dart.core/Map/V","name":"V"},"id":"value","uri":"dart-sdk/lib/core/map.dart","name":"value","line":"118","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"118","kind":"method"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Map/K","name":"K"}],"name":"Iterable"},"id":"keys","comment":"\nThe keys of [this].\n","name":"keys","line":"123","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Map/V","name":"V"}],"name":"Iterable"},"id":"values","comment":"\nThe values of [this].\n","name":"values","line":"128","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","comment":"\nThe number of {key, value} pairs in the map.\n","name":"length","line":"133","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isEmpty","comment":"\nReturns true if there is no {key, value} pair in the map.\n","name":"isEmpty","line":"138","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isNotEmpty","comment":"\nReturns true if there is at least one {key, value} pair in the map.\n","name":"isNotEmpty","line":"143","kind":"property"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"id":"0()","comment":"\nCreates a Map instance with the default implementation.\n","name":"","line":"18","kind":"constructor"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"id":"from1()","comment":"\nCreates a Map instance that contains all key-value pairs of [other].\n","name":"from","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"id":"other","name":"other","kind":"param"}],"line":"23","kind":"constructor"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"id":"fromIterable3()","comment":"\nCreates a Map instance\nwhere the keys and values are computed from the [iterable].\n\nFor each element of the [iterable] this constructor computes a key-value\npair, by applying [key] and [value] respectively.\n\nThe keys computed by the source [iterable] \ndo not need to be unique. The last\noccurrence of a key will simply overwrite any previous value.\n\nIf no values are specified for [key] and [value] the default is the\nidentity function.\n","name":"fromIterable","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Map/K","name":"K"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"key","name":"key","children":[{"returnType":{"refId":"dart.core/Map/K","name":"K"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"element","uri":"dart-sdk/lib/core/map.dart","name":"element","line":"40","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"40","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"value","name":"value","children":[{"returnType":{"refId":"dart.core/Map/V","name":"V"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"element","uri":"dart-sdk/lib/core/map.dart","name":"element","line":"40","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"40","kind":"param"}],"line":"39","kind":"constructor"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/Map/K","name":"K"},{"refId":"dart.core/Map/V","name":"V"}],"name":"Map"},"id":"fromIterables2()","comment":"\nCreates a Map instance associating the given [keys] to [values].\n\nThis constructor iterates over [keys] and [values] and maps each element of\n[keys] to the corresponding element of [values].\n\nIf [keys] contains the same object multiple times, the last occurrence\noverwrites the previous value.\n\nIt is an error if the two [Iterable]s don't have the same length.\n","name":"fromIterables","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Map/K","name":"K"}],"name":"Iterable"},"id":"keys","name":"keys","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Map/V","name":"V"}],"name":"Iterable"},"id":"values","name":"values","kind":"param"}],"line":"53","kind":"constructor"},{"id":"K","name":"K","kind":"typeparam"},{"id":"V","name":"V","kind":"typeparam"}],"line":"14","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"List","comment":"\nAn indexable collection of objects with a length.\n\nSubclasses of this class implement different kinds of lists.\nThe most common kinds of lists are:\n\n* Fixed-length list.\n  An error occurs when attempting to use operations\n  that can change the length of the list.\n\n* Growable list. Full implementation of the API defined in this class.\n\nThe following code illustrates that some List implementations support\nonly a subset of the API.\n\n    var fixedLengthList = new List(5);\n    fixedLengthList.length = 0;  // Error.\n    fixedLengthList.add(499);    // Error.\n    fixedLengthList[0] = 87;\n\n    var growableList = [1, 2];\n    growableList.length = 0;\n    growableList.add(499);\n    growableList[0] = 87;\n\nLists are [Iterable].\nIteration occurs over values in index order.\nChanging the values does not affect iteration,\nbut changing the valid indices&mdash;that is,\nchanging the list's length&mdash;between\niteration steps\ncauses a [ConcurrentModificationError].\nThis means that only growable lists can throw ConcurrentModificationError.\nIf the length changes temporarily\nand is restored before continuing the iteration,\nthe iterator does not detect it.\n","uri":"dart-sdk/lib/core/list.dart","name":"List","children":[{"returnType":{"refId":"dart.core/List/E","name":"E"},"isOperator":true,"id":"[]1()","comment":"\nReturns the object at the given [index] in the list\nor throws a [RangeError] if [index] is out of bounds.\n","name":"[]","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"}],"line":"111","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"id":"[]=2()","comment":"\nSets the value at the given [index] in the list to [value]\nor throws a [RangeError] if [index] is out of bounds.\n","name":"[]=","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"value","name":"value","kind":"param"}],"line":"117","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isSetter":true,"id":"length=1()","comment":"\nChanges the length of this list.\n\nIf [newLength] is greater than\nthe current [length], entries are initialized to [:null:].\n\nThrows an [UnsupportedError] if the list is fixed-length.\n","name":"length=","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"newLength","name":"newLength","kind":"param"}],"line":"134","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"add1()","comment":"\nAdds [value] to the end of this list,\nextending the length by one.\n\nThrows an [UnsupportedError] if the list is fixed-length.\n","name":"add","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"value","name":"value","kind":"param"}],"line":"142","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"addAll1()","comment":"\nAppends all objects of [iterable] to the end of this list.\n\nExtends the length of the list by the number of objects in [iterable].\nThrows an [UnsupportedError] if this list is fixed-length.\n","name":"addAll","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"}],"line":"150","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"sort1()","comment":"\nSorts this list according to the order specified by the [compare] function.\n\nThe [compare] function must act as a [Comparator].\n\nThe default List implementations use [Comparable.compare] if\n[compare] is omitted.\n","name":"sort","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"compare","name":"compare","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"a","uri":"dart-sdk/lib/core/list.dart","name":"a","line":"165","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"b","uri":"dart-sdk/lib/core/list.dart","name":"b","line":"165","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"165","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"id":"indexOf2()","comment":"\nReturns the first index of [element] in this list.\n\nSearches the list from index [start] to the length of the list.\nThe first time an object [:o:] is encountered so that [:o == element:],\nthe index of [:o:] is returned.\nReturns -1 if [element] is not found.\n","name":"indexOf","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"element","name":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"start","name":"start","kind":"param"}],"line":"175","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"id":"lastIndexOf2()","comment":"\nReturns the last index of [element] in this list.\n\nSearches the list backwards from index [start] to 0.\n\nThe first time an object [:o:] is encountered so that [:o == element:],\nthe index of [:o:] is returned.\n\nIf [start] is not provided, it defaults to [:this.length - 1:].\n\nReturns -1 if [element] is not found.\n","name":"lastIndexOf","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"element","name":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"id":"start","name":"start","kind":"param"}],"line":"189","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"clear0()","comment":"\nRemoves all objects from this list;\nthe length of the list becomes zero.\n\nThrows an [UnsupportedError], and retains all objects, if this \nis a fixed-length list.\n","name":"clear","line":"198","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"insert2()","comment":"\nInserts the object at position [index] in this list.\n\nThis increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn [UnsupportedError] occurs if the list is fixed-length.\n","name":"insert","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"element","name":"element","kind":"param"}],"line":"209","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"insertAll2()","comment":"\nInserts all objects of [iterable] at position [index] in this list.\n\nThis increases the length of the list by the length of [iterable] and\nshifts all later objects towards the end of the list.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn [UnsupportedError] occurs if the list is fixed-length.\n","name":"insertAll","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"}],"line":"220","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"setAll2()","comment":"\nOverwrites objects of `this` with the objects of [iterable], starting\nat position [index] in this list.\n\nThis operation does not increase the length of `this`.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn error occurs if the [iterable] is longer than [length] - [index].\n","name":"setAll","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"}],"line":"231","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"remove1()","comment":"\nRemoves [value] from this list.\n\nReturns true if [value] was in the list.\nReturns false otherwise.\nThe method has no effect if [value] was not in the list.\n\nAn [UnsupportedError] occurs if the list is fixed-length.\n","name":"remove","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"value","name":"value","kind":"param"}],"line":"242","kind":"method"},{"returnType":{"refId":"dart.core/List/E","name":"E"},"id":"removeAt1()","comment":"\nRemoves the object at position [index] from this list.\n\nThis method reduces the length of `this` by one and moves all later objects\ndown by one position.\n\nReturns the removed object.\n\n* Throws an [ArgumentError] if [index] is not an [int].\n* Throws a [RangeError] if the [index] is out of range for this list.\n* Throws an [UnsupportedError], and doesn't remove the object,\nif this is a fixed-length list.\n","name":"removeAt","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"}],"line":"257","kind":"method"},{"returnType":{"refId":"dart.core/List/E","name":"E"},"id":"removeLast0()","comment":"\nPops and returns the last object in this list.\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","name":"removeLast","line":"264","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"removeWhere1()","comment":"\nRemoves all objects from this list that satisfy [test].\n\nAn object [:o:] satisfies [test] if [:test(o):] is true.\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","name":"removeWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"element","uri":"dart-sdk/lib/core/list.dart","name":"element","line":"273","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"273","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"retainWhere1()","comment":"\nRemoves all objects from this list that fail to satisfy [test].\n\nAn object [:o:] satisfies [test] if [:test(o):] is true.\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","name":"retainWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"element","uri":"dart-sdk/lib/core/list.dart","name":"element","line":"282","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"282","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"id":"sublist2()","comment":"\nReturns a new list containing the objects\nfrom [start] inclusive to [end] exclusive.\n\nIf [end] is omitted, the [length] of `this` is used.\n\nAn error occurs if [start] is outside the range `0` .. `length` or if\n[end] is outside the range `start` .. `length`.\n","name":"sublist","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"id":"end","name":"end","kind":"param"}],"line":"293","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"id":"getRange2()","comment":"\nReturns an [Iterable] that iterates over the objects in the range\n[start] inclusive to [end] exclusive.\n\nAn error occurs if [end] is before [start].\n\nAn error occurs if the [start] and [end] are not valid ranges at the time\nof the call to this method. The returned [Iterable] behaves like\n`skip(start).take(end - start)`. That is, it does not throw exceptions\nif `this` changes size.\n\nExample:\n\n    var list = [1, 2, 3, 4, 5];\n    var range = list.getRange(1, 4);\n    print(range.join(', '));  // => 2, 3, 4\n    list.length = 3;\n    print(range.join(', '));  // => 2, 3\n","name":"getRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"}],"line":"314","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"setRange4()","comment":"\nCopies the objects of [iterable], skipping [skipCount] objects first,\ninto the range [start] inclusive to [end] exclusive of `this`.\n\nIf [start] equals [end] and [start]..[end] represents a legal range, this\nmethod has no effect.\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\nAn error occurs if the [iterable] does not have enough objects after\nskipping [skipCount] objects.\n\nExample:\n\n    var list = [1, 2, 3, 4];\n    var list2 = [5, 6, 7, 8, 9];\n    list.setRange(1, 3, list2, 3);\n    print(list);  // => [1, 8, 9, 4]\n","name":"setRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"skipCount","name":"skipCount","kind":"param"}],"line":"334","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"removeRange2()","comment":"\nRemoves the objects in the range [start] inclusive to [end] exclusive.\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\nThrows an [UnsupportedError] if this is a fixed-length list.\n","name":"removeRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"}],"line":"342","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"fillRange3()","comment":"\nSets the objects in the range [start] inclusive to [end] exclusive\nto the given [fillValue].\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\n","name":"fillRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"isOptional":true,"id":"fillValue","name":"fillValue","kind":"param"}],"line":"350","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"replaceRange3()","comment":"\nRemoves the objects in the range [start] inclusive to [end] exclusive\nand replaces them with the contents of the [iterable].\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\n\nExample:\n\n    var list = [1, 2, 3, 4, 5];\n    list.replaceRange(1, 3, [6, 7, 8, 9]);\n    print(list);  // [1, 6, 7, 8, 9, 4, 5]\n","name":"replaceRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"}],"line":"364","kind":"method"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/int","name":"int"},{"refId":"dart.core/List/E","name":"E"}],"name":"Map"},"id":"asMap0()","comment":"\nReturns an unmodifiable [Map] view of `this`.\n\nThe map uses the indices of this list as keys and the corresponding objects\nas values. The `Map.keys` [Iterable] iterates the indices of this list\nin numerical order.\n","name":"asMap","line":"373","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","comment":"\nReturns the number of objects in this list.\n\nThe valid indices for a list are `0` through `length - 1`.\n","name":"length","line":"124","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"Iterable"},"id":"reversed","comment":"\nReturns an [Iterable] of the objects in this list in reverse order.\n","name":"reversed","line":"155","kind":"property"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"id":"1()","comment":"\nCreates a list of the given _length_.\n\nThe created list is fixed-length if _length_ is provided.\nThe list has length 0 and is growable if _length_ is omitted.\n\nAn error occurs if _length_ is negative.\n","name":"","children":[{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"id":"length","name":"length","kind":"param"}],"line":"53","kind":"constructor"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"id":"filled2()","comment":"\nCreates a fixed-length list of the given _length_\nand initializes the value at each position with [fill].\n","name":"filled","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","name":"length","kind":"param"},{"ref":{"refId":"dart.core/List/E","name":"E"},"id":"fill","name":"fill","kind":"param"}],"line":"59","kind":"constructor"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"id":"from2()","comment":"\nCreates a list and initializes it using the contents of [other].\n\nThe [Iterator] of [other] provides the order of the objects.\n\nThis constructor returns a growable list if [growable] is true;\notherwise, it returns a fixed-length list.\n","name":"from","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"other","name":"other","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"growable","name":"growable","kind":"param"}],"line":"69","kind":"constructor"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List/E","name":"E"}],"name":"List"},"id":"generate3()","comment":"\nGenerates a list of values.\n\nCreates a list with _length_ positions\nand fills it with values created by calling [generator]\nfor each index in the range `0` .. `length - 1`\nin increasing order.\n\nThe created list is fixed-length unless [growable] is true.\n","name":"generate","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","name":"length","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"generator","name":"generator","children":[{"returnType":{"refId":"dart.core/List/E","name":"E"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","uri":"dart-sdk/lib/core/list.dart","name":"index","line":"93","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"growable","name":"growable","line":"94","kind":"param"}],"line":"93","kind":"constructor"},{"id":"E","name":"E","kind":"typeparam"}],"line":"44","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Iterator","comment":"\nThe [Iterator] class provides methods to iterate over an object. It\nis transparently used by the for-in construct to test for the end\nof the iteration, and to get the elements.\n\nIf the object iterated over is changed during the iteration, the\nbehavior is unspecified.\n\nThe [Iterator] is initially positioned before the first element. Before\naccessing the first element the iterator must thus be advanced ([moveNext])\nto point to the first element. If there is no element left, then [moveNext]\nreturns false.\n\nA typical usage of an [Iterator] looks as follows:\n\n    var it = obj.iterator;\n    while (it.moveNext()) {\n      use(it.current);\n    }\n","uri":"dart-sdk/lib/core/iterator.dart","name":"Iterator","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"moveNext0()","comment":"\nMoves to the next element. Returns true if [current] contains the next\nelement. Returns false, if no element was left.\n\nIt is safe to invoke [moveNext] even when the iterator is already\npositioned after the last element. In this case [moveNext] has no effect.\n","name":"moveNext","line":"35","kind":"method"},{"ref":{"refId":"dart.core/Iterator/E","name":"E"},"id":"current","comment":"\nReturns the current element.\n\nReturn [:null:] if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved after the last element of the\n[Iterable].\n","name":"current","line":"44","kind":"property"},{"id":"E","name":"E","kind":"typeparam"}],"line":"27","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Iterable","comment":"\nThe [Iterable] interface allows to get an [Iterator] out of an\n[Iterable] object.\n\nThis interface is used by the for-in construct to iterate over an\n[Iterable] object.\nThe for-in construct takes an [Iterable] object at the right-hand\nside, and calls its [iterator] method to get an [Iterator] on it.\n\nA user-defined class that implements the [Iterable] interface can\nbe used as the right-hand side of a for-in construct.\n","uri":"dart-sdk/lib/core/iterable.dart","name":"Iterable","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"map1()","comment":"\nReturns a lazy [Iterable] where each element [:e:] of `this` is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","name":"map","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"dart-sdk/lib/core/iterable.dart","name":"element","line":"51","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"51","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"id":"where1()","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [test].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [test] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [test] multiple times on the same element.\n","name":"where","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"dart-sdk/lib/core/iterable.dart","name":"element","line":"63","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"63","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"expand1()","comment":"\nExpand each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable will run through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and will call [f] for each element\nof this every time it's iterated.\n","name":"expand","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"dart-sdk/lib/core/iterable.dart","name":"element","line":"74","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"74","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"contains1()","comment":"\nCheck whether the collection contains an element equal to [element].\n","name":"contains","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"element","name":"element","kind":"param"}],"line":"79","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"forEach1()","comment":"\nApplies the function [f] to each element of this collection.\n","name":"forEach","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"dart-sdk/lib/core/iterable.dart","name":"element","line":"84","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"reduce1()","comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","name":"reduce","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"combine","name":"combine","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"value","uri":"dart-sdk/lib/core/iterable.dart","name":"value","line":"95","kind":"param"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"dart-sdk/lib/core/iterable.dart","name":"element","line":"95","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"95","kind":"method"},{"id":"fold2()","comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","name":"fold","children":[{"id":"initialValue","name":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"combine","name":"combine","children":[{"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"previousValue","uri":"dart-sdk/lib/core/iterable.dart","name":"previousValue","line":"111","kind":"param"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"dart-sdk/lib/core/iterable.dart","name":"element","line":"111","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"111","kind":"param"}],"line":"110","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"every1()","comment":"\nReturns true if every elements of this collection satisify the\npredicate [test]. Returns `false` otherwise.\n","name":"every","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"dart-sdk/lib/core/iterable.dart","name":"element","line":"117","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"117","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"join1()","comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","name":"join","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","id":"separator","name":"separator","kind":"param"}],"line":"126","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"any1()","comment":"\nReturns true if one element of this collection satisfies the\npredicate [test]. Returns false otherwise.\n","name":"any","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"dart-sdk/lib/core/iterable.dart","name":"element","line":"136","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"136","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"List"},"id":"toList1()","comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements will be in iteration order. The list is fixed-length\nif [growable] is false.\n","name":"toList","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"growable","name":"growable","kind":"param"}],"line":"144","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Set"},"id":"toSet0()","comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","name":"toSet","line":"149","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"id":"take1()","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if `this`\ncontains fewer than [n] elements.\n\nIt is an error if [n] is negative.\n","name":"take","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"n","name":"n","kind":"param"}],"line":"177","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"id":"takeWhile1()","comment":"\nReturns an [Iterable] that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will start iterating over the elements of `this`.\n\nWhen the iterator encounters an element `e` that does not satisfy [test],\nit discards `e` and moves into the finished state. That is, it will not\nask or provide any more elements.\n","name":"takeWhile","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"value","uri":"dart-sdk/lib/core/iterable.dart","name":"value","line":"189","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"189","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"id":"skip1()","comment":"\nReturns an [Iterable] that skips the first [n] elements.\n\nIf `this` has fewer than [n] elements, then the resulting [Iterable] will\nbe empty.\n\nIt is an error if [n] is negative.\n","name":"skip","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"n","name":"n","kind":"param"}],"line":"199","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"id":"skipWhile1()","comment":"\nReturns an [Iterable] that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] iterates over all elements of `this`.\n\nAs long as the iterator's elements satisfy [test] they are\ndiscarded. Once an element does not satisfy the [test] the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned [Iterable] are the elements of `this` starting from the\nfirst element that does not satisfy [test].\n","name":"skipWhile","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"value","uri":"dart-sdk/lib/core/iterable.dart","name":"value","line":"213","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"213","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"firstWhere2()","comment":"\nReturns the first element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","name":"firstWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"dart-sdk/lib/core/iterable.dart","name":"element","line":"244","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"244","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"lastWhere2()","comment":"\nReturns the last element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","name":"lastWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"dart-sdk/lib/core/iterable.dart","name":"element","line":"253","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"253","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"singleWhere1()","comment":"\nReturns the single element that satisfies [test]. If no or more than one\nelement match then a [StateError] is thrown.\n","name":"singleWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"element","uri":"dart-sdk/lib/core/iterable.dart","name":"element","line":"259","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"259","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"elementAt1()","comment":"\nReturns the [index]th element.\n\nIf `this` has fewer than [index] elements throws a [RangeError].\n\nNote: if `this` does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in `this`.\n","name":"elementAt","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"}],"line":"270","kind":"method"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterator"},"id":"iterator","comment":"\nReturns an [Iterator] that iterates over this [Iterable] object.\n","name":"iterator","line":"39","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","name":"length","line":"157","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isEmpty","comment":"\nReturns true if there is no element in this collection.\n","name":"isEmpty","line":"162","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isNotEmpty","comment":"\nReturns true if there is at least one element in this collection.\n","name":"isNotEmpty","line":"167","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"first","comment":"\nReturns the first element.\n\nIf `this` is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","name":"first","line":"221","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"last","comment":"\nReturns the last element.\n\nIf `this` is empty throws a [StateError].\n","name":"last","line":"228","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"id":"single","comment":"\nReturns the single element in `this`.\n\nIf `this` is empty or has more than one element throws a [StateError].\n","name":"single","line":"235","kind":"property"},{"id":"0()","name":"","line":"20","kind":"constructor"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"id":"generate2()","comment":"\nCreate an [Iterable] that generates its elements dynamically.\n\nThe [Iterators] created by the [Iterable] will count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an [Iterable], [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","name":"generate","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"count","name":"count","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"generator","name":"generator","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","uri":"dart-sdk/lib/core/iterable.dart","name":"index","line":"32","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"32","kind":"constructor"},{"id":"E","name":"E","kind":"typeparam"}],"line":"19","kind":"class"},{"interfaces":[{"refId":"dart.core/Comparable","name":"Comparable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"DateTime","comment":"\nAn instant in time, such as July 20, 1969, 8:18pm PST.\n\nCreate a DateTime object by using one of the constructors\nor by parsing a correctly formatted string,\nwhich complies with a subset of ISO 8601.\nNote that hours are specified between 0 and 23,\nas in a 24-hour clock.\nFor example:\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");  // 8:18pm\n\nA DateTime object is anchored either in the UTC time zone\nor in the local time zone of the current computer\nwhen the object is created.\n\nOnce created, neither the value nor the time zone\nof a DateTime object may be changed.\n\nYou can use properties to get\nthe individual units of a DateTime object.\n\n    assert(berlinWallFell.month == 11);\n    assert(moonLanding.hour == 20);\n\nFor convenience and readability,\nthe DateTime class provides a constant for each day and month\nname&mdash;for example, [AUGUST] and [FRIDAY].\nYou can use these constants to improve code readibility:\n\n    DateTime berlinWallFell = new DateTime(1989, DateTime.NOVEMBER, 9);\n    assert(berlinWallFell.month == DateTime.SATURDAY);\n\nDay and month values begin at 1, and the week starts on Monday.\nThat is, the constants [JANUARY] and [MONDAY] are both 1.\n\n## Working with UTC and local time\n\nA DateTime object is in the local time zone\nunless explicitly created in the UTC time zone.\n\n    DateTime dDay = new DateTime.utc(1944, 6, 6);\n   \nUse [isUtc] to determine whether a DateTime object is based in UTC.\nUse the methods [toLocal] and [toUtc]\nto get the equivalent date/time value specified in the other time zone.\nUse [timeZoneName] to get an abbreviated name of the time zone\nfor the DateTime object.\nTo find the difference\nbetween UTC and the time zone of a DateTime object\ncall [timeZoneOffset].\n\n## Comparing DateTime objects\n\nThe DateTime class contains several handy methods,\nsuch as [isAfter], [isBefore], and [isAtSameMomentAs],\nfor comparing DateTime objects.\n\n    assert(berlinWallFell.isAfter(moonLanding) == true);\n    assert(berlinWallFell.isBefore(moonLanding) == false);\n\n## Using DateTime with Duration\n\nUse the [add] and [subtract] methods with a [Duration] object\nto create a new DateTime object based on another.\nFor example, to find the date that is sixty days after today, write:\n\n    DateTime today = new DateTime.now();\n    DateTime sixtyDaysFromNow = today.add(new Duration(days: 60));\n\nTo find out how much time is between two DateTime objects use\n[difference], which returns a [Duration] object:\n\n    Duration difference = berlinWallFell.difference(dDay);\n    assert(difference.inDays == 16592);\n\n## Other resources\n\nSee [Duration] to represent a span of time.\nSee [Stopwatch] to measure timespans.\n\nThe DateTime class does not provide internationalization.\nTo internationalize your code, use\nthe [intl](http://pub.dartlang.org/packages/intl) package.\n\n","uri":"dart-sdk/lib/core/date_time.dart","name":"DateTime","children":[{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"isStatic":true,"id":"parse1()","comment":"\nConstructs a new [DateTime] instance based on [formattedString].\n\nThe function parses a subset of ISO 8601. Examples of accepted strings:\n\n* `\"2012-02-27 13:27:00\"`\n* `\"2012-02-27 13:27:00.123456z\"`\n* `\"20120227 13:27:00\"`\n* `\"20120227T132700\"`\n* `\"20120227\"`\n* `\"+20120227\"`\n* `\"2012-02-27T14Z\"`\n* `\"-123450101 00:00:00 Z\"`: in the year -12345.\n","name":"parse","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"formattedString","name":"formattedString","kind":"param"}],"line":"205","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","comment":"\nReturns true if [other] is a [DateTime] at the same moment and in the\nsame time zone (UTC or local).\n\n    DateTime dDayUtc   = new DateTime.utc(1944, DateTime.JUNE, 6);\n    DateTime dDayLocal = new DateTime(1944, DateTime.JUNE, 6);\n\n    assert(dDayUtc.isAtSameMomentAs(dDayLocal) == false);\n\nSee [isAtSameMomentAs] for a comparison that adjusts for time zone.\n","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"line":"282","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isBefore1()","comment":"\nReturns true if [this] occurs before [other].\n\nThe comparison is independent\nof whether the time is in UTC or in the local time zone.\n\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding    = DateTime.parse(\"1969-07-20 20:18:00\");\n\n    assert(berlinWallFell.isBefore(moonLanding) == false);\n\n","name":"isBefore","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"other","name":"other","kind":"param"}],"line":"300","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isAfter1()","comment":"\nReturns true if [this] occurs after [other].\n\nThe comparison is independent\nof whether the time is in UTC or in the local time zone.\n\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding    = DateTime.parse(\"1969-07-20 20:18:00\");\n\n    assert(berlinWallFell.isAfter(moonLanding) == true);\n\n","name":"isAfter","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"other","name":"other","kind":"param"}],"line":"316","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isAtSameMomentAs1()","comment":"\nReturns true if [this] occurs at the same moment as [other].\n\nThe comparison is independent of whether the time is in UTC or in the local\ntime zone.\n\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding    = DateTime.parse(\"1969-07-20 20:18:00\");\n\n    assert(berlinWallFell.isAtSameMomentAs(moonLanding) == false);\n","name":"isAtSameMomentAs","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"other","name":"other","kind":"param"}],"line":"331","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"id":"compareTo1()","comment":"\nCompares this DateTime object to [other],\nreturning zero if the values are equal.\n\nThis function returns a negative integer\nif this DateTime is smaller (earlier) than [other],\nor a positive integer if it is greater (later).\n","name":"compareTo","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"other","name":"other","kind":"param"}],"line":"343","kind":"method"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"toLocal0()","comment":"\nReturns this DateTime value in the local time zone.\n\nReturns [this] if it is already in the local time zone.\nOtherwise this method is equivalent to:\n\n    new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                            isUtc: false)\n","name":"toLocal","line":"357","kind":"method"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"toUtc0()","comment":"\nReturns this DateTime value in the UTC time zone.\n\nReturns [this] if it is already in UTC.\nOtherwise this method is equivalent to:\n\n    new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                            isUtc: true)\n","name":"toUtc","line":"374","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","comment":"\nReturns a human-readable string for this instance.\n\nThe returned string is constructed for the time zone of this instance.\nThe `toString()` method provides a simply formatted string.\nIt does not support internationalized strings.\nUse the [intl](http://pub.dartlang.org/packages/intl) package\nat the pub shared packages repo.\n","name":"toString","line":"389","kind":"method"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"add1()","comment":"\nReturns a new [DateTime] instance with [duration] added to [this].\n\n    DateTime today = new DateTime.now();\n    DateTime sixtyDaysFromNow = today.add(new Duration(days: 60));\n","name":"add","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"id":"duration","name":"duration","kind":"param"}],"line":"431","kind":"method"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"subtract1()","comment":"\nReturns a new [DateTime] instance with [duration] subtracted from [this].\n\n    DateTime today = new DateTime.now();\n    DateTime sixtyDaysAgo = today.subtract(new Duration(days: 60));\n","name":"subtract","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"id":"duration","name":"duration","kind":"param"}],"line":"443","kind":"method"},{"returnType":{"refId":"dart.core/Duration","name":"Duration"},"id":"difference1()","comment":"\nReturns a [Duration] with the difference between [this] and [other].\n\n    DateTime berlinWallFell = new DateTime(1989, DateTime.NOVEMBER, 9);\n    DateTime dDay = new DateTime(1944, DateTime.JUNE, 6);\n\n    Duration difference = berlinWallFell.difference(dDay);\n    assert(difference.inDays == 16592);\n","name":"difference","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"other","name":"other","kind":"param"}],"line":"459","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"_brokenDownDateToMillisecondsSinceEpoch8()","name":"_brokenDownDateToMillisecondsSinceEpoch","isPrivate":true,"children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"year","name":"year","line":"475","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"month","name":"month","line":"475","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"day","name":"day","line":"475","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hour","name":"hour","line":"475","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"minute","name":"minute","line":"475","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"second","name":"second","line":"475","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"millisecond","name":"millisecond","line":"476","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isUtc","name":"isUtc","line":"476","kind":"param"}],"line":"474","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hashCode","name":"hashCode","line":"346","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"timeZoneName","comment":"\nThe abbreviated time zone name&mdash;for example,\n[:\"CET\":] or [:\"CEST\":].\n","name":"timeZoneName","line":"482","kind":"property"},{"ref":{"refId":"dart.core/Duration","name":"Duration"},"id":"timeZoneOffset","comment":"\nThe time zone offset, which\nis the difference between local time and UTC.\n\nThe offset is positive for time zones west of UTC.\n\nNote, that JavaScript, Python and C return the difference between UTC and\nlocal time. Java, C# and Ruby return the difference between local time and\nUTC.\n","name":"timeZoneOffset","line":"494","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"year","comment":"\nThe year.\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.year == 1969);\n","name":"year","line":"502","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"month","comment":"\nThe month [1..12].\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.month == 7);\n    assert(moonLanding.month == DateTime.JULY);\n","name":"month","line":"511","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"day","comment":"\nThe day of the month [1..31].\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.day == 20);\n","name":"day","line":"519","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hour","comment":"\nThe hour of the day, expressed as in a 24-hour clock [0..23].\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.hour == 20);\n","name":"hour","line":"527","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"minute","comment":"\nThe minute [0...59].\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.minute == 18);\n","name":"minute","line":"535","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"second","comment":"\nThe second [0...59].\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.second == 0);\n","name":"second","line":"543","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"millisecond","comment":"\nThe millisecond [0...999].\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.millisecond == 0);\n","name":"millisecond","line":"551","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"weekday","comment":"\nThe day of the week [MONDAY]..[SUNDAY].\n\nIn accordance with ISO 8601\na week starts with Monday, which has the value 1.\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.weekday == 7);\n    assert(moonLanding.weekday == DateTime.SUNDAY);\n\n","name":"weekday","line":"564","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"MONDAY","name":"MONDAY","line":"97","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"TUESDAY","name":"TUESDAY","line":"98","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"WEDNESDAY","name":"WEDNESDAY","line":"99","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"THURSDAY","name":"THURSDAY","line":"100","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"FRIDAY","name":"FRIDAY","line":"101","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"SATURDAY","name":"SATURDAY","line":"102","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"SUNDAY","name":"SUNDAY","line":"103","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"DAYS_PER_WEEK","name":"DAYS_PER_WEEK","line":"104","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"JANUARY","name":"JANUARY","line":"107","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"FEBRUARY","name":"FEBRUARY","line":"108","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"MARCH","name":"MARCH","line":"109","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"APRIL","name":"APRIL","line":"110","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"MAY","name":"MAY","line":"111","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"JUNE","name":"JUNE","line":"112","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"JULY","name":"JULY","line":"113","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"AUGUST","name":"AUGUST","line":"114","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"SEPTEMBER","name":"SEPTEMBER","line":"115","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"OCTOBER","name":"OCTOBER","line":"116","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"NOVEMBER","name":"NOVEMBER","line":"117","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"DECEMBER","name":"DECEMBER","line":"118","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"MONTHS_PER_YEAR","name":"MONTHS_PER_YEAR","line":"119","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"id":"millisecondsSinceEpoch","comment":"\nThe number of milliseconds since\nthe \"Unix epoch\" 1970-01-01T00:00:00Z (UTC).\n\nThis value is independent of the time zone.\n\nThis value is at most\n8,640,000,000,000,000ms (100,000,000 days) from the Unix epoch.\nIn other words: [:millisecondsSinceEpoch.abs() <= 8640000000000000:].\n\n","name":"millisecondsSinceEpoch","line":"132","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"id":"isUtc","comment":"\nTrue if this [DateTime] is set to UTC time.\n\n    DateTime dDay = new DateTime.utc(1944, 6, 6);\n    assert(dDay.isUtc);\n\n","name":"isUtc","line":"141","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"_MAX_MILLISECONDS_SINCE_EPOCH","name":"_MAX_MILLISECONDS_SINCE_EPOCH","isPrivate":true,"line":"248","kind":"variable"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"7()","comment":"\nConstructs a [DateTime] instance specified in the local time zone.\n\nFor example,\nto create a new DateTime object representing April 29, 2014, 6:04am:\n\n    DateTime annularEclipse = new DateTime(2014, DateTime.APRIL, 29, 6, 4);\n","name":"","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"year","name":"year","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"1","id":"month","name":"month","line":"153","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"1","id":"day","name":"day","line":"154","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"hour","name":"hour","line":"155","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"minute","name":"minute","line":"156","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"second","name":"second","line":"157","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"millisecond","name":"millisecond","line":"158","kind":"param"}],"line":"152","kind":"constructor"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"utc7()","comment":"\nConstructs a [DateTime] instance specified in the UTC time zone.\n\n    DateTime dDay = new DateTime.utc(1944, DateTime.JUNE, 6);\n","name":"utc","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"year","name":"year","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"1","id":"month","name":"month","line":"170","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"1","id":"day","name":"day","line":"171","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"hour","name":"hour","line":"172","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"minute","name":"minute","line":"173","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"second","name":"second","line":"174","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"millisecond","name":"millisecond","line":"175","kind":"param"}],"line":"169","kind":"constructor"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"now0()","comment":"\nConstructs a [DateTime] instance with current date and time in the\nlocal time zone.\n\n    DateTime thisInstant = new DateTime.now();\n\n","name":"now","line":"188","kind":"constructor"},{"id":"fromMillisecondsSinceEpoch2()","comment":"\nConstructs a new [DateTime] instance\nwith the given [millisecondsSinceEpoch].\n\nIf [isUtc] is false then the date is in the local time zone.\n\nThe constructed [DateTime] represents\n1970-01-01T00:00:00Z + [millisecondsSinceEpoch] ms in the given\ntime zone (local or UTC).\n","name":"fromMillisecondsSinceEpoch","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"millisecondsSinceEpoch","name":"millisecondsSinceEpoch","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"false","id":"isUtc","name":"isUtc","line":"262","kind":"param"}],"line":"261","kind":"constructor"},{"id":"_internal8()","name":"_internal","isPrivate":true,"children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"year","name":"year","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"month","name":"month","line":"466","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"day","name":"day","line":"467","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hour","name":"hour","line":"468","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"minute","name":"minute","line":"469","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"second","name":"second","line":"470","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"millisecond","name":"millisecond","line":"471","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isUtc","name":"isUtc","line":"472","kind":"param"}],"line":"465","kind":"constructor"},{"id":"_now0()","name":"_now","isPrivate":true,"line":"473","kind":"constructor"}],"line":"95","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Comparable","comment":"\nInterface used by types that have an intrinsic ordering.\n","uri":"dart-sdk/lib/core/comparable.dart","name":"Comparable","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"id":"compareTo1()","comment":"\nCompares this object to another [Comparable]\n\nReturns a value like a [Comparator] when comparing [:this:] to [other].\n\nMay throw an [ArgumentError] if [other] is of a type that\nis not comparable to [:this:].\n","name":"compareTo","children":[{"ref":{"refId":"dart.core/Comparable/T","name":"T"},"id":"other","name":"other","kind":"param"}],"line":"35","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"isStatic":true,"id":"compare2()","comment":"\nCompare one comparable to another.\n\nThis utility function is used as the default comparator\nfor the [List] sort function.\n","name":"compare","children":[{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"id":"a","name":"a","kind":"param"},{"ref":{"refId":"dart.core/Comparable","name":"Comparable"},"id":"b","name":"b","kind":"param"}],"line":"43","kind":"method"},{"id":"T","name":"T","kind":"typeparam"}],"line":"26","kind":"class"}],"line":"153","kind":"library"},{"id":"js","comment":"\nThe js.dart library provides simple JavaScript invocation from Dart that\nworks on both Dartium and on other modern browsers via Dart2JS.\n\nIt provides a model based on scoped [Proxy] objects.  Proxies give Dart\ncode access to JavaScript objects, fields, and functions as well as the\nability to pass Dart objects and functions to JavaScript functions.  Scopes\nenable developers to use proxies without memory leaks - a common challenge\nwith cross-runtime interoperation.\n\nThe top-level [context] getter provides a [Proxy] to the global JavaScript\ncontext for the page your Dart code is running on.  In the following example:\n\n    import 'package:js/js.dart' as js;\n\n    void main() {\n      js.context.alert('Hello from Dart via JavaScript');\n    }\n\njs.context.alert creates a proxy to the top-level alert function in\nJavaScript.  It is invoked from Dart as a regular function that forwards to\nthe underlying JavaScript one.  By default, proxies are released when\nthe currently executing event completes, e.g., when main is completes\nin this example.\n\nThe library also enables JavaScript proxies to Dart objects and functions.\nFor example, the following Dart code:\n\n    js.context.dartCallback = new Callback.once((x) => print(x*2));\n\ndefines a top-level JavaScript function 'dartCallback' that is a proxy to\nthe corresponding Dart function.  The [Callback.once] constructor allows the\nproxy to the Dart function to be retained across multiple events;\ninstead it is released after the first invocation.  (This is a common\npattern for asychronous callbacks.)\n\nNote, parameters and return values are intuitively passed by value for\nprimitives and by reference for non-primitives.  In the latter case, the\nreferences are automatically wrapped and unwrapped as proxies by the library.\n\nThis library also allows construction of JavaScripts objects given a [Proxy]\nto a corresponding JavaScript constructor.  For example, if the following\nJavaScript is loaded on the page:\n\n    function Foo(x) {\n      this.x = x;\n    }\n\n    Foo.prototype.add = function(other) {\n      return new Foo(this.x + other.x);\n    }\n\nthen, the following Dart:\n\n    var foo = new js.Proxy(js.context.Foo, 42);\n    var foo2 = foo.add(foo);\n    print(foo2.x);\n\nwill construct a JavaScript Foo object with the parameter 42, invoke its\nadd method, and return a [Proxy] to a new Foo object whose x field is 84.\n\nSee [samples](http://dart-lang.github.com/js-interop/example) for more\nexamples of usage.\n\nSee this [article](http://www.dartlang.org/articles/js-dart-interop) for\nmore detailed discussion.\n","uri":"package:js/js.dart","name":"package:js/js.dart","children":[{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Serializable","comment":"Marker class used to indicate it is serializable to js. If a class is a\n[Serializable] the \"toJs\" method will be called and the result will be used\nas value.","name":"Serializable","children":[{"returnType":{"refId":"js/Serializable/T","name":"T"},"id":"toJs0()","name":"toJs","line":"1067","kind":"method"},{"id":"T","name":"T","kind":"typeparam"}],"line":"1066","kind":"class"}],"line":"73","kind":"library"}],"id":"js.wrapping","uri":"package:js/js_wrapping.dart","name":"package:js/js_wrapping.dart","children":[{"id":"mapNotNull2()","uri":"package:js/src/wrapping/util.dart","name":"mapNotNull","children":[{"id":"o","name":"o","kind":"param"},{"ref":{"refId":"js.wrapping/Mapper","name":"Mapper"},"id":"mapper","name":"mapper","kind":"param"}],"line":"9","kind":"method"},{"interfaces":[{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"js.wrapping/JsObjectToMapAdapter/V","name":"V"}],"name":"Map"}],"superclass":{"refId":"js.wrapping/TypedProxy","name":"TypedProxy"},"id":"JsObjectToMapAdapter","uri":"package:js/src/wrapping/js/object_to_map_adapter.dart","name":"JsObjectToMapAdapter","children":[{"returnType":{"refId":"js.wrapping/JsObjectToMapAdapter","name":"JsObjectToMapAdapter"},"isStatic":true,"id":"cast2()","name":"cast","children":[{"ref":{"refId":"js/Proxy","name":"Proxy"},"id":"proxy","name":"proxy","kind":"param"},{"ref":{"refId":"js.wrapping/Translator","name":"Translator"},"isOptional":true,"id":"translator","name":"translator","kind":"param"}],"line":"8","kind":"method"},{"returnType":{"refId":"js.wrapping/JsObjectToMapAdapter","name":"JsObjectToMapAdapter"},"isStatic":true,"id":"castMapOfSerializables3()","name":"castMapOfSerializables","children":[{"ref":{"refId":"js/Proxy","name":"Proxy"},"id":"proxy","name":"proxy","kind":"param"},{"ref":{"refId":"js.wrapping/Mapper","name":"Mapper"},"id":"fromJs","name":"fromJs","line":"12","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"false","id":"mapOnlyNotNull","name":"mapOnlyNotNull","line":"12","kind":"param"}],"line":"11","kind":"method"},{"returnType":{"refId":"js.wrapping/JsObjectToMapAdapter/V","name":"V"},"isOperator":true,"id":"[]1()","name":"[]","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"key","name":"key","kind":"param"}],"line":"22","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"id":"[]=2()","name":"[]=","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"key","name":"key","kind":"param"},{"ref":{"refId":"js.wrapping/JsObjectToMapAdapter/V","name":"V"},"id":"value","name":"value","kind":"param"}],"line":"23","kind":"method"},{"returnType":{"refId":"js.wrapping/JsObjectToMapAdapter/V","name":"V"},"id":"remove1()","name":"remove","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"key","name":"key","kind":"param"}],"line":"26","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"containsValue1()","name":"containsValue","children":[{"ref":{"refId":"js.wrapping/JsObjectToMapAdapter/V","name":"V"},"id":"value","name":"value","kind":"param"}],"line":"35","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"containsKey1()","name":"containsKey","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"key","name":"key","kind":"param"}],"line":"36","kind":"method"},{"returnType":{"refId":"js.wrapping/JsObjectToMapAdapter/V","name":"V"},"id":"putIfAbsent2()","name":"putIfAbsent","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"key","name":"key","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"ifAbsent","name":"ifAbsent","children":[{"returnType":{"refId":"js.wrapping/JsObjectToMapAdapter/V","name":"V"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"38","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"addAll1()","name":"addAll","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"js.wrapping/JsObjectToMapAdapter/V","name":"V"}],"name":"Map"},"id":"other","name":"other","kind":"param"}],"line":"40","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"clear0()","name":"clear","line":"45","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"forEach1()","name":"forEach","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"dart.core/String","name":"String"},"id":"key","uri":"package:js/src/wrapping/js/object_to_map_adapter.dart","name":"key","line":"46","kind":"param"},{"ref":{"refId":"js.wrapping/JsObjectToMapAdapter/V","name":"V"},"id":"value","uri":"package:js/src/wrapping/js/object_to_map_adapter.dart","name":"value","line":"46","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"46","kind":"method"},{"id":"_toJs1()","name":"_toJs","isPrivate":true,"children":[{"ref":{"refId":"js.wrapping/JsObjectToMapAdapter/V","name":"V"},"id":"e","name":"e","kind":"param"}],"line":"52","kind":"method"},{"returnType":{"refId":"js.wrapping/JsObjectToMapAdapter/V","name":"V"},"id":"_fromJs1()","name":"_fromJs","isPrivate":true,"children":[{"id":"value","name":"value","kind":"param"}],"line":"53","kind":"method"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Iterable"},"id":"keys","name":"keys","line":"31","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"js.wrapping/JsObjectToMapAdapter/V","name":"V"}],"name":"Iterable"},"id":"values","name":"values","line":"47","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","name":"length","line":"48","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isEmpty","name":"isEmpty","line":"49","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isNotEmpty","name":"isNotEmpty","line":"50","kind":"property"},{"ref":{"refId":"js.wrapping/Translator","arguments":[{"refId":"js.wrapping/JsObjectToMapAdapter/V","name":"V"}],"name":"Translator"},"isFinal":true,"id":"_translator","name":"_translator","isPrivate":true,"line":"17","kind":"variable"},{"id":"fromProxy2()","name":"fromProxy","children":[{"ref":{"refId":"js/Proxy","name":"Proxy"},"id":"proxy","name":"proxy","kind":"param"},{"ref":{"refId":"js.wrapping/Translator","arguments":[{"refId":"js.wrapping/JsObjectToMapAdapter/V","name":"V"}],"name":"Translator"},"isOptional":true,"id":"translator","name":"translator","kind":"param"}],"line":"19","kind":"constructor"},{"id":"V","name":"V","kind":"typeparam"}],"line":"7","kind":"class"},{"interfaces":[{"refId":"dart.core/DateTime","name":"DateTime"}],"superclass":{"refId":"js.wrapping/TypedProxy","name":"TypedProxy"},"id":"JsDateToDateTimeAdapter","comment":"Adapter to handle a js date as a dart [DateTime].","uri":"package:js/src/wrapping/js/date_to_datetime_adapter.dart","name":"JsDateToDateTimeAdapter","children":[{"returnType":{"refId":"js.wrapping/JsDateToDateTimeAdapter","name":"JsDateToDateTimeAdapter"},"isStatic":true,"id":"cast1()","comment":"Like [JsDateToDateTimeAdapter.fromProxy] but with `null` handling for\n[proxy].","name":"cast","children":[{"ref":{"refId":"js/Proxy","name":"Proxy"},"id":"proxy","name":"proxy","kind":"param"}],"line":"12","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"id":"compareTo1()","name":"compareTo","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"other","name":"other","kind":"param"}],"line":"24","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"id":"==1()","name":"==","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"other","name":"other","kind":"param"}],"line":"27","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isBefore1()","name":"isBefore","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"other","name":"other","kind":"param"}],"line":"28","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isAfter1()","name":"isAfter","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"other","name":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"isAtSameMomentAs1()","name":"isAtSameMomentAs","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"other","name":"other","kind":"param"}],"line":"30","kind":"method"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"toLocal0()","name":"toLocal","line":"32","kind":"method"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"toUtc0()","name":"toUtc","line":"33","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","name":"toString","line":"47","kind":"method"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"add1()","name":"add","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"id":"duration","name":"duration","kind":"param"}],"line":"48","kind":"method"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"subtract1()","name":"subtract","children":[{"ref":{"refId":"dart.core/Duration","name":"Duration"},"id":"duration","name":"duration","kind":"param"}],"line":"49","kind":"method"},{"returnType":{"refId":"dart.core/Duration","name":"Duration"},"id":"difference1()","name":"difference","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"other","name":"other","kind":"param"}],"line":"51","kind":"method"},{"returnType":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"_asDateTime0()","name":"_asDateTime","isPrivate":true,"line":"54","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"id":"timeZoneName","name":"timeZoneName","line":"34","kind":"property"},{"ref":{"refId":"dart.core/Duration","name":"Duration"},"id":"timeZoneOffset","name":"timeZoneOffset","line":"35","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"year","name":"year","line":"36","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"month","name":"month","line":"37","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"day","name":"day","line":"38","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"hour","name":"hour","line":"39","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"minute","name":"minute","line":"40","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"second","name":"second","line":"41","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"millisecond","name":"millisecond","line":"42","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"weekday","name":"weekday","line":"43","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"millisecondsSinceEpoch","name":"millisecondsSinceEpoch","line":"44","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isUtc","name":"isUtc","line":"46","kind":"property"},{"id":"1()","comment":"Create a new adapter from a dart [dateTime].","name":"","children":[{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"id":"dateTime","name":"dateTime","kind":"param"}],"line":"17","kind":"constructor"},{"id":"fromProxy1()","comment":"Create a new adapter from a [proxy] of a Js Date object.","name":"fromProxy","children":[{"ref":{"refId":"js/Proxy","name":"Proxy"},"id":"proxy","name":"proxy","kind":"param"}],"line":"21","kind":"constructor"}],"line":"8","kind":"class"},{"interfaces":[{"refId":"dart.core/Iterator","arguments":[{"refId":"js.wrapping/_JsIterator/E","name":"E"}],"name":"Iterator"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"_JsIterator","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"_JsIterator","isPrivate":true,"children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"moveNext0()","name":"moveNext","line":"544","kind":"method"},{"ref":{"refId":"js.wrapping/_JsIterator/E","name":"E"},"id":"current","name":"current","line":"551","kind":"property"},{"ref":{"refId":"js.wrapping/JsArrayToListAdapter","arguments":[{"refId":"js.wrapping/_JsIterator/E","name":"E"}],"name":"JsArrayToListAdapter"},"isFinal":true,"id":"_jsArray","name":"_jsArray","isPrivate":true,"line":"536","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"id":"length","name":"length","line":"537","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"_currentIndex","name":"_currentIndex","isPrivate":true,"line":"538","kind":"variable"},{"id":"1()","name":"","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter","arguments":[{"refId":"js.wrapping/_JsIterator/E","name":"E"}],"name":"JsArrayToListAdapter"},"id":"jsArray","name":"jsArray","kind":"param"}],"line":"540","kind":"constructor"},{"id":"E","name":"E","kind":"typeparam"}],"line":"535","kind":"class"},{"interfaces":[{"refId":"dart.core/List","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"List"}],"superclass":{"refId":"js.wrapping/TypedProxy","name":"TypedProxy"},"id":"JsArrayToListAdapter","comment":"Adapter to handle a js array as a dart [List].\nYou can provide a translator to automatically wrap contained Proxy to some\nTypedProxy or something else.","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"JsArrayToListAdapter","children":[{"returnType":{"refId":"js.wrapping/JsArrayToListAdapter","name":"JsArrayToListAdapter"},"isStatic":true,"id":"cast2()","comment":"Like [JsArrayToListAdapter.fromProxy] but with `null` handling for\n[proxy].","name":"cast","children":[{"ref":{"refId":"js/Proxy","name":"Proxy"},"id":"proxy","name":"proxy","kind":"param"},{"ref":{"refId":"js.wrapping/Translator","name":"Translator"},"isOptional":true,"id":"translator","name":"translator","kind":"param"}],"line":"14","kind":"method"},{"returnType":{"refId":"js.wrapping/JsArrayToListAdapter","name":"JsArrayToListAdapter"},"isStatic":true,"id":"castListOfSerializables3()","comment":"Same as [cast] but for array containing [Serializable] elements.","name":"castListOfSerializables","children":[{"ref":{"refId":"js/Proxy","name":"Proxy"},"id":"proxy","name":"proxy","kind":"param"},{"ref":{"refId":"js.wrapping/Mapper","name":"Mapper"},"id":"fromJs","name":"fromJs","line":"20","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"false","id":"mapOnlyNotNull","name":"mapOnlyNotNull","line":"20","kind":"param"}],"line":"19","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"add1()","name":"add","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"value","name":"value","kind":"param"}],"line":"37","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"clear0()","name":"clear","line":"38","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"remove1()","name":"remove","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"id":"element","name":"element","kind":"param"}],"line":"39","kind":"method"},{"returnType":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"isOperator":true,"id":"[]1()","name":"[]","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"}],"line":"42","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isOperator":true,"id":"[]=2()","name":"[]=","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"value","name":"value","kind":"param"}],"line":"46","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isSetter":true,"id":"length=1()","name":"length=","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","name":"length","kind":"param"}],"line":"50","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"sort1()","name":"sort","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"compare","name":"compare","children":[{"returnType":{"refId":"dart.core/int","name":"int"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"a","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"a","line":"51","kind":"param"},{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"b","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"b","line":"51","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"51","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"insert2()","name":"insert","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","name":"element","kind":"param"}],"line":"55","kind":"method"},{"returnType":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"removeAt1()","name":"removeAt","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"}],"line":"58","kind":"method"},{"returnType":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"removeLast0()","name":"removeLast","line":"62","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"List"},"id":"sublist2()","name":"sublist","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"id":"end","name":"end","kind":"param"}],"line":"63","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"List"},"id":"getRange2()","name":"getRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","name":"length","kind":"param"}],"line":"65","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"setRange4()","name":"setRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","name":"length","kind":"param"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"List"},"id":"from","name":"from","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"startFrom","name":"startFrom","line":"68","kind":"param"}],"line":"67","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"removeRange2()","name":"removeRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"}],"line":"75","kind":"method"},{"id":"_toJs1()","name":"_toJs","isPrivate":true,"children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"e","name":"e","kind":"param"}],"line":"80","kind":"method"},{"returnType":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"_fromJs1()","name":"_fromJs","isPrivate":true,"children":[{"id":"value","name":"value","kind":"param"}],"line":"81","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"List"},"id":"_asList0()","name":"_asList","isPrivate":true,"line":"84","kind":"method"},{"returnType":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"elementAt1()","name":"elementAt","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"}],"line":"98","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"forEach1()","name":"forEach","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"action","name":"action","children":[{"returnType":{"refId":"void","name":"void"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"100","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"100","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"contains1()","name":"contains","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","name":"element","kind":"param"}],"line":"130","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"every1()","name":"every","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"141","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"141","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"any1()","name":"any","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"152","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"152","kind":"method"},{"returnType":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"firstWhere2()","name":"firstWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"163","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"163","kind":"method"},{"returnType":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"lastWhere2()","name":"lastWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"176","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"id":"orElse","name":"orElse","children":[{"returnType":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"176","kind":"method"},{"returnType":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"singleWhere1()","name":"singleWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"189","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"189","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"join1()","name":"join","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","id":"separator","name":"separator","kind":"param"}],"line":"210","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"Iterable"},"id":"where1()","name":"where","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"239","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"239","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"map1()","name":"map","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"241","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"241","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"expand1()","name":"expand","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"f","name":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"243","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"243","kind":"method"},{"returnType":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"reduce1()","name":"reduce","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"combine","name":"combine","children":[{"returnType":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"previousValue","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"previousValue","line":"245","kind":"param"},{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"245","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"245","kind":"method"},{"id":"fold2()","name":"fold","children":[{"id":"initialValue","name":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"combine","name":"combine","children":[{"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"previousValue","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"previousValue","line":"254","kind":"param"},{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"254","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"254","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"Iterable"},"id":"skip1()","name":"skip","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"count","name":"count","kind":"param"}],"line":"266","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"Iterable"},"id":"skipWhile1()","name":"skipWhile","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"268","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"268","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"Iterable"},"id":"take1()","name":"take","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"count","name":"count","kind":"param"}],"line":"270","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"Iterable"},"id":"takeWhile1()","name":"takeWhile","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"272","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"272","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"List"},"id":"toList1()","name":"toList","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","id":"growable","name":"growable","kind":"param"}],"line":"274","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"Set"},"id":"toSet0()","name":"toSet","line":"287","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"addAll1()","name":"addAll","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"}],"line":"300","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"removeWhere1()","name":"removeWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"316","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"316","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"retainWhere1()","name":"retainWhere","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"320","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"320","kind":"method"},{"returnType":{"refId":"void","name":"void"},"isStatic":true,"id":"_filter3()","name":"_filter","isPrivate":true,"children":[{"ref":{"refId":"dart.core/List","name":"List"},"id":"source","name":"source","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"id":"test","name":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"id":"Function","uri":"dart-sdk/lib/core/function.dart","name":"Function","children":[{"id":"element","uri":"package:js/src/wrapping/js/array_to_list_adapter.dart","name":"element","line":"325","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"325","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"retainMatching","name":"retainMatching","line":"326","kind":"param"}],"line":"324","kind":"method"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/int","name":"int"},{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"Map"},"id":"asMap0()","name":"asMap","line":"361","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"_rangeCheck2()","name":"_rangeCheck","isPrivate":true,"children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"}],"line":"363","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"fillRange3()","name":"fillRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"},{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"isOptional":true,"id":"fill","name":"fill","kind":"param"}],"line":"395","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"replaceRange3()","name":"replaceRange","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"start","name":"start","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"end","name":"end","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"Iterable"},"id":"newContents","name":"newContents","kind":"param"}],"line":"434","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"id":"indexOf2()","name":"indexOf","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","name":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"defaultValue":"0","id":"startIndex","name":"startIndex","kind":"param"}],"line":"440","kind":"method"},{"returnType":{"refId":"dart.core/int","name":"int"},"id":"lastIndexOf2()","comment":"\nReturns the last index in the list [a] of the given [element], starting\nthe search at index [startIndex] to 0.\nReturns -1 if [element] is not found.\n","name":"lastIndexOf","children":[{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"element","name":"element","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"isOptional":true,"id":"startIndex","name":"startIndex","kind":"param"}],"line":"460","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"insertAll2()","name":"insertAll","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"}],"line":"503","kind":"method"},{"returnType":{"refId":"void","name":"void"},"id":"setAll2()","name":"setAll","children":[{"ref":{"refId":"dart.core/int","name":"int"},"id":"index","name":"index","kind":"param"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"Iterable"},"id":"iterable","name":"iterable","kind":"param"}],"line":"520","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"id":"toString0()","name":"toString","line":"532","kind":"method"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"Iterator"},"id":"iterator","name":"iterator","line":"33","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"id":"length","name":"length","line":"34","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isEmpty","name":"isEmpty","line":"110","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"id":"isNotEmpty","name":"isNotEmpty","line":"112","kind":"property"},{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"first","name":"first","line":"114","kind":"property"},{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"last","name":"last","line":"119","kind":"property"},{"ref":{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"},"id":"single","name":"single","line":"124","kind":"property"},{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"Iterable"},"id":"reversed","name":"reversed","line":"530","kind":"property"},{"ref":{"refId":"js.wrapping/Translator","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"Translator"},"isFinal":true,"id":"_translator","name":"_translator","isPrivate":true,"line":"25","kind":"variable"},{"id":"fromProxy2()","comment":"Create a new adapter from a proxy of a Js list.","name":"fromProxy","children":[{"ref":{"refId":"js/Proxy","name":"Proxy"},"id":"proxy","name":"proxy","kind":"param"},{"ref":{"refId":"js.wrapping/Translator","arguments":[{"refId":"js.wrapping/JsArrayToListAdapter/E","name":"E"}],"name":"Translator"},"isOptional":true,"id":"translator","name":"translator","kind":"param"}],"line":"28","kind":"constructor"},{"id":"E","name":"E","kind":"typeparam"}],"line":"10","kind":"class"},{"returnType":{"refId":"js.wrapping/Mapper/T","name":"T"},"id":"Mapper","uri":"package:js/src/wrapping/util.dart","name":"Mapper","children":[{"ref":{"refId":"js.wrapping/Mapper/F","name":"F"},"id":"o","name":"o","kind":"param"},{"id":"F","name":"F","kind":"typeparam"},{"id":"T","name":"T","kind":"typeparam"}],"line":"7","kind":"typedef"},{"superclass":{"refId":"js.wrapping/TypedProxy","name":"TypedProxy"},"id":"MagicProxy","comment":"base class to simplify declaration of [TypedProxy].","uri":"package:js/src/wrapping/magic_proxy.dart","name":"MagicProxy","children":[{"isOperator":true,"id":"[]1()","name":"[]","children":[{"id":"arg","name":"arg","kind":"param"}],"line":"15","kind":"method"},{"isOperator":true,"id":"[]=2()","name":"[]=","children":[{"id":"key","name":"key","kind":"param"},{"id":"value","name":"value","kind":"param"}],"line":"16","kind":"method"},{"id":"noSuchMethod1()","name":"noSuchMethod","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"id":"invocation","name":"invocation","kind":"param"}],"line":"19","kind":"method"},{"id":"2()","name":"","children":[{"ref":{"refId":"js/Serializable","arguments":[{"refId":"js/FunctionProxy","name":"FunctionProxy"}],"name":"Serializable"},"isOptional":true,"id":"function","name":"function","kind":"param"},{"ref":{"refId":"dart.core/List","name":"List"},"isOptional":true,"id":"args","name":"args","kind":"param"}],"line":"9","kind":"constructor"},{"id":"fromProxy1()","name":"fromProxy","children":[{"ref":{"refId":"js/Proxy","name":"Proxy"},"id":"proxy","name":"proxy","kind":"param"}],"line":"13","kind":"constructor"}],"line":"8","kind":"class"},{"interfaces":[{"refId":"js/Serializable","arguments":[{"refId":"js/Proxy","name":"Proxy"}],"name":"Serializable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"TypedProxy","comment":"base class to wrap a [Proxy] in a strong typed object.","uri":"package:js/src/wrapping/typed_proxy.dart","name":"TypedProxy","children":[{"id":"toJs0()","name":"toJs","line":"17","kind":"method"},{"ref":{"refId":"js/Proxy","name":"Proxy"},"isFinal":true,"id":"$unsafe","name":"$unsafe","line":"9","kind":"variable"},{"id":"2()","name":"","children":[{"ref":{"refId":"js/Serializable","arguments":[{"refId":"js/FunctionProxy","name":"FunctionProxy"}],"name":"Serializable"},"isOptional":true,"id":"function","name":"function","kind":"param"},{"ref":{"refId":"dart.core/List","name":"List"},"isOptional":true,"id":"args","name":"args","kind":"param"}],"line":"11","kind":"constructor"},{"id":"fromProxy1()","name":"fromProxy","children":[{"initializedField":{"refId":"js.wrapping/TypedProxy/$unsafe","name":"$unsafe"},"ref":{"refId":"js/Proxy","name":"Proxy"},"id":"$unsafe","name":"$unsafe","kind":"param"}],"line":"15","kind":"constructor"}],"line":"8","kind":"class"},{"interfaces":[{"refId":"js.wrapping/Translator","arguments":[{"refId":"js.wrapping/TranslatorForSerializable/E","name":"E"}],"name":"Translator"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"TranslatorForSerializable","uri":"package:js/src/wrapping/translator.dart","name":"TranslatorForSerializable","children":[{"ref":{"refId":"js.wrapping/Mapper","name":"Mapper"},"id":"fromJs","name":"fromJs","line":"24","kind":"property"},{"ref":{"refId":"js.wrapping/Mapper","name":"Mapper"},"id":"toJs","name":"toJs","line":"25","kind":"property"},{"ref":{"refId":"js.wrapping/Mapper","name":"Mapper"},"id":"_fromJs","name":"_fromJs","isPrivate":true,"line":"16","kind":"variable"},{"ref":{"refId":"js.wrapping/Mapper","name":"Mapper"},"id":"_toJs","name":"_toJs","isPrivate":true,"line":"17","kind":"variable"},{"id":"2()","name":"","children":[{"ref":{"refId":"js.wrapping/Mapper","name":"Mapper"},"id":"fromJs","name":"fromJs","kind":"param"},{"isNamed":true,"isOptional":true,"defaultValue":"true","id":"mapOnlyNotNull","name":"mapOnlyNotNull","kind":"param"}],"line":"19","kind":"constructor"},{"upperBound":{"refId":"js/Serializable","name":"Serializable"},"id":"E","name":"E","kind":"typeparam"}],"line":"14","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"id":"Translator","uri":"package:js/src/wrapping/translator.dart","name":"Translator","children":[{"ref":{"refId":"js.wrapping/Mapper","name":"Mapper"},"isFinal":true,"id":"fromJs","name":"fromJs","line":"8","kind":"variable"},{"ref":{"refId":"js.wrapping/Mapper","name":"Mapper"},"isFinal":true,"id":"toJs","name":"toJs","line":"9","kind":"variable"},{"id":"2()","name":"","children":[{"initializedField":{"refId":"js.wrapping/Translator/fromJs","name":"fromJs"},"ref":{"refId":"js.wrapping/Mapper","name":"Mapper"},"id":"fromJs","name":"fromJs","kind":"param"},{"initializedField":{"refId":"js.wrapping/Translator/toJs","name":"toJs"},"ref":{"refId":"js.wrapping/Mapper","name":"Mapper"},"id":"toJs","name":"toJs","kind":"param"}],"line":"11","kind":"constructor"},{"id":"E","name":"E","kind":"typeparam"}],"line":"7","kind":"class"}],"line":"5","kind":"library"}